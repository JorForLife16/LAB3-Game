
LAB03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ed0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000028c  080080b0  080080b0  000090b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800833c  0800833c  0000a0a0  2**0
                  CONTENTS
  4 .ARM          00000008  0800833c  0800833c  0000933c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008344  08008344  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008344  08008344  00009344  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008348  08008348  00009348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000a0  20000000  0800834c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005a4  200000a0  080083ec  0000a0a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000644  080083ec  0000a644  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016b4c  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b77  00000000  00000000  00020c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00023798  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ffa  00000000  00000000  00024bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002844d  00000000  00000000  00025bea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018f61  00000000  00000000  0004e037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102513  00000000  00000000  00066f98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001694ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006058  00000000  00000000  001694f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0016f548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200000a0 	.word	0x200000a0
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008098 	.word	0x08008098

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200000a4 	.word	0x200000a4
 800021c:	08008098 	.word	0x08008098

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_uldivmod>:
 80002d0:	b953      	cbnz	r3, 80002e8 <__aeabi_uldivmod+0x18>
 80002d2:	b94a      	cbnz	r2, 80002e8 <__aeabi_uldivmod+0x18>
 80002d4:	2900      	cmp	r1, #0
 80002d6:	bf08      	it	eq
 80002d8:	2800      	cmpeq	r0, #0
 80002da:	bf1c      	itt	ne
 80002dc:	f04f 31ff 	movne.w	r1, #4294967295
 80002e0:	f04f 30ff 	movne.w	r0, #4294967295
 80002e4:	f000 b96a 	b.w	80005bc <__aeabi_idiv0>
 80002e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f0:	f000 f806 	bl	8000300 <__udivmoddi4>
 80002f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002fc:	b004      	add	sp, #16
 80002fe:	4770      	bx	lr

08000300 <__udivmoddi4>:
 8000300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000304:	9d08      	ldr	r5, [sp, #32]
 8000306:	460c      	mov	r4, r1
 8000308:	2b00      	cmp	r3, #0
 800030a:	d14e      	bne.n	80003aa <__udivmoddi4+0xaa>
 800030c:	4694      	mov	ip, r2
 800030e:	458c      	cmp	ip, r1
 8000310:	4686      	mov	lr, r0
 8000312:	fab2 f282 	clz	r2, r2
 8000316:	d962      	bls.n	80003de <__udivmoddi4+0xde>
 8000318:	b14a      	cbz	r2, 800032e <__udivmoddi4+0x2e>
 800031a:	f1c2 0320 	rsb	r3, r2, #32
 800031e:	4091      	lsls	r1, r2
 8000320:	fa20 f303 	lsr.w	r3, r0, r3
 8000324:	fa0c fc02 	lsl.w	ip, ip, r2
 8000328:	4319      	orrs	r1, r3
 800032a:	fa00 fe02 	lsl.w	lr, r0, r2
 800032e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000332:	fa1f f68c 	uxth.w	r6, ip
 8000336:	fbb1 f4f7 	udiv	r4, r1, r7
 800033a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800033e:	fb07 1114 	mls	r1, r7, r4, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb04 f106 	mul.w	r1, r4, r6
 800034a:	4299      	cmp	r1, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x64>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f104 30ff 	add.w	r0, r4, #4294967295
 8000356:	f080 8112 	bcs.w	800057e <__udivmoddi4+0x27e>
 800035a:	4299      	cmp	r1, r3
 800035c:	f240 810f 	bls.w	800057e <__udivmoddi4+0x27e>
 8000360:	3c02      	subs	r4, #2
 8000362:	4463      	add	r3, ip
 8000364:	1a59      	subs	r1, r3, r1
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb1 f0f7 	udiv	r0, r1, r7
 800036e:	fb07 1110 	mls	r1, r7, r0, r1
 8000372:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000376:	fb00 f606 	mul.w	r6, r0, r6
 800037a:	429e      	cmp	r6, r3
 800037c:	d90a      	bls.n	8000394 <__udivmoddi4+0x94>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 31ff 	add.w	r1, r0, #4294967295
 8000386:	f080 80fc 	bcs.w	8000582 <__udivmoddi4+0x282>
 800038a:	429e      	cmp	r6, r3
 800038c:	f240 80f9 	bls.w	8000582 <__udivmoddi4+0x282>
 8000390:	4463      	add	r3, ip
 8000392:	3802      	subs	r0, #2
 8000394:	1b9b      	subs	r3, r3, r6
 8000396:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800039a:	2100      	movs	r1, #0
 800039c:	b11d      	cbz	r5, 80003a6 <__udivmoddi4+0xa6>
 800039e:	40d3      	lsrs	r3, r2
 80003a0:	2200      	movs	r2, #0
 80003a2:	e9c5 3200 	strd	r3, r2, [r5]
 80003a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d905      	bls.n	80003ba <__udivmoddi4+0xba>
 80003ae:	b10d      	cbz	r5, 80003b4 <__udivmoddi4+0xb4>
 80003b0:	e9c5 0100 	strd	r0, r1, [r5]
 80003b4:	2100      	movs	r1, #0
 80003b6:	4608      	mov	r0, r1
 80003b8:	e7f5      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003ba:	fab3 f183 	clz	r1, r3
 80003be:	2900      	cmp	r1, #0
 80003c0:	d146      	bne.n	8000450 <__udivmoddi4+0x150>
 80003c2:	42a3      	cmp	r3, r4
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xcc>
 80003c6:	4290      	cmp	r0, r2
 80003c8:	f0c0 80f0 	bcc.w	80005ac <__udivmoddi4+0x2ac>
 80003cc:	1a86      	subs	r6, r0, r2
 80003ce:	eb64 0303 	sbc.w	r3, r4, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d0e6      	beq.n	80003a6 <__udivmoddi4+0xa6>
 80003d8:	e9c5 6300 	strd	r6, r3, [r5]
 80003dc:	e7e3      	b.n	80003a6 <__udivmoddi4+0xa6>
 80003de:	2a00      	cmp	r2, #0
 80003e0:	f040 8090 	bne.w	8000504 <__udivmoddi4+0x204>
 80003e4:	eba1 040c 	sub.w	r4, r1, ip
 80003e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ec:	fa1f f78c 	uxth.w	r7, ip
 80003f0:	2101      	movs	r1, #1
 80003f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fa:	fb08 4416 	mls	r4, r8, r6, r4
 80003fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000402:	fb07 f006 	mul.w	r0, r7, r6
 8000406:	4298      	cmp	r0, r3
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x11c>
 800040a:	eb1c 0303 	adds.w	r3, ip, r3
 800040e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x11a>
 8000414:	4298      	cmp	r0, r3
 8000416:	f200 80cd 	bhi.w	80005b4 <__udivmoddi4+0x2b4>
 800041a:	4626      	mov	r6, r4
 800041c:	1a1c      	subs	r4, r3, r0
 800041e:	fa1f f38e 	uxth.w	r3, lr
 8000422:	fbb4 f0f8 	udiv	r0, r4, r8
 8000426:	fb08 4410 	mls	r4, r8, r0, r4
 800042a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800042e:	fb00 f707 	mul.w	r7, r0, r7
 8000432:	429f      	cmp	r7, r3
 8000434:	d908      	bls.n	8000448 <__udivmoddi4+0x148>
 8000436:	eb1c 0303 	adds.w	r3, ip, r3
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d202      	bcs.n	8000446 <__udivmoddi4+0x146>
 8000440:	429f      	cmp	r7, r3
 8000442:	f200 80b0 	bhi.w	80005a6 <__udivmoddi4+0x2a6>
 8000446:	4620      	mov	r0, r4
 8000448:	1bdb      	subs	r3, r3, r7
 800044a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800044e:	e7a5      	b.n	800039c <__udivmoddi4+0x9c>
 8000450:	f1c1 0620 	rsb	r6, r1, #32
 8000454:	408b      	lsls	r3, r1
 8000456:	fa22 f706 	lsr.w	r7, r2, r6
 800045a:	431f      	orrs	r7, r3
 800045c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000460:	fa04 f301 	lsl.w	r3, r4, r1
 8000464:	ea43 030c 	orr.w	r3, r3, ip
 8000468:	40f4      	lsrs	r4, r6
 800046a:	fa00 f801 	lsl.w	r8, r0, r1
 800046e:	0c38      	lsrs	r0, r7, #16
 8000470:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000474:	fbb4 fef0 	udiv	lr, r4, r0
 8000478:	fa1f fc87 	uxth.w	ip, r7
 800047c:	fb00 441e 	mls	r4, r0, lr, r4
 8000480:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000484:	fb0e f90c 	mul.w	r9, lr, ip
 8000488:	45a1      	cmp	r9, r4
 800048a:	fa02 f201 	lsl.w	r2, r2, r1
 800048e:	d90a      	bls.n	80004a6 <__udivmoddi4+0x1a6>
 8000490:	193c      	adds	r4, r7, r4
 8000492:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000496:	f080 8084 	bcs.w	80005a2 <__udivmoddi4+0x2a2>
 800049a:	45a1      	cmp	r9, r4
 800049c:	f240 8081 	bls.w	80005a2 <__udivmoddi4+0x2a2>
 80004a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004a4:	443c      	add	r4, r7
 80004a6:	eba4 0409 	sub.w	r4, r4, r9
 80004aa:	fa1f f983 	uxth.w	r9, r3
 80004ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80004b2:	fb00 4413 	mls	r4, r0, r3, r4
 80004b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80004be:	45a4      	cmp	ip, r4
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x1d2>
 80004c2:	193c      	adds	r4, r7, r4
 80004c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004c8:	d267      	bcs.n	800059a <__udivmoddi4+0x29a>
 80004ca:	45a4      	cmp	ip, r4
 80004cc:	d965      	bls.n	800059a <__udivmoddi4+0x29a>
 80004ce:	3b02      	subs	r3, #2
 80004d0:	443c      	add	r4, r7
 80004d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004d6:	fba0 9302 	umull	r9, r3, r0, r2
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	429c      	cmp	r4, r3
 80004e0:	46ce      	mov	lr, r9
 80004e2:	469c      	mov	ip, r3
 80004e4:	d351      	bcc.n	800058a <__udivmoddi4+0x28a>
 80004e6:	d04e      	beq.n	8000586 <__udivmoddi4+0x286>
 80004e8:	b155      	cbz	r5, 8000500 <__udivmoddi4+0x200>
 80004ea:	ebb8 030e 	subs.w	r3, r8, lr
 80004ee:	eb64 040c 	sbc.w	r4, r4, ip
 80004f2:	fa04 f606 	lsl.w	r6, r4, r6
 80004f6:	40cb      	lsrs	r3, r1
 80004f8:	431e      	orrs	r6, r3
 80004fa:	40cc      	lsrs	r4, r1
 80004fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000500:	2100      	movs	r1, #0
 8000502:	e750      	b.n	80003a6 <__udivmoddi4+0xa6>
 8000504:	f1c2 0320 	rsb	r3, r2, #32
 8000508:	fa20 f103 	lsr.w	r1, r0, r3
 800050c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000510:	fa24 f303 	lsr.w	r3, r4, r3
 8000514:	4094      	lsls	r4, r2
 8000516:	430c      	orrs	r4, r1
 8000518:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800051c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000520:	fa1f f78c 	uxth.w	r7, ip
 8000524:	fbb3 f0f8 	udiv	r0, r3, r8
 8000528:	fb08 3110 	mls	r1, r8, r0, r3
 800052c:	0c23      	lsrs	r3, r4, #16
 800052e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000532:	fb00 f107 	mul.w	r1, r0, r7
 8000536:	4299      	cmp	r1, r3
 8000538:	d908      	bls.n	800054c <__udivmoddi4+0x24c>
 800053a:	eb1c 0303 	adds.w	r3, ip, r3
 800053e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000542:	d22c      	bcs.n	800059e <__udivmoddi4+0x29e>
 8000544:	4299      	cmp	r1, r3
 8000546:	d92a      	bls.n	800059e <__udivmoddi4+0x29e>
 8000548:	3802      	subs	r0, #2
 800054a:	4463      	add	r3, ip
 800054c:	1a5b      	subs	r3, r3, r1
 800054e:	b2a4      	uxth	r4, r4
 8000550:	fbb3 f1f8 	udiv	r1, r3, r8
 8000554:	fb08 3311 	mls	r3, r8, r1, r3
 8000558:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800055c:	fb01 f307 	mul.w	r3, r1, r7
 8000560:	42a3      	cmp	r3, r4
 8000562:	d908      	bls.n	8000576 <__udivmoddi4+0x276>
 8000564:	eb1c 0404 	adds.w	r4, ip, r4
 8000568:	f101 36ff 	add.w	r6, r1, #4294967295
 800056c:	d213      	bcs.n	8000596 <__udivmoddi4+0x296>
 800056e:	42a3      	cmp	r3, r4
 8000570:	d911      	bls.n	8000596 <__udivmoddi4+0x296>
 8000572:	3902      	subs	r1, #2
 8000574:	4464      	add	r4, ip
 8000576:	1ae4      	subs	r4, r4, r3
 8000578:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800057c:	e739      	b.n	80003f2 <__udivmoddi4+0xf2>
 800057e:	4604      	mov	r4, r0
 8000580:	e6f0      	b.n	8000364 <__udivmoddi4+0x64>
 8000582:	4608      	mov	r0, r1
 8000584:	e706      	b.n	8000394 <__udivmoddi4+0x94>
 8000586:	45c8      	cmp	r8, r9
 8000588:	d2ae      	bcs.n	80004e8 <__udivmoddi4+0x1e8>
 800058a:	ebb9 0e02 	subs.w	lr, r9, r2
 800058e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000592:	3801      	subs	r0, #1
 8000594:	e7a8      	b.n	80004e8 <__udivmoddi4+0x1e8>
 8000596:	4631      	mov	r1, r6
 8000598:	e7ed      	b.n	8000576 <__udivmoddi4+0x276>
 800059a:	4603      	mov	r3, r0
 800059c:	e799      	b.n	80004d2 <__udivmoddi4+0x1d2>
 800059e:	4630      	mov	r0, r6
 80005a0:	e7d4      	b.n	800054c <__udivmoddi4+0x24c>
 80005a2:	46d6      	mov	lr, sl
 80005a4:	e77f      	b.n	80004a6 <__udivmoddi4+0x1a6>
 80005a6:	4463      	add	r3, ip
 80005a8:	3802      	subs	r0, #2
 80005aa:	e74d      	b.n	8000448 <__udivmoddi4+0x148>
 80005ac:	4606      	mov	r6, r0
 80005ae:	4623      	mov	r3, r4
 80005b0:	4608      	mov	r0, r1
 80005b2:	e70f      	b.n	80003d4 <__udivmoddi4+0xd4>
 80005b4:	3e02      	subs	r6, #2
 80005b6:	4463      	add	r3, ip
 80005b8:	e730      	b.n	800041c <__udivmoddi4+0x11c>
 80005ba:	bf00      	nop

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b598      	push	{r3, r4, r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
HAL_Init();
 80005c4:	f001 f9f3 	bl	80019ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 fb7a 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f000 fd3c 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 80005d0:	f000 fce8 	bl	8000fa4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80005d4:	f000 fc00 	bl	8000dd8 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005d8:	f000 fc48 	bl	8000e6c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80005dc:	f000 fc94 	bl	8000f08 <MX_TIM2_Init>
  MX_I2C1_Init();
 80005e0:	f000 fbba 	bl	8000d58 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
//  HAL_UART_Receive_IT(&hlpuart1, rxData, 6);
  	HAL_TIM_Base_Start_IT(&htim2);
 80005e4:	48a8      	ldr	r0, [pc, #672]	@ (8000888 <main+0x2c8>)
 80005e6:	f004 fee5 	bl	80053b4 <HAL_TIM_Base_Start_IT>
  	HAL_Delay(300);
 80005ea:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80005ee:	f001 fa4f 	bl	8001a90 <HAL_Delay>
  	UARTDMAconfig();
 80005f2:	f000 fd97 	bl	8001124 <UARTDMAconfig>

    /* USER CODE BEGIN 3 */


//	  HAL_Delay(100);
	  EEPROMWriteExample();
 80005f6:	f000 fda3 	bl	8001140 <EEPROMWriteExample>
	  EEPROMReadExample(eepromDataReadBack, 4);
 80005fa:	2104      	movs	r1, #4
 80005fc:	48a3      	ldr	r0, [pc, #652]	@ (800088c <main+0x2cc>)
 80005fe:	f000 fdbf 	bl	8001180 <EEPROMReadExample>
			answer[0] = 0;
			eepromExampleWriteFlag = 0;
		}
*/

	  if(mode == 0 && RxBuffer[0] == 0 && RxBuffer[0] != '\r'){
 8000602:	4ba3      	ldr	r3, [pc, #652]	@ (8000890 <main+0x2d0>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	2b00      	cmp	r3, #0
 8000608:	d131      	bne.n	800066e <main+0xae>
 800060a:	4ba2      	ldr	r3, [pc, #648]	@ (8000894 <main+0x2d4>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d12d      	bne.n	800066e <main+0xae>
 8000612:	4ba0      	ldr	r3, [pc, #640]	@ (8000894 <main+0x2d4>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b0d      	cmp	r3, #13
 8000618:	d029      	beq.n	800066e <main+0xae>
//		  static uint8_t data[4] = { 0x00, 0x00, 0x00, 0x00 };


			HAL_UART_Transmit(&hlpuart1, "--------------------------\n\r", strlen("--------------------------\n\r") ,8);
 800061a:	2308      	movs	r3, #8
 800061c:	221c      	movs	r2, #28
 800061e:	499e      	ldr	r1, [pc, #632]	@ (8000898 <main+0x2d8>)
 8000620:	489e      	ldr	r0, [pc, #632]	@ (800089c <main+0x2dc>)
 8000622:	f005 fc53 	bl	8005ecc <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, difficult_level, strlen(difficult_level) ,10);
 8000626:	4b9e      	ldr	r3, [pc, #632]	@ (80008a0 <main+0x2e0>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	461c      	mov	r4, r3
 800062c:	4b9c      	ldr	r3, [pc, #624]	@ (80008a0 <main+0x2e0>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f7ff fdf5 	bl	8000220 <strlen>
 8000636:	4603      	mov	r3, r0
 8000638:	b29a      	uxth	r2, r3
 800063a:	230a      	movs	r3, #10
 800063c:	4621      	mov	r1, r4
 800063e:	4897      	ldr	r0, [pc, #604]	@ (800089c <main+0x2dc>)
 8000640:	f005 fc44 	bl	8005ecc <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, "ENTER YOUR DIFFICULT\n\r", strlen("ENTER YOUR DIFFICULT\n\r") ,8);
 8000644:	2308      	movs	r3, #8
 8000646:	2216      	movs	r2, #22
 8000648:	4996      	ldr	r1, [pc, #600]	@ (80008a4 <main+0x2e4>)
 800064a:	4894      	ldr	r0, [pc, #592]	@ (800089c <main+0x2dc>)
 800064c:	f005 fc3e 	bl	8005ecc <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, "--------------------------\n\r", strlen("--------------------------\n\r") ,8);
 8000650:	2308      	movs	r3, #8
 8000652:	221c      	movs	r2, #28
 8000654:	4990      	ldr	r1, [pc, #576]	@ (8000898 <main+0x2d8>)
 8000656:	4891      	ldr	r0, [pc, #580]	@ (800089c <main+0x2dc>)
 8000658:	f005 fc38 	bl	8005ecc <HAL_UART_Transmit>

			mode = 1;
 800065c:	4b8c      	ldr	r3, [pc, #560]	@ (8000890 <main+0x2d0>)
 800065e:	2201      	movs	r2, #1
 8000660:	601a      	str	r2, [r3, #0]
			RxBuffer[0] = 0;
 8000662:	4b8c      	ldr	r3, [pc, #560]	@ (8000894 <main+0x2d4>)
 8000664:	2200      	movs	r2, #0
 8000666:	701a      	strb	r2, [r3, #0]
			eepromExampleReadFlag = 0;
 8000668:	4b8f      	ldr	r3, [pc, #572]	@ (80008a8 <main+0x2e8>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]

	  }
	  if(mode == 1){
 800066e:	4b88      	ldr	r3, [pc, #544]	@ (8000890 <main+0x2d0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d111      	bne.n	800069a <main+0xda>

			if(RxBuffer[0] != 0 && RxBuffer[0] != '\r'){
 8000676:	4b87      	ldr	r3, [pc, #540]	@ (8000894 <main+0x2d4>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d00d      	beq.n	800069a <main+0xda>
 800067e:	4b85      	ldr	r3, [pc, #532]	@ (8000894 <main+0x2d4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b0d      	cmp	r3, #13
 8000684:	d009      	beq.n	800069a <main+0xda>
				strcpy(answer, RxBuffer);
 8000686:	4983      	ldr	r1, [pc, #524]	@ (8000894 <main+0x2d4>)
 8000688:	4888      	ldr	r0, [pc, #544]	@ (80008ac <main+0x2ec>)
 800068a:	f006 fede 	bl	800744a <strcpy>
				mode = 2;
 800068e:	4b80      	ldr	r3, [pc, #512]	@ (8000890 <main+0x2d0>)
 8000690:	2202      	movs	r2, #2
 8000692:	601a      	str	r2, [r3, #0]
				RxBuffer[0] = 0;
 8000694:	4b7f      	ldr	r3, [pc, #508]	@ (8000894 <main+0x2d4>)
 8000696:	2200      	movs	r2, #0
 8000698:	701a      	strb	r2, [r3, #0]

//				eepromExampleWriteFlag = 0;
			}
	  }
	  if(mode == 2){
 800069a:	4b7d      	ldr	r3, [pc, #500]	@ (8000890 <main+0x2d0>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b02      	cmp	r3, #2
 80006a0:	d114      	bne.n	80006cc <main+0x10c>

			HAL_UART_Transmit(&hlpuart1, selected_level, strlen(selected_level) ,8);
 80006a2:	4b83      	ldr	r3, [pc, #524]	@ (80008b0 <main+0x2f0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	461c      	mov	r4, r3
 80006a8:	4b81      	ldr	r3, [pc, #516]	@ (80008b0 <main+0x2f0>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff fdb7 	bl	8000220 <strlen>
 80006b2:	4603      	mov	r3, r0
 80006b4:	b29a      	uxth	r2, r3
 80006b6:	2308      	movs	r3, #8
 80006b8:	4621      	mov	r1, r4
 80006ba:	4878      	ldr	r0, [pc, #480]	@ (800089c <main+0x2dc>)
 80006bc:	f005 fc06 	bl	8005ecc <HAL_UART_Transmit>

//			HAL_UART_Transmit(&hlpuart1, answer, 1 ,2);
//			HAL_UART_Transmit(&hlpuart1, "\n\r", strlen("\n\r") ,2);

			mode = 3;
 80006c0:	4b73      	ldr	r3, [pc, #460]	@ (8000890 <main+0x2d0>)
 80006c2:	2203      	movs	r2, #3
 80006c4:	601a      	str	r2, [r3, #0]
			RxBuffer[0] = 0;
 80006c6:	4b73      	ldr	r3, [pc, #460]	@ (8000894 <main+0x2d4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]

	  }

	  if(mode == 3){
 80006cc:	4b70      	ldr	r3, [pc, #448]	@ (8000890 <main+0x2d0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	f040 80b8 	bne.w	8000846 <main+0x286>
		  if(answer[0] == 49){
 80006d6:	4b75      	ldr	r3, [pc, #468]	@ (80008ac <main+0x2ec>)
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	2b31      	cmp	r3, #49	@ 0x31
 80006dc:	d121      	bne.n	8000722 <main+0x162>
			  	data[0] = 0xff;
 80006de:	4b75      	ldr	r3, [pc, #468]	@ (80008b4 <main+0x2f4>)
 80006e0:	22ff      	movs	r2, #255	@ 0xff
 80006e2:	701a      	strb	r2, [r3, #0]
			  	data[1] = 0xff;
 80006e4:	4b73      	ldr	r3, [pc, #460]	@ (80008b4 <main+0x2f4>)
 80006e6:	22ff      	movs	r2, #255	@ 0xff
 80006e8:	705a      	strb	r2, [r3, #1]
			  	data[2] = 0xff;
 80006ea:	4b72      	ldr	r3, [pc, #456]	@ (80008b4 <main+0x2f4>)
 80006ec:	22ff      	movs	r2, #255	@ 0xff
 80006ee:	709a      	strb	r2, [r3, #2]
			  	data[3] = 0x00;
 80006f0:	4b70      	ldr	r3, [pc, #448]	@ (80008b4 <main+0x2f4>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	70da      	strb	r2, [r3, #3]
			    eepromExampleWriteFlag = 1;
 80006f6:	4b70      	ldr	r3, [pc, #448]	@ (80008b8 <main+0x2f8>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&hlpuart1, "EASY\n\r", strlen("EASY\n\r") ,2);
 80006fc:	2302      	movs	r3, #2
 80006fe:	2206      	movs	r2, #6
 8000700:	496e      	ldr	r1, [pc, #440]	@ (80008bc <main+0x2fc>)
 8000702:	4866      	ldr	r0, [pc, #408]	@ (800089c <main+0x2dc>)
 8000704:	f005 fbe2 	bl	8005ecc <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1, "--------------------------\n\r", strlen("--------------------------\n\r") ,8);
 8000708:	2308      	movs	r3, #8
 800070a:	221c      	movs	r2, #28
 800070c:	4962      	ldr	r1, [pc, #392]	@ (8000898 <main+0x2d8>)
 800070e:	4863      	ldr	r0, [pc, #396]	@ (800089c <main+0x2dc>)
 8000710:	f005 fbdc 	bl	8005ecc <HAL_UART_Transmit>

				level = 1;
 8000714:	4b6a      	ldr	r3, [pc, #424]	@ (80008c0 <main+0x300>)
 8000716:	2201      	movs	r2, #1
 8000718:	601a      	str	r2, [r3, #0]
				RxBuffer[0] = 0;
 800071a:	4b5e      	ldr	r3, [pc, #376]	@ (8000894 <main+0x2d4>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	e091      	b.n	8000846 <main+0x286>

//				mode = 0;
		  }else if(answer[0] == 50){
 8000722:	4b62      	ldr	r3, [pc, #392]	@ (80008ac <main+0x2ec>)
 8000724:	781b      	ldrb	r3, [r3, #0]
 8000726:	2b32      	cmp	r3, #50	@ 0x32
 8000728:	d121      	bne.n	800076e <main+0x1ae>
			  	data[0] = 0xff;
 800072a:	4b62      	ldr	r3, [pc, #392]	@ (80008b4 <main+0x2f4>)
 800072c:	22ff      	movs	r2, #255	@ 0xff
 800072e:	701a      	strb	r2, [r3, #0]
			  	data[1] = 0xff;
 8000730:	4b60      	ldr	r3, [pc, #384]	@ (80008b4 <main+0x2f4>)
 8000732:	22ff      	movs	r2, #255	@ 0xff
 8000734:	705a      	strb	r2, [r3, #1]
			  	data[2] = 0xff;
 8000736:	4b5f      	ldr	r3, [pc, #380]	@ (80008b4 <main+0x2f4>)
 8000738:	22ff      	movs	r2, #255	@ 0xff
 800073a:	709a      	strb	r2, [r3, #2]
			  	data[3] = 0x00;
 800073c:	4b5d      	ldr	r3, [pc, #372]	@ (80008b4 <main+0x2f4>)
 800073e:	2200      	movs	r2, #0
 8000740:	70da      	strb	r2, [r3, #3]
			    eepromExampleWriteFlag = 1;
 8000742:	4b5d      	ldr	r3, [pc, #372]	@ (80008b8 <main+0x2f8>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&hlpuart1, "MEDIUM\n\r", strlen("MEDIUM\n\r") ,2);
 8000748:	2302      	movs	r3, #2
 800074a:	2208      	movs	r2, #8
 800074c:	495d      	ldr	r1, [pc, #372]	@ (80008c4 <main+0x304>)
 800074e:	4853      	ldr	r0, [pc, #332]	@ (800089c <main+0x2dc>)
 8000750:	f005 fbbc 	bl	8005ecc <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1, "--------------------------\n\r", strlen("--------------------------\n\r") ,8);
 8000754:	2308      	movs	r3, #8
 8000756:	221c      	movs	r2, #28
 8000758:	494f      	ldr	r1, [pc, #316]	@ (8000898 <main+0x2d8>)
 800075a:	4850      	ldr	r0, [pc, #320]	@ (800089c <main+0x2dc>)
 800075c:	f005 fbb6 	bl	8005ecc <HAL_UART_Transmit>

				level = 2;
 8000760:	4b57      	ldr	r3, [pc, #348]	@ (80008c0 <main+0x300>)
 8000762:	2202      	movs	r2, #2
 8000764:	601a      	str	r2, [r3, #0]
				RxBuffer[0] = 0;
 8000766:	4b4b      	ldr	r3, [pc, #300]	@ (8000894 <main+0x2d4>)
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
 800076c:	e06b      	b.n	8000846 <main+0x286>

//				mode = 0;
		  }else if(answer[0] == 51){
 800076e:	4b4f      	ldr	r3, [pc, #316]	@ (80008ac <main+0x2ec>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b33      	cmp	r3, #51	@ 0x33
 8000774:	d121      	bne.n	80007ba <main+0x1fa>
			  	data[0] = 0xff;
 8000776:	4b4f      	ldr	r3, [pc, #316]	@ (80008b4 <main+0x2f4>)
 8000778:	22ff      	movs	r2, #255	@ 0xff
 800077a:	701a      	strb	r2, [r3, #0]
			  	data[1] = 0xff;
 800077c:	4b4d      	ldr	r3, [pc, #308]	@ (80008b4 <main+0x2f4>)
 800077e:	22ff      	movs	r2, #255	@ 0xff
 8000780:	705a      	strb	r2, [r3, #1]
			  	data[2] = 0xff;
 8000782:	4b4c      	ldr	r3, [pc, #304]	@ (80008b4 <main+0x2f4>)
 8000784:	22ff      	movs	r2, #255	@ 0xff
 8000786:	709a      	strb	r2, [r3, #2]
			  	data[3] = 0x00;
 8000788:	4b4a      	ldr	r3, [pc, #296]	@ (80008b4 <main+0x2f4>)
 800078a:	2200      	movs	r2, #0
 800078c:	70da      	strb	r2, [r3, #3]
			    eepromExampleWriteFlag = 1;
 800078e:	4b4a      	ldr	r3, [pc, #296]	@ (80008b8 <main+0x2f8>)
 8000790:	2201      	movs	r2, #1
 8000792:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&hlpuart1, "DIFFICULT\n\r", strlen("DIFFICULT\n\r") ,8);
 8000794:	2308      	movs	r3, #8
 8000796:	220b      	movs	r2, #11
 8000798:	494b      	ldr	r1, [pc, #300]	@ (80008c8 <main+0x308>)
 800079a:	4840      	ldr	r0, [pc, #256]	@ (800089c <main+0x2dc>)
 800079c:	f005 fb96 	bl	8005ecc <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1, "--------------------------\n\r", strlen("--------------------------\n\r") ,8);
 80007a0:	2308      	movs	r3, #8
 80007a2:	221c      	movs	r2, #28
 80007a4:	493c      	ldr	r1, [pc, #240]	@ (8000898 <main+0x2d8>)
 80007a6:	483d      	ldr	r0, [pc, #244]	@ (800089c <main+0x2dc>)
 80007a8:	f005 fb90 	bl	8005ecc <HAL_UART_Transmit>

				level = 3;
 80007ac:	4b44      	ldr	r3, [pc, #272]	@ (80008c0 <main+0x300>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	601a      	str	r2, [r3, #0]
				RxBuffer[0] = 0;
 80007b2:	4b38      	ldr	r3, [pc, #224]	@ (8000894 <main+0x2d4>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	701a      	strb	r2, [r3, #0]
 80007b8:	e045      	b.n	8000846 <main+0x286>

//				mode = 0;
		  }else if(answer[0] == 52){
 80007ba:	4b3c      	ldr	r3, [pc, #240]	@ (80008ac <main+0x2ec>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b34      	cmp	r3, #52	@ 0x34
 80007c0:	d121      	bne.n	8000806 <main+0x246>
			  	data[0] = 0xff;
 80007c2:	4b3c      	ldr	r3, [pc, #240]	@ (80008b4 <main+0x2f4>)
 80007c4:	22ff      	movs	r2, #255	@ 0xff
 80007c6:	701a      	strb	r2, [r3, #0]
			  	data[1] = 0xff;
 80007c8:	4b3a      	ldr	r3, [pc, #232]	@ (80008b4 <main+0x2f4>)
 80007ca:	22ff      	movs	r2, #255	@ 0xff
 80007cc:	705a      	strb	r2, [r3, #1]
			  	data[2] = 0xff;
 80007ce:	4b39      	ldr	r3, [pc, #228]	@ (80008b4 <main+0x2f4>)
 80007d0:	22ff      	movs	r2, #255	@ 0xff
 80007d2:	709a      	strb	r2, [r3, #2]
			  	data[3] = 0x00;
 80007d4:	4b37      	ldr	r3, [pc, #220]	@ (80008b4 <main+0x2f4>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	70da      	strb	r2, [r3, #3]
			    eepromExampleWriteFlag = 1;
 80007da:	4b37      	ldr	r3, [pc, #220]	@ (80008b8 <main+0x2f8>)
 80007dc:	2201      	movs	r2, #1
 80007de:	701a      	strb	r2, [r3, #0]

				HAL_UART_Transmit(&hlpuart1, "HARDCORE\n\r", strlen("HARDCORE\n\r") ,2);
 80007e0:	2302      	movs	r3, #2
 80007e2:	220a      	movs	r2, #10
 80007e4:	4939      	ldr	r1, [pc, #228]	@ (80008cc <main+0x30c>)
 80007e6:	482d      	ldr	r0, [pc, #180]	@ (800089c <main+0x2dc>)
 80007e8:	f005 fb70 	bl	8005ecc <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1, "--------------------------\n\r", strlen("--------------------------\n\r") ,8);
 80007ec:	2308      	movs	r3, #8
 80007ee:	221c      	movs	r2, #28
 80007f0:	4929      	ldr	r1, [pc, #164]	@ (8000898 <main+0x2d8>)
 80007f2:	482a      	ldr	r0, [pc, #168]	@ (800089c <main+0x2dc>)
 80007f4:	f005 fb6a 	bl	8005ecc <HAL_UART_Transmit>

				level = 4;
 80007f8:	4b31      	ldr	r3, [pc, #196]	@ (80008c0 <main+0x300>)
 80007fa:	2204      	movs	r2, #4
 80007fc:	601a      	str	r2, [r3, #0]
				RxBuffer[0] = 0;
 80007fe:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <main+0x2d4>)
 8000800:	2200      	movs	r2, #0
 8000802:	701a      	strb	r2, [r3, #0]
 8000804:	e01f      	b.n	8000846 <main+0x286>

//				mode = 0;
		  }else if(answer[0] == 53){
 8000806:	4b29      	ldr	r3, [pc, #164]	@ (80008ac <main+0x2ec>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b35      	cmp	r3, #53	@ 0x35
 800080c:	d109      	bne.n	8000822 <main+0x262>
			  eepromExampleReadFlag = 1;
 800080e:	4b26      	ldr	r3, [pc, #152]	@ (80008a8 <main+0x2e8>)
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
			  answer[0] = 0;
 8000814:	4b25      	ldr	r3, [pc, #148]	@ (80008ac <main+0x2ec>)
 8000816:	2200      	movs	r2, #0
 8000818:	701a      	strb	r2, [r3, #0]
			  mode = 0;
 800081a:	4b1d      	ldr	r3, [pc, #116]	@ (8000890 <main+0x2d0>)
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	e011      	b.n	8000846 <main+0x286>

		  }else{

				HAL_UART_Transmit(&hlpuart1, "NOT IN A CHOICE\n\r", strlen("NOT IN A CHOICE\n\r") ,2);
 8000822:	2302      	movs	r3, #2
 8000824:	2211      	movs	r2, #17
 8000826:	492a      	ldr	r1, [pc, #168]	@ (80008d0 <main+0x310>)
 8000828:	481c      	ldr	r0, [pc, #112]	@ (800089c <main+0x2dc>)
 800082a:	f005 fb4f 	bl	8005ecc <HAL_UART_Transmit>
				HAL_UART_Transmit(&hlpuart1, "--------------------------\n\r", strlen("--------------------------\n\r") ,8);
 800082e:	2308      	movs	r3, #8
 8000830:	221c      	movs	r2, #28
 8000832:	4919      	ldr	r1, [pc, #100]	@ (8000898 <main+0x2d8>)
 8000834:	4819      	ldr	r0, [pc, #100]	@ (800089c <main+0x2dc>)
 8000836:	f005 fb49 	bl	8005ecc <HAL_UART_Transmit>

//				HAL_UART_Transmit(&hlpuart1, system("cls"), 4 ,2);

				level = 5;
 800083a:	4b21      	ldr	r3, [pc, #132]	@ (80008c0 <main+0x300>)
 800083c:	2205      	movs	r2, #5
 800083e:	601a      	str	r2, [r3, #0]
				RxBuffer[0] = 0;
 8000840:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <main+0x2d4>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]

//				mode = 0;
		  }
	  }
	  if(level == 1){
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <main+0x300>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d146      	bne.n	80008dc <main+0x31c>
		    eepromExampleWriteFlag = 0;
 800084e:	4b1a      	ldr	r3, [pc, #104]	@ (80008b8 <main+0x2f8>)
 8000850:	2200      	movs	r2, #0
 8000852:	701a      	strb	r2, [r3, #0]

		  random_NUM = rand()%10;
 8000854:	f006 fc3a 	bl	80070cc <rand>
 8000858:	4601      	mov	r1, r0
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <main+0x314>)
 800085c:	fb83 2301 	smull	r2, r3, r3, r1
 8000860:	109a      	asrs	r2, r3, #2
 8000862:	17cb      	asrs	r3, r1, #31
 8000864:	1ad2      	subs	r2, r2, r3
 8000866:	4613      	mov	r3, r2
 8000868:	009b      	lsls	r3, r3, #2
 800086a:	4413      	add	r3, r2
 800086c:	005b      	lsls	r3, r3, #1
 800086e:	1aca      	subs	r2, r1, r3
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <main+0x318>)
 8000872:	601a      	str	r2, [r3, #0]
		  mode = 6;
 8000874:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <main+0x2d0>)
 8000876:	2206      	movs	r2, #6
 8000878:	601a      	str	r2, [r3, #0]
		  level = 5;
 800087a:	4b11      	ldr	r3, [pc, #68]	@ (80008c0 <main+0x300>)
 800087c:	2205      	movs	r2, #5
 800087e:	601a      	str	r2, [r3, #0]
		  RxBuffer[0] = 0;
 8000880:	4b04      	ldr	r3, [pc, #16]	@ (8000894 <main+0x2d4>)
 8000882:	2200      	movs	r2, #0
 8000884:	701a      	strb	r2, [r3, #0]
 8000886:	e093      	b.n	80009b0 <main+0x3f0>
 8000888:	20000478 	.word	0x20000478
 800088c:	200004d0 	.word	0x200004d0
 8000890:	200004d4 	.word	0x200004d4
 8000894:	200004ec 	.word	0x200004ec
 8000898:	08008130 	.word	0x08008130
 800089c:	200001d0 	.word	0x200001d0
 80008a0:	2000002c 	.word	0x2000002c
 80008a4:	08008150 	.word	0x08008150
 80008a8:	200004cd 	.word	0x200004cd
 80008ac:	200004d8 	.word	0x200004d8
 80008b0:	20000030 	.word	0x20000030
 80008b4:	200004c4 	.word	0x200004c4
 80008b8:	200004cc 	.word	0x200004cc
 80008bc:	08008168 	.word	0x08008168
 80008c0:	200004e8 	.word	0x200004e8
 80008c4:	08008170 	.word	0x08008170
 80008c8:	0800817c 	.word	0x0800817c
 80008cc:	08008188 	.word	0x08008188
 80008d0:	08008194 	.word	0x08008194
 80008d4:	66666667 	.word	0x66666667
 80008d8:	200004c8 	.word	0x200004c8

	  }else if(level == 2){
 80008dc:	4b9c      	ldr	r3, [pc, #624]	@ (8000b50 <main+0x590>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d11c      	bne.n	800091e <main+0x35e>
		    eepromExampleWriteFlag = 0;
 80008e4:	4b9b      	ldr	r3, [pc, #620]	@ (8000b54 <main+0x594>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]

		  random_NUM = rand()%10;
 80008ea:	f006 fbef 	bl	80070cc <rand>
 80008ee:	4601      	mov	r1, r0
 80008f0:	4b99      	ldr	r3, [pc, #612]	@ (8000b58 <main+0x598>)
 80008f2:	fb83 2301 	smull	r2, r3, r3, r1
 80008f6:	109a      	asrs	r2, r3, #2
 80008f8:	17cb      	asrs	r3, r1, #31
 80008fa:	1ad2      	subs	r2, r2, r3
 80008fc:	4613      	mov	r3, r2
 80008fe:	009b      	lsls	r3, r3, #2
 8000900:	4413      	add	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	1aca      	subs	r2, r1, r3
 8000906:	4b95      	ldr	r3, [pc, #596]	@ (8000b5c <main+0x59c>)
 8000908:	601a      	str	r2, [r3, #0]
		  mode = 6;
 800090a:	4b95      	ldr	r3, [pc, #596]	@ (8000b60 <main+0x5a0>)
 800090c:	2206      	movs	r2, #6
 800090e:	601a      	str	r2, [r3, #0]
		  level = 5;
 8000910:	4b8f      	ldr	r3, [pc, #572]	@ (8000b50 <main+0x590>)
 8000912:	2205      	movs	r2, #5
 8000914:	601a      	str	r2, [r3, #0]
		  RxBuffer[0] = 0;
 8000916:	4b93      	ldr	r3, [pc, #588]	@ (8000b64 <main+0x5a4>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
 800091c:	e048      	b.n	80009b0 <main+0x3f0>


	  }else if(level == 3){
 800091e:	4b8c      	ldr	r3, [pc, #560]	@ (8000b50 <main+0x590>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d11c      	bne.n	8000960 <main+0x3a0>
		    eepromExampleWriteFlag = 0;
 8000926:	4b8b      	ldr	r3, [pc, #556]	@ (8000b54 <main+0x594>)
 8000928:	2200      	movs	r2, #0
 800092a:	701a      	strb	r2, [r3, #0]

		  random_NUM = rand()%10;
 800092c:	f006 fbce 	bl	80070cc <rand>
 8000930:	4601      	mov	r1, r0
 8000932:	4b89      	ldr	r3, [pc, #548]	@ (8000b58 <main+0x598>)
 8000934:	fb83 2301 	smull	r2, r3, r3, r1
 8000938:	109a      	asrs	r2, r3, #2
 800093a:	17cb      	asrs	r3, r1, #31
 800093c:	1ad2      	subs	r2, r2, r3
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	1aca      	subs	r2, r1, r3
 8000948:	4b84      	ldr	r3, [pc, #528]	@ (8000b5c <main+0x59c>)
 800094a:	601a      	str	r2, [r3, #0]
		  mode = 6;
 800094c:	4b84      	ldr	r3, [pc, #528]	@ (8000b60 <main+0x5a0>)
 800094e:	2206      	movs	r2, #6
 8000950:	601a      	str	r2, [r3, #0]
		  level = 5;
 8000952:	4b7f      	ldr	r3, [pc, #508]	@ (8000b50 <main+0x590>)
 8000954:	2205      	movs	r2, #5
 8000956:	601a      	str	r2, [r3, #0]
		  RxBuffer[0] = 0;
 8000958:	4b82      	ldr	r3, [pc, #520]	@ (8000b64 <main+0x5a4>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
 800095e:	e027      	b.n	80009b0 <main+0x3f0>


	  }else if(level == 4){
 8000960:	4b7b      	ldr	r3, [pc, #492]	@ (8000b50 <main+0x590>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d11c      	bne.n	80009a2 <main+0x3e2>
		    eepromExampleWriteFlag = 0;
 8000968:	4b7a      	ldr	r3, [pc, #488]	@ (8000b54 <main+0x594>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]

		  random_NUM = rand()%10;
 800096e:	f006 fbad 	bl	80070cc <rand>
 8000972:	4601      	mov	r1, r0
 8000974:	4b78      	ldr	r3, [pc, #480]	@ (8000b58 <main+0x598>)
 8000976:	fb83 2301 	smull	r2, r3, r3, r1
 800097a:	109a      	asrs	r2, r3, #2
 800097c:	17cb      	asrs	r3, r1, #31
 800097e:	1ad2      	subs	r2, r2, r3
 8000980:	4613      	mov	r3, r2
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	4413      	add	r3, r2
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	1aca      	subs	r2, r1, r3
 800098a:	4b74      	ldr	r3, [pc, #464]	@ (8000b5c <main+0x59c>)
 800098c:	601a      	str	r2, [r3, #0]
		  mode = 6;
 800098e:	4b74      	ldr	r3, [pc, #464]	@ (8000b60 <main+0x5a0>)
 8000990:	2206      	movs	r2, #6
 8000992:	601a      	str	r2, [r3, #0]
		  level = 5;
 8000994:	4b6e      	ldr	r3, [pc, #440]	@ (8000b50 <main+0x590>)
 8000996:	2205      	movs	r2, #5
 8000998:	601a      	str	r2, [r3, #0]
		  RxBuffer[0] = 0;
 800099a:	4b72      	ldr	r3, [pc, #456]	@ (8000b64 <main+0x5a4>)
 800099c:	2200      	movs	r2, #0
 800099e:	701a      	strb	r2, [r3, #0]
 80009a0:	e006      	b.n	80009b0 <main+0x3f0>

	  }else if(level == 5){
 80009a2:	4b6b      	ldr	r3, [pc, #428]	@ (8000b50 <main+0x590>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	2b05      	cmp	r3, #5
 80009a8:	d102      	bne.n	80009b0 <main+0x3f0>

		  mode = 6;
 80009aa:	4b6d      	ldr	r3, [pc, #436]	@ (8000b60 <main+0x5a0>)
 80009ac:	2206      	movs	r2, #6
 80009ae:	601a      	str	r2, [r3, #0]
//		  level = 0;
	  }
	  randomBox = box[random_NUM];
 80009b0:	4b6a      	ldr	r3, [pc, #424]	@ (8000b5c <main+0x59c>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a6c      	ldr	r2, [pc, #432]	@ (8000b68 <main+0x5a8>)
 80009b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ba:	4a6c      	ldr	r2, [pc, #432]	@ (8000b6c <main+0x5ac>)
 80009bc:	6013      	str	r3, [r2, #0]
	  if(randomBox == 1){dangerBullet = 49;}
 80009be:	4b6b      	ldr	r3, [pc, #428]	@ (8000b6c <main+0x5ac>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d103      	bne.n	80009ce <main+0x40e>
 80009c6:	4b6a      	ldr	r3, [pc, #424]	@ (8000b70 <main+0x5b0>)
 80009c8:	2231      	movs	r2, #49	@ 0x31
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	e046      	b.n	8000a5c <main+0x49c>
	  else if(randomBox == 2){dangerBullet = 50;}
 80009ce:	4b67      	ldr	r3, [pc, #412]	@ (8000b6c <main+0x5ac>)
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d103      	bne.n	80009de <main+0x41e>
 80009d6:	4b66      	ldr	r3, [pc, #408]	@ (8000b70 <main+0x5b0>)
 80009d8:	2232      	movs	r2, #50	@ 0x32
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	e03e      	b.n	8000a5c <main+0x49c>
	  else if(randomBox == 3){dangerBullet = 51;}
 80009de:	4b63      	ldr	r3, [pc, #396]	@ (8000b6c <main+0x5ac>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2b03      	cmp	r3, #3
 80009e4:	d103      	bne.n	80009ee <main+0x42e>
 80009e6:	4b62      	ldr	r3, [pc, #392]	@ (8000b70 <main+0x5b0>)
 80009e8:	2233      	movs	r2, #51	@ 0x33
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	e036      	b.n	8000a5c <main+0x49c>
	  else if(randomBox == 4){dangerBullet = 52;}
 80009ee:	4b5f      	ldr	r3, [pc, #380]	@ (8000b6c <main+0x5ac>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	2b04      	cmp	r3, #4
 80009f4:	d103      	bne.n	80009fe <main+0x43e>
 80009f6:	4b5e      	ldr	r3, [pc, #376]	@ (8000b70 <main+0x5b0>)
 80009f8:	2234      	movs	r2, #52	@ 0x34
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	e02e      	b.n	8000a5c <main+0x49c>
	  else if(randomBox == 5){dangerBullet = 53;}
 80009fe:	4b5b      	ldr	r3, [pc, #364]	@ (8000b6c <main+0x5ac>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	2b05      	cmp	r3, #5
 8000a04:	d103      	bne.n	8000a0e <main+0x44e>
 8000a06:	4b5a      	ldr	r3, [pc, #360]	@ (8000b70 <main+0x5b0>)
 8000a08:	2235      	movs	r2, #53	@ 0x35
 8000a0a:	601a      	str	r2, [r3, #0]
 8000a0c:	e026      	b.n	8000a5c <main+0x49c>
	  else if(randomBox == 6){dangerBullet = 54;}
 8000a0e:	4b57      	ldr	r3, [pc, #348]	@ (8000b6c <main+0x5ac>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	2b06      	cmp	r3, #6
 8000a14:	d103      	bne.n	8000a1e <main+0x45e>
 8000a16:	4b56      	ldr	r3, [pc, #344]	@ (8000b70 <main+0x5b0>)
 8000a18:	2236      	movs	r2, #54	@ 0x36
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	e01e      	b.n	8000a5c <main+0x49c>
	  else if(randomBox == 7){dangerBullet = 55;}
 8000a1e:	4b53      	ldr	r3, [pc, #332]	@ (8000b6c <main+0x5ac>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	2b07      	cmp	r3, #7
 8000a24:	d103      	bne.n	8000a2e <main+0x46e>
 8000a26:	4b52      	ldr	r3, [pc, #328]	@ (8000b70 <main+0x5b0>)
 8000a28:	2237      	movs	r2, #55	@ 0x37
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	e016      	b.n	8000a5c <main+0x49c>
	  else if(randomBox == 8){dangerBullet = 56;}
 8000a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8000b6c <main+0x5ac>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	2b08      	cmp	r3, #8
 8000a34:	d103      	bne.n	8000a3e <main+0x47e>
 8000a36:	4b4e      	ldr	r3, [pc, #312]	@ (8000b70 <main+0x5b0>)
 8000a38:	2238      	movs	r2, #56	@ 0x38
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	e00e      	b.n	8000a5c <main+0x49c>
	  else if(randomBox == 9){dangerBullet = 57;}
 8000a3e:	4b4b      	ldr	r3, [pc, #300]	@ (8000b6c <main+0x5ac>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	2b09      	cmp	r3, #9
 8000a44:	d103      	bne.n	8000a4e <main+0x48e>
 8000a46:	4b4a      	ldr	r3, [pc, #296]	@ (8000b70 <main+0x5b0>)
 8000a48:	2239      	movs	r2, #57	@ 0x39
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	e006      	b.n	8000a5c <main+0x49c>
	  else if(randomBox == 0){dangerBullet = 48;}
 8000a4e:	4b47      	ldr	r3, [pc, #284]	@ (8000b6c <main+0x5ac>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d102      	bne.n	8000a5c <main+0x49c>
 8000a56:	4b46      	ldr	r3, [pc, #280]	@ (8000b70 <main+0x5b0>)
 8000a58:	2230      	movs	r2, #48	@ 0x30
 8000a5a:	601a      	str	r2, [r3, #0]



	  if(mode == 6){
 8000a5c:	4b40      	ldr	r3, [pc, #256]	@ (8000b60 <main+0x5a0>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b06      	cmp	r3, #6
 8000a62:	f47f adc8 	bne.w	80005f6 <main+0x36>
		if(RxBuffer[0] != 0 && RxBuffer[0] != '\r'){
 8000a66:	4b3f      	ldr	r3, [pc, #252]	@ (8000b64 <main+0x5a4>)
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d00a      	beq.n	8000a84 <main+0x4c4>
 8000a6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <main+0x5a4>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b0d      	cmp	r3, #13
 8000a74:	d006      	beq.n	8000a84 <main+0x4c4>
			strcpy(bullet, RxBuffer);
 8000a76:	493b      	ldr	r1, [pc, #236]	@ (8000b64 <main+0x5a4>)
 8000a78:	483e      	ldr	r0, [pc, #248]	@ (8000b74 <main+0x5b4>)
 8000a7a:	f006 fce6 	bl	800744a <strcpy>
			RxBuffer[0] = 0;
 8000a7e:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <main+0x5a4>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	701a      	strb	r2, [r3, #0]
		}

		if(RxBuffer[0] == '\r'){
 8000a84:	4b37      	ldr	r3, [pc, #220]	@ (8000b64 <main+0x5a4>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	2b0d      	cmp	r3, #13
 8000a8a:	d108      	bne.n	8000a9e <main+0x4de>
			casee = 1;
 8000a8c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b78 <main+0x5b8>)
 8000a8e:	2201      	movs	r2, #1
 8000a90:	601a      	str	r2, [r3, #0]

			RxBuffer[0] = 0;
 8000a92:	4b34      	ldr	r3, [pc, #208]	@ (8000b64 <main+0x5a4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	701a      	strb	r2, [r3, #0]
			eepromExampleWriteFlag = 1;
 8000a98:	4b2e      	ldr	r3, [pc, #184]	@ (8000b54 <main+0x594>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
		}
		if(RxBuffer[0] == 0 && casee == 1){
 8000a9e:	4b31      	ldr	r3, [pc, #196]	@ (8000b64 <main+0x5a4>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d118      	bne.n	8000ad8 <main+0x518>
 8000aa6:	4b34      	ldr	r3, [pc, #208]	@ (8000b78 <main+0x5b8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d114      	bne.n	8000ad8 <main+0x518>
			HAL_UART_Transmit(&hlpuart1,"BULLET OF YOUR CHOICE :" , strlen("BULLET OF YOUR CHOICE :"),8);
 8000aae:	2308      	movs	r3, #8
 8000ab0:	2217      	movs	r2, #23
 8000ab2:	4932      	ldr	r1, [pc, #200]	@ (8000b7c <main+0x5bc>)
 8000ab4:	4832      	ldr	r0, [pc, #200]	@ (8000b80 <main+0x5c0>)
 8000ab6:	f005 fa09 	bl	8005ecc <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, bullet, 1,1);
 8000aba:	2301      	movs	r3, #1
 8000abc:	2201      	movs	r2, #1
 8000abe:	492d      	ldr	r1, [pc, #180]	@ (8000b74 <main+0x5b4>)
 8000ac0:	482f      	ldr	r0, [pc, #188]	@ (8000b80 <main+0x5c0>)
 8000ac2:	f005 fa03 	bl	8005ecc <HAL_UART_Transmit>
			HAL_UART_Transmit(&hlpuart1, "\n\r", 4,1);
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	2204      	movs	r2, #4
 8000aca:	492e      	ldr	r1, [pc, #184]	@ (8000b84 <main+0x5c4>)
 8000acc:	482c      	ldr	r0, [pc, #176]	@ (8000b80 <main+0x5c0>)
 8000ace:	f005 f9fd 	bl	8005ecc <HAL_UART_Transmit>
			casee = 2;
 8000ad2:	4b29      	ldr	r3, [pc, #164]	@ (8000b78 <main+0x5b8>)
 8000ad4:	2202      	movs	r2, #2
 8000ad6:	601a      	str	r2, [r3, #0]



		}
		if(casee == 2){
 8000ad8:	4b27      	ldr	r3, [pc, #156]	@ (8000b78 <main+0x5b8>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b02      	cmp	r3, #2
 8000ade:	f47f ad8a 	bne.w	80005f6 <main+0x36>
//			life = 3;
			if(bullet[0] == dangerBullet){
 8000ae2:	4b24      	ldr	r3, [pc, #144]	@ (8000b74 <main+0x5b4>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	4b22      	ldr	r3, [pc, #136]	@ (8000b70 <main+0x5b0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	429a      	cmp	r2, r3
 8000aec:	f040 80a9 	bne.w	8000c42 <main+0x682>


				if(data[3]==0 && life == 3){
 8000af0:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <main+0x5c8>)
 8000af2:	78db      	ldrb	r3, [r3, #3]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14d      	bne.n	8000b94 <main+0x5d4>
 8000af8:	4b24      	ldr	r3, [pc, #144]	@ (8000b8c <main+0x5cc>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d149      	bne.n	8000b94 <main+0x5d4>
					HAL_UART_Transmit(&hlpuart1, "YOUR LIFE HAVE BEEN LEFT JUST 2 !!\n\r", strlen("YOUR LIFE HAVE BEEN LEFT JUST 2 !!\n\r") ,8);
 8000b00:	2308      	movs	r3, #8
 8000b02:	2224      	movs	r2, #36	@ 0x24
 8000b04:	4922      	ldr	r1, [pc, #136]	@ (8000b90 <main+0x5d0>)
 8000b06:	481e      	ldr	r0, [pc, #120]	@ (8000b80 <main+0x5c0>)
 8000b08:	f005 f9e0 	bl	8005ecc <HAL_UART_Transmit>
					life--;
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <main+0x5cc>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	4a1e      	ldr	r2, [pc, #120]	@ (8000b8c <main+0x5cc>)
 8000b14:	6013      	str	r3, [r2, #0]
					bullet[0] = 0;
 8000b16:	4b17      	ldr	r3, [pc, #92]	@ (8000b74 <main+0x5b4>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
					data[life] = 0x00;
 8000b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8000b8c <main+0x5cc>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a19      	ldr	r2, [pc, #100]	@ (8000b88 <main+0x5c8>)
 8000b22:	2100      	movs	r1, #0
 8000b24:	54d1      	strb	r1, [r2, r3]
					random_NUM = rand()%10;
 8000b26:	f006 fad1 	bl	80070cc <rand>
 8000b2a:	4601      	mov	r1, r0
 8000b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b58 <main+0x598>)
 8000b2e:	fb83 2301 	smull	r2, r3, r3, r1
 8000b32:	109a      	asrs	r2, r3, #2
 8000b34:	17cb      	asrs	r3, r1, #31
 8000b36:	1ad2      	subs	r2, r2, r3
 8000b38:	4613      	mov	r3, r2
 8000b3a:	009b      	lsls	r3, r3, #2
 8000b3c:	4413      	add	r3, r2
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	1aca      	subs	r2, r1, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <main+0x59c>)
 8000b44:	601a      	str	r2, [r3, #0]
					eepromExampleWriteFlag = 1;
 8000b46:	4b03      	ldr	r3, [pc, #12]	@ (8000b54 <main+0x594>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	701a      	strb	r2, [r3, #0]
				if(data[3]==0 && life == 3){
 8000b4c:	e079      	b.n	8000c42 <main+0x682>
 8000b4e:	bf00      	nop
 8000b50:	200004e8 	.word	0x200004e8
 8000b54:	200004cc 	.word	0x200004cc
 8000b58:	66666667 	.word	0x66666667
 8000b5c:	200004c8 	.word	0x200004c8
 8000b60:	200004d4 	.word	0x200004d4
 8000b64:	200004ec 	.word	0x200004ec
 8000b68:	20000004 	.word	0x20000004
 8000b6c:	200004e0 	.word	0x200004e0
 8000b70:	200004e4 	.word	0x200004e4
 8000b74:	200004dc 	.word	0x200004dc
 8000b78:	20000034 	.word	0x20000034
 8000b7c:	080081a8 	.word	0x080081a8
 8000b80:	200001d0 	.word	0x200001d0
 8000b84:	080081c0 	.word	0x080081c0
 8000b88:	200004c4 	.word	0x200004c4
 8000b8c:	20000000 	.word	0x20000000
 8000b90:	080081c4 	.word	0x080081c4

				}else if(data[2]==0 && life == 2){
 8000b94:	4b3c      	ldr	r3, [pc, #240]	@ (8000c88 <main+0x6c8>)
 8000b96:	789b      	ldrb	r3, [r3, #2]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d12a      	bne.n	8000bf2 <main+0x632>
 8000b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8000c8c <main+0x6cc>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	2b02      	cmp	r3, #2
 8000ba2:	d126      	bne.n	8000bf2 <main+0x632>
					HAL_UART_Transmit(&hlpuart1, "YOUR LIFE LEFT JUST 1 !!\n\r", strlen("YOUR LIFE HAVE BEEN LEFT JUST 1 !!\n\r") ,8);
 8000ba4:	2308      	movs	r3, #8
 8000ba6:	2224      	movs	r2, #36	@ 0x24
 8000ba8:	4939      	ldr	r1, [pc, #228]	@ (8000c90 <main+0x6d0>)
 8000baa:	483a      	ldr	r0, [pc, #232]	@ (8000c94 <main+0x6d4>)
 8000bac:	f005 f98e 	bl	8005ecc <HAL_UART_Transmit>

					life--;
 8000bb0:	4b36      	ldr	r3, [pc, #216]	@ (8000c8c <main+0x6cc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	3b01      	subs	r3, #1
 8000bb6:	4a35      	ldr	r2, [pc, #212]	@ (8000c8c <main+0x6cc>)
 8000bb8:	6013      	str	r3, [r2, #0]
					bullet[0] = 0;
 8000bba:	4b37      	ldr	r3, [pc, #220]	@ (8000c98 <main+0x6d8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
					data[life] = 0x00;
 8000bc0:	4b32      	ldr	r3, [pc, #200]	@ (8000c8c <main+0x6cc>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a30      	ldr	r2, [pc, #192]	@ (8000c88 <main+0x6c8>)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	54d1      	strb	r1, [r2, r3]
					random_NUM = rand()%10;
 8000bca:	f006 fa7f 	bl	80070cc <rand>
 8000bce:	4601      	mov	r1, r0
 8000bd0:	4b32      	ldr	r3, [pc, #200]	@ (8000c9c <main+0x6dc>)
 8000bd2:	fb83 2301 	smull	r2, r3, r3, r1
 8000bd6:	109a      	asrs	r2, r3, #2
 8000bd8:	17cb      	asrs	r3, r1, #31
 8000bda:	1ad2      	subs	r2, r2, r3
 8000bdc:	4613      	mov	r3, r2
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	4413      	add	r3, r2
 8000be2:	005b      	lsls	r3, r3, #1
 8000be4:	1aca      	subs	r2, r1, r3
 8000be6:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca0 <main+0x6e0>)
 8000be8:	601a      	str	r2, [r3, #0]
					eepromExampleWriteFlag = 1;
 8000bea:	4b2e      	ldr	r3, [pc, #184]	@ (8000ca4 <main+0x6e4>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	701a      	strb	r2, [r3, #0]
				}else if(data[2]==0 && life == 2){
 8000bf0:	e027      	b.n	8000c42 <main+0x682>

				}else if(data[1]==0 && life == 1){
 8000bf2:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <main+0x6c8>)
 8000bf4:	785b      	ldrb	r3, [r3, #1]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d123      	bne.n	8000c42 <main+0x682>
 8000bfa:	4b24      	ldr	r3, [pc, #144]	@ (8000c8c <main+0x6cc>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d11f      	bne.n	8000c42 <main+0x682>
					life--;
 8000c02:	4b22      	ldr	r3, [pc, #136]	@ (8000c8c <main+0x6cc>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	4a20      	ldr	r2, [pc, #128]	@ (8000c8c <main+0x6cc>)
 8000c0a:	6013      	str	r3, [r2, #0]
					bullet[0] = 0;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	@ (8000c98 <main+0x6d8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
					data[life] = 0x00;
 8000c12:	4b1e      	ldr	r3, [pc, #120]	@ (8000c8c <main+0x6cc>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a1c      	ldr	r2, [pc, #112]	@ (8000c88 <main+0x6c8>)
 8000c18:	2100      	movs	r1, #0
 8000c1a:	54d1      	strb	r1, [r2, r3]
					random_NUM = rand()%10;
 8000c1c:	f006 fa56 	bl	80070cc <rand>
 8000c20:	4601      	mov	r1, r0
 8000c22:	4b1e      	ldr	r3, [pc, #120]	@ (8000c9c <main+0x6dc>)
 8000c24:	fb83 2301 	smull	r2, r3, r3, r1
 8000c28:	109a      	asrs	r2, r3, #2
 8000c2a:	17cb      	asrs	r3, r1, #31
 8000c2c:	1ad2      	subs	r2, r2, r3
 8000c2e:	4613      	mov	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4413      	add	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	1aca      	subs	r2, r1, r3
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <main+0x6e0>)
 8000c3a:	601a      	str	r2, [r3, #0]
					eepromExampleWriteFlag = 1;
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <main+0x6e4>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]

				}


			}if(life == 0 && data[0,3] == 0){
 8000c42:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <main+0x6cc>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f47f acd5 	bne.w	80005f6 <main+0x36>
 8000c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <main+0x6c8>)
 8000c4e:	78db      	ldrb	r3, [r3, #3]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f47f acd0 	bne.w	80005f6 <main+0x36>
				HAL_UART_Transmit(&hlpuart1, "GAME OVERRRRRR\n\r", strlen("GAME OVERRRRRR\n\r") ,8);
 8000c56:	2308      	movs	r3, #8
 8000c58:	2210      	movs	r2, #16
 8000c5a:	4913      	ldr	r1, [pc, #76]	@ (8000ca8 <main+0x6e8>)
 8000c5c:	480d      	ldr	r0, [pc, #52]	@ (8000c94 <main+0x6d4>)
 8000c5e:	f005 f935 	bl	8005ecc <HAL_UART_Transmit>

				life = 3;
 8000c62:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <main+0x6cc>)
 8000c64:	2203      	movs	r2, #3
 8000c66:	601a      	str	r2, [r3, #0]
				mode = 0;
 8000c68:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <main+0x6ec>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	601a      	str	r2, [r3, #0]
				casee = 0;
 8000c6e:	4b10      	ldr	r3, [pc, #64]	@ (8000cb0 <main+0x6f0>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	601a      	str	r2, [r3, #0]
				RxBuffer[0] = 0;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <main+0x6f4>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]
				level = 0;
 8000c7a:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb8 <main+0x6f8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
				dangerBullet = 0;
 8000c80:	4b0e      	ldr	r3, [pc, #56]	@ (8000cbc <main+0x6fc>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
  {
 8000c86:	e4b6      	b.n	80005f6 <main+0x36>
 8000c88:	200004c4 	.word	0x200004c4
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	080081ec 	.word	0x080081ec
 8000c94:	200001d0 	.word	0x200001d0
 8000c98:	200004dc 	.word	0x200004dc
 8000c9c:	66666667 	.word	0x66666667
 8000ca0:	200004c8 	.word	0x200004c8
 8000ca4:	200004cc 	.word	0x200004cc
 8000ca8:	08008208 	.word	0x08008208
 8000cac:	200004d4 	.word	0x200004d4
 8000cb0:	20000034 	.word	0x20000034
 8000cb4:	200004ec 	.word	0x200004ec
 8000cb8:	200004e8 	.word	0x200004e8
 8000cbc:	200004e4 	.word	0x200004e4

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	@ 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 0318 	add.w	r3, r7, #24
 8000cca:	2238      	movs	r2, #56	@ 0x38
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f006 fb3f 	bl	8007352 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000ce2:	2000      	movs	r0, #0
 8000ce4:	f003 fade 	bl	80042a4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cf0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf2:	2340      	movs	r3, #64	@ 0x40
 8000cf4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cf6:	2302      	movs	r3, #2
 8000cf8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000d02:	2355      	movs	r3, #85	@ 0x55
 8000d04:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d06:	2302      	movs	r3, #2
 8000d08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d12:	f107 0318 	add.w	r3, r7, #24
 8000d16:	4618      	mov	r0, r3
 8000d18:	f003 fb78 	bl	800440c <HAL_RCC_OscConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000d22:	f000 fa4f 	bl	80011c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d26:	230f      	movs	r3, #15
 8000d28:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d2a:	2303      	movs	r3, #3
 8000d2c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2104      	movs	r1, #4
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f003 fe76 	bl	8004a30 <HAL_RCC_ClockConfig>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000d4a:	f000 fa3b 	bl	80011c4 <Error_Handler>
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3750      	adds	r7, #80	@ 0x50
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
	...

08000d58 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d5e:	4a1c      	ldr	r2, [pc, #112]	@ (8000dd0 <MX_I2C1_Init+0x78>)
 8000d60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d64:	4a1b      	ldr	r2, [pc, #108]	@ (8000dd4 <MX_I2C1_Init+0x7c>)
 8000d66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000d68:	4b18      	ldr	r3, [pc, #96]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d80:	4b12      	ldr	r3, [pc, #72]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d86:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d92:	480e      	ldr	r0, [pc, #56]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000d94:	f001 fc53 	bl	800263e <HAL_I2C_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000d9e:	f000 fa11 	bl	80011c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000da2:	2100      	movs	r1, #0
 8000da4:	4809      	ldr	r0, [pc, #36]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000da6:	f003 f9e5 	bl	8004174 <HAL_I2CEx_ConfigAnalogFilter>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000db0:	f000 fa08 	bl	80011c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000db4:	2100      	movs	r1, #0
 8000db6:	4805      	ldr	r0, [pc, #20]	@ (8000dcc <MX_I2C1_Init+0x74>)
 8000db8:	f003 fa27 	bl	800420a <HAL_I2CEx_ConfigDigitalFilter>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000dc2:	f000 f9ff 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200000bc 	.word	0x200000bc
 8000dd0:	40005400 	.word	0x40005400
 8000dd4:	30a0a7fb 	.word	0x30a0a7fb

08000dd8 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000ddc:	4b21      	ldr	r3, [pc, #132]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000dde:	4a22      	ldr	r2, [pc, #136]	@ (8000e68 <MX_LPUART1_UART_Init+0x90>)
 8000de0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000de2:	4b20      	ldr	r3, [pc, #128]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000de4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de8:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dea:	4b1e      	ldr	r3, [pc, #120]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000df0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000dfc:	4b19      	ldr	r3, [pc, #100]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000dfe:	220c      	movs	r2, #12
 8000e00:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e02:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e08:	4b16      	ldr	r3, [pc, #88]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e0e:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e1a:	4812      	ldr	r0, [pc, #72]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000e1c:	f005 f806 	bl	8005e2c <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e26:	f000 f9cd 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	480d      	ldr	r0, [pc, #52]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000e2e:	f006 f882 	bl	8006f36 <HAL_UARTEx_SetTxFifoThreshold>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e38:	f000 f9c4 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4809      	ldr	r0, [pc, #36]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000e40:	f006 f8b7 	bl	8006fb2 <HAL_UARTEx_SetRxFifoThreshold>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000e4a:	f000 f9bb 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_LPUART1_UART_Init+0x8c>)
 8000e50:	f006 f838 	bl	8006ec4 <HAL_UARTEx_DisableFifoMode>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000e5a:	f000 f9b3 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	200001d0 	.word	0x200001d0
 8000e68:	40008000 	.word	0x40008000

08000e6c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e70:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000e72:	4a24      	ldr	r2, [pc, #144]	@ (8000f04 <MX_USART1_UART_Init+0x98>)
 8000e74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e76:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000e78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7e:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8000e84:	4b1e      	ldr	r3, [pc, #120]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000e86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e8a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e92:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000e94:	220c      	movs	r2, #12
 8000e96:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e98:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea4:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb0:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000eb6:	4812      	ldr	r0, [pc, #72]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000eb8:	f004 ffb8 	bl	8005e2c <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000ec2:	f000 f97f 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000eca:	f006 f834 	bl	8006f36 <HAL_UARTEx_SetTxFifoThreshold>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d001      	beq.n	8000ed8 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000ed4:	f000 f976 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4809      	ldr	r0, [pc, #36]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000edc:	f006 f869 	bl	8006fb2 <HAL_UARTEx_SetRxFifoThreshold>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 8000ee6:	f000 f96d 	bl	80011c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000eea:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_USART1_UART_Init+0x94>)
 8000eec:	f005 ffea 	bl	8006ec4 <HAL_UARTEx_DisableFifoMode>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 8000ef6:	f000 f965 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000264 	.word	0x20000264
 8000f04:	40013800 	.word	0x40013800

08000f08 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f0e:	f107 0310 	add.w	r3, r7, #16
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
 8000f18:	609a      	str	r2, [r3, #8]
 8000f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f1c:	1d3b      	adds	r3, r7, #4
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f26:	4b1e      	ldr	r3, [pc, #120]	@ (8000fa0 <MX_TIM2_Init+0x98>)
 8000f28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fa0 <MX_TIM2_Init+0x98>)
 8000f30:	22a9      	movs	r2, #169	@ 0xa9
 8000f32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b1a      	ldr	r3, [pc, #104]	@ (8000fa0 <MX_TIM2_Init+0x98>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5479;
 8000f3a:	4b19      	ldr	r3, [pc, #100]	@ (8000fa0 <MX_TIM2_Init+0x98>)
 8000f3c:	f241 5267 	movw	r2, #5479	@ 0x1567
 8000f40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b17      	ldr	r3, [pc, #92]	@ (8000fa0 <MX_TIM2_Init+0x98>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f48:	4b15      	ldr	r3, [pc, #84]	@ (8000fa0 <MX_TIM2_Init+0x98>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f4e:	4814      	ldr	r0, [pc, #80]	@ (8000fa0 <MX_TIM2_Init+0x98>)
 8000f50:	f004 f9d8 	bl	8005304 <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000f5a:	f000 f933 	bl	80011c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480d      	ldr	r0, [pc, #52]	@ (8000fa0 <MX_TIM2_Init+0x98>)
 8000f6c:	f004 fbea 	bl	8005744 <HAL_TIM_ConfigClockSource>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d001      	beq.n	8000f7a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000f76:	f000 f925 	bl	80011c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f82:	1d3b      	adds	r3, r7, #4
 8000f84:	4619      	mov	r1, r3
 8000f86:	4806      	ldr	r0, [pc, #24]	@ (8000fa0 <MX_TIM2_Init+0x98>)
 8000f88:	f004 fe74 	bl	8005c74 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000f92:	f000 f917 	bl	80011c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	3720      	adds	r7, #32
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	20000478 	.word	0x20000478

08000fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000faa:	4b26      	ldr	r3, [pc, #152]	@ (8001044 <MX_DMA_Init+0xa0>)
 8000fac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fae:	4a25      	ldr	r2, [pc, #148]	@ (8001044 <MX_DMA_Init+0xa0>)
 8000fb0:	f043 0304 	orr.w	r3, r3, #4
 8000fb4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fb6:	4b23      	ldr	r3, [pc, #140]	@ (8001044 <MX_DMA_Init+0xa0>)
 8000fb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fba:	f003 0304 	and.w	r3, r3, #4
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <MX_DMA_Init+0xa0>)
 8000fc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fc6:	4a1f      	ldr	r2, [pc, #124]	@ (8001044 <MX_DMA_Init+0xa0>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <MX_DMA_Init+0xa0>)
 8000fd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	603b      	str	r3, [r7, #0]
 8000fd8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	200b      	movs	r0, #11
 8000fe0:	f000 fe53 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fe4:	200b      	movs	r0, #11
 8000fe6:	f000 fe6a 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	200c      	movs	r0, #12
 8000ff0:	f000 fe4b 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000ff4:	200c      	movs	r0, #12
 8000ff6:	f000 fe62 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	200d      	movs	r0, #13
 8001000:	f000 fe43 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001004:	200d      	movs	r0, #13
 8001006:	f000 fe5a 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	2100      	movs	r1, #0
 800100e:	200e      	movs	r0, #14
 8001010:	f000 fe3b 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001014:	200e      	movs	r0, #14
 8001016:	f000 fe52 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2100      	movs	r1, #0
 800101e:	200f      	movs	r0, #15
 8001020:	f000 fe33 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001024:	200f      	movs	r0, #15
 8001026:	f000 fe4a 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800102a:	2200      	movs	r2, #0
 800102c:	2100      	movs	r1, #0
 800102e:	2010      	movs	r0, #16
 8001030:	f000 fe2b 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8001034:	2010      	movs	r0, #16
 8001036:	f000 fe42 	bl	8001cbe <HAL_NVIC_EnableIRQ>

}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40021000 	.word	0x40021000

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104e:	f107 0314 	add.w	r3, r7, #20
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
 800105c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	4b2f      	ldr	r3, [pc, #188]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001062:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001064:	f043 0304 	orr.w	r3, r3, #4
 8001068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800106a:	4b2c      	ldr	r3, [pc, #176]	@ (800111c <MX_GPIO_Init+0xd4>)
 800106c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800106e:	f003 0304 	and.w	r3, r3, #4
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001076:	4b29      	ldr	r3, [pc, #164]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800107a:	4a28      	ldr	r2, [pc, #160]	@ (800111c <MX_GPIO_Init+0xd4>)
 800107c:	f043 0320 	orr.w	r3, r3, #32
 8001080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001082:	4b26      	ldr	r3, [pc, #152]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	f003 0320 	and.w	r3, r3, #32
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108e:	4b23      	ldr	r3, [pc, #140]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	4a22      	ldr	r2, [pc, #136]	@ (800111c <MX_GPIO_Init+0xd4>)
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800109a:	4b20      	ldr	r3, [pc, #128]	@ (800111c <MX_GPIO_Init+0xd4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	f003 0301 	and.w	r3, r3, #1
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a6:	4b1d      	ldr	r3, [pc, #116]	@ (800111c <MX_GPIO_Init+0xd4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	4a1c      	ldr	r2, [pc, #112]	@ (800111c <MX_GPIO_Init+0xd4>)
 80010ac:	f043 0302 	orr.w	r3, r3, #2
 80010b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010b2:	4b1a      	ldr	r3, [pc, #104]	@ (800111c <MX_GPIO_Init+0xd4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	f003 0302 	and.w	r3, r3, #2
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010be:	2200      	movs	r2, #0
 80010c0:	2120      	movs	r1, #32
 80010c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010c6:	f001 fa7f 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	4619      	mov	r1, r3
 80010e0:	480f      	ldr	r0, [pc, #60]	@ (8001120 <MX_GPIO_Init+0xd8>)
 80010e2:	f001 f8ef 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010e6:	2320      	movs	r3, #32
 80010e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ea:	2301      	movs	r3, #1
 80010ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f2:	2300      	movs	r3, #0
 80010f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010f6:	f107 0314 	add.w	r3, r7, #20
 80010fa:	4619      	mov	r1, r3
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001100:	f001 f8e0 	bl	80022c4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001104:	2200      	movs	r2, #0
 8001106:	2100      	movs	r1, #0
 8001108:	2028      	movs	r0, #40	@ 0x28
 800110a:	f000 fdbe 	bl	8001c8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800110e:	2028      	movs	r0, #40	@ 0x28
 8001110:	f000 fdd5 	bl	8001cbe <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001114:	bf00      	nop
 8001116:	3728      	adds	r7, #40	@ 0x28
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40021000 	.word	0x40021000
 8001120:	48000800 	.word	0x48000800

08001124 <UARTDMAconfig>:

/* USER CODE BEGIN 4 */
void UARTDMAconfig(){
 8001124:	b580      	push	{r7, lr}
 8001126:	af00      	add	r7, sp, #0
	HAL_UART_Receive_DMA(&hlpuart1, RxBuffer, 1);
 8001128:	2201      	movs	r2, #1
 800112a:	4903      	ldr	r1, [pc, #12]	@ (8001138 <UARTDMAconfig+0x14>)
 800112c:	4803      	ldr	r0, [pc, #12]	@ (800113c <UARTDMAconfig+0x18>)
 800112e:	f004 ff5b 	bl	8005fe8 <HAL_UART_Receive_DMA>
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200004ec 	.word	0x200004ec
 800113c:	200001d0 	.word	0x200001d0

08001140 <EEPROMWriteExample>:

void EEPROMWriteExample() {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af02      	add	r7, sp, #8
	if (eepromExampleWriteFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 8001146:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <EEPROMWriteExample+0x34>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d00f      	beq.n	800116e <EEPROMWriteExample+0x2e>
 800114e:	4b0a      	ldr	r3, [pc, #40]	@ (8001178 <EEPROMWriteExample+0x38>)
 8001150:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001154:	b2db      	uxtb	r3, r3
 8001156:	2b20      	cmp	r3, #32
 8001158:	d109      	bne.n	800116e <EEPROMWriteExample+0x2e>

		HAL_I2C_Mem_Write_IT(&hi2c1, EEPROM_ADDR, 0x2C, I2C_MEMADD_SIZE_16BIT,data, 4);
 800115a:	2304      	movs	r3, #4
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	4b07      	ldr	r3, [pc, #28]	@ (800117c <EEPROMWriteExample+0x3c>)
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2302      	movs	r3, #2
 8001164:	222c      	movs	r2, #44	@ 0x2c
 8001166:	21a0      	movs	r1, #160	@ 0xa0
 8001168:	4803      	ldr	r0, [pc, #12]	@ (8001178 <EEPROMWriteExample+0x38>)
 800116a:	f001 fb03 	bl	8002774 <HAL_I2C_Mem_Write_IT>

//		eepromExampleWriteFlag = 0;
	}
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	200004cc 	.word	0x200004cc
 8001178:	200000bc 	.word	0x200000bc
 800117c:	200004c4 	.word	0x200004c4

08001180 <EEPROMReadExample>:

void EEPROMReadExample(uint8_t *Rdata, uint16_t len) {
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af02      	add	r7, sp, #8
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]
	if (eepromExampleReadFlag && hi2c1.State == HAL_I2C_STATE_READY) {
 800118c:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <EEPROMReadExample+0x3c>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d00f      	beq.n	80011b4 <EEPROMReadExample+0x34>
 8001194:	4b0a      	ldr	r3, [pc, #40]	@ (80011c0 <EEPROMReadExample+0x40>)
 8001196:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800119a:	b2db      	uxtb	r3, r3
 800119c:	2b20      	cmp	r3, #32
 800119e:	d109      	bne.n	80011b4 <EEPROMReadExample+0x34>
		HAL_I2C_Mem_Read_IT(&hi2c1, EEPROM_ADDR, 0x2c, I2C_MEMADD_SIZE_16BIT, Rdata, len);
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2302      	movs	r3, #2
 80011aa:	222c      	movs	r2, #44	@ 0x2c
 80011ac:	21a0      	movs	r1, #160	@ 0xa0
 80011ae:	4804      	ldr	r0, [pc, #16]	@ (80011c0 <EEPROMReadExample+0x40>)
 80011b0:	f001 fb6a 	bl	8002888 <HAL_I2C_Mem_Read_IT>
//		eepromExampleReadFlag = 0;
	}
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200004cd 	.word	0x200004cd
 80011c0:	200000bc 	.word	0x200000bc

080011c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c8:	b672      	cpsid	i
}
 80011ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <Error_Handler+0x8>

080011d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_MspInit+0x44>)
 80011d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011da:	4a0e      	ldr	r2, [pc, #56]	@ (8001214 <HAL_MspInit+0x44>)
 80011dc:	f043 0301 	orr.w	r3, r3, #1
 80011e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80011e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <HAL_MspInit+0x44>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	607b      	str	r3, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011ee:	4b09      	ldr	r3, [pc, #36]	@ (8001214 <HAL_MspInit+0x44>)
 80011f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011f2:	4a08      	ldr	r2, [pc, #32]	@ (8001214 <HAL_MspInit+0x44>)
 80011f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80011fa:	4b06      	ldr	r3, [pc, #24]	@ (8001214 <HAL_MspInit+0x44>)
 80011fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80011fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001206:	f003 f8f1 	bl	80043ec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40021000 	.word	0x40021000

08001218 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b09e      	sub	sp, #120	@ 0x78
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	2254      	movs	r2, #84	@ 0x54
 8001236:	2100      	movs	r1, #0
 8001238:	4618      	mov	r0, r3
 800123a:	f006 f88a 	bl	8007352 <memset>
  if(hi2c->Instance==I2C1)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	4a50      	ldr	r2, [pc, #320]	@ (8001384 <HAL_I2C_MspInit+0x16c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	f040 8099 	bne.w	800137c <HAL_I2C_MspInit+0x164>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800124a:	2340      	movs	r3, #64	@ 0x40
 800124c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001252:	f107 0310 	add.w	r3, r7, #16
 8001256:	4618      	mov	r0, r3
 8001258:	f003 fe06 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001262:	f7ff ffaf 	bl	80011c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001266:	4b48      	ldr	r3, [pc, #288]	@ (8001388 <HAL_I2C_MspInit+0x170>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	4a47      	ldr	r2, [pc, #284]	@ (8001388 <HAL_I2C_MspInit+0x170>)
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001272:	4b45      	ldr	r3, [pc, #276]	@ (8001388 <HAL_I2C_MspInit+0x170>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800127e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001282:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001284:	2312      	movs	r3, #18
 8001286:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001288:	2300      	movs	r3, #0
 800128a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128c:	2300      	movs	r3, #0
 800128e:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001290:	2304      	movs	r3, #4
 8001292:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001294:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001298:	4619      	mov	r1, r3
 800129a:	483c      	ldr	r0, [pc, #240]	@ (800138c <HAL_I2C_MspInit+0x174>)
 800129c:	f001 f812 	bl	80022c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012a0:	4b39      	ldr	r3, [pc, #228]	@ (8001388 <HAL_I2C_MspInit+0x170>)
 80012a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a4:	4a38      	ldr	r2, [pc, #224]	@ (8001388 <HAL_I2C_MspInit+0x170>)
 80012a6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80012ac:	4b36      	ldr	r3, [pc, #216]	@ (8001388 <HAL_I2C_MspInit+0x170>)
 80012ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel5;
 80012b8:	4b35      	ldr	r3, [pc, #212]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012ba:	4a36      	ldr	r2, [pc, #216]	@ (8001394 <HAL_I2C_MspInit+0x17c>)
 80012bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 80012be:	4b34      	ldr	r3, [pc, #208]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012c0:	2210      	movs	r2, #16
 80012c2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012c4:	4b32      	ldr	r3, [pc, #200]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ca:	4b31      	ldr	r3, [pc, #196]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80012d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012d2:	2280      	movs	r2, #128	@ 0x80
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80012d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012d8:	2200      	movs	r2, #0
 80012da:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80012dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012de:	2200      	movs	r2, #0
 80012e0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80012e8:	4b29      	ldr	r3, [pc, #164]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80012ee:	4828      	ldr	r0, [pc, #160]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 80012f0:	f000 fd00 	bl	8001cf4 <HAL_DMA_Init>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_MspInit+0xe6>
    {
      Error_Handler();
 80012fa:	f7ff ff63 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a23      	ldr	r2, [pc, #140]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 8001302:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001304:	4a22      	ldr	r2, [pc, #136]	@ (8001390 <HAL_I2C_MspInit+0x178>)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 800130a:	4b23      	ldr	r3, [pc, #140]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 800130c:	4a23      	ldr	r2, [pc, #140]	@ (800139c <HAL_I2C_MspInit+0x184>)
 800130e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8001310:	4b21      	ldr	r3, [pc, #132]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 8001312:	2211      	movs	r2, #17
 8001314:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 8001318:	2210      	movs	r2, #16
 800131a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800131c:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 800131e:	2200      	movs	r2, #0
 8001320:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001322:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 8001324:	2280      	movs	r2, #128	@ 0x80
 8001326:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001328:	4b1b      	ldr	r3, [pc, #108]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 800132a:	2200      	movs	r2, #0
 800132c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800132e:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001334:	4b18      	ldr	r3, [pc, #96]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 8001336:	2200      	movs	r2, #0
 8001338:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 800133c:	2200      	movs	r2, #0
 800133e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001340:	4815      	ldr	r0, [pc, #84]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 8001342:	f000 fcd7 	bl	8001cf4 <HAL_DMA_Init>
 8001346:	4603      	mov	r3, r0
 8001348:	2b00      	cmp	r3, #0
 800134a:	d001      	beq.n	8001350 <HAL_I2C_MspInit+0x138>
    {
      Error_Handler();
 800134c:	f7ff ff3a 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4a11      	ldr	r2, [pc, #68]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 8001354:	639a      	str	r2, [r3, #56]	@ 0x38
 8001356:	4a10      	ldr	r2, [pc, #64]	@ (8001398 <HAL_I2C_MspInit+0x180>)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	201f      	movs	r0, #31
 8001362:	f000 fc92 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001366:	201f      	movs	r0, #31
 8001368:	f000 fca9 	bl	8001cbe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800136c:	2200      	movs	r2, #0
 800136e:	2100      	movs	r1, #0
 8001370:	2020      	movs	r0, #32
 8001372:	f000 fc8a 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001376:	2020      	movs	r0, #32
 8001378:	f000 fca1 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800137c:	bf00      	nop
 800137e:	3778      	adds	r7, #120	@ 0x78
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	40005400 	.word	0x40005400
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400
 8001390:	20000110 	.word	0x20000110
 8001394:	40020058 	.word	0x40020058
 8001398:	20000170 	.word	0x20000170
 800139c:	4002006c 	.word	0x4002006c

080013a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0a0      	sub	sp, #128	@ 0x80
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b8:	f107 0318 	add.w	r3, r7, #24
 80013bc:	2254      	movs	r2, #84	@ 0x54
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f005 ffc6 	bl	8007352 <memset>
  if(huart->Instance==LPUART1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a91      	ldr	r2, [pc, #580]	@ (8001610 <HAL_UART_MspInit+0x270>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f040 808b 	bne.w	80014e8 <HAL_UART_MspInit+0x148>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80013d2:	2320      	movs	r3, #32
 80013d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013da:	f107 0318 	add.w	r3, r7, #24
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 fd42 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ea:	f7ff feeb 	bl	80011c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80013ee:	4b89      	ldr	r3, [pc, #548]	@ (8001614 <HAL_UART_MspInit+0x274>)
 80013f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013f2:	4a88      	ldr	r2, [pc, #544]	@ (8001614 <HAL_UART_MspInit+0x274>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80013fa:	4b86      	ldr	r3, [pc, #536]	@ (8001614 <HAL_UART_MspInit+0x274>)
 80013fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b83      	ldr	r3, [pc, #524]	@ (8001614 <HAL_UART_MspInit+0x274>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a82      	ldr	r2, [pc, #520]	@ (8001614 <HAL_UART_MspInit+0x274>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b80      	ldr	r3, [pc, #512]	@ (8001614 <HAL_UART_MspInit+0x274>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800141e:	230c      	movs	r3, #12
 8001420:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800142e:	230c      	movs	r3, #12
 8001430:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143c:	f000 ff42 	bl	80022c4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel3;
 8001440:	4b75      	ldr	r3, [pc, #468]	@ (8001618 <HAL_UART_MspInit+0x278>)
 8001442:	4a76      	ldr	r2, [pc, #472]	@ (800161c <HAL_UART_MspInit+0x27c>)
 8001444:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001446:	4b74      	ldr	r3, [pc, #464]	@ (8001618 <HAL_UART_MspInit+0x278>)
 8001448:	2222      	movs	r2, #34	@ 0x22
 800144a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800144c:	4b72      	ldr	r3, [pc, #456]	@ (8001618 <HAL_UART_MspInit+0x278>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001452:	4b71      	ldr	r3, [pc, #452]	@ (8001618 <HAL_UART_MspInit+0x278>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001458:	4b6f      	ldr	r3, [pc, #444]	@ (8001618 <HAL_UART_MspInit+0x278>)
 800145a:	2280      	movs	r2, #128	@ 0x80
 800145c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145e:	4b6e      	ldr	r3, [pc, #440]	@ (8001618 <HAL_UART_MspInit+0x278>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001464:	4b6c      	ldr	r3, [pc, #432]	@ (8001618 <HAL_UART_MspInit+0x278>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800146a:	4b6b      	ldr	r3, [pc, #428]	@ (8001618 <HAL_UART_MspInit+0x278>)
 800146c:	2220      	movs	r2, #32
 800146e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001470:	4b69      	ldr	r3, [pc, #420]	@ (8001618 <HAL_UART_MspInit+0x278>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001476:	4868      	ldr	r0, [pc, #416]	@ (8001618 <HAL_UART_MspInit+0x278>)
 8001478:	f000 fc3c 	bl	8001cf4 <HAL_DMA_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001482:	f7ff fe9f 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_lpuart1_rx);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a63      	ldr	r2, [pc, #396]	@ (8001618 <HAL_UART_MspInit+0x278>)
 800148a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800148e:	4a62      	ldr	r2, [pc, #392]	@ (8001618 <HAL_UART_MspInit+0x278>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel4;
 8001494:	4b62      	ldr	r3, [pc, #392]	@ (8001620 <HAL_UART_MspInit+0x280>)
 8001496:	4a63      	ldr	r2, [pc, #396]	@ (8001624 <HAL_UART_MspInit+0x284>)
 8001498:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800149a:	4b61      	ldr	r3, [pc, #388]	@ (8001620 <HAL_UART_MspInit+0x280>)
 800149c:	2223      	movs	r2, #35	@ 0x23
 800149e:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014a0:	4b5f      	ldr	r3, [pc, #380]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014a2:	2210      	movs	r2, #16
 80014a4:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a6:	4b5e      	ldr	r3, [pc, #376]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80014ac:	4b5c      	ldr	r3, [pc, #368]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014ae:	2280      	movs	r2, #128	@ 0x80
 80014b0:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b2:	4b5b      	ldr	r3, [pc, #364]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b8:	4b59      	ldr	r3, [pc, #356]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80014be:	4b58      	ldr	r3, [pc, #352]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014c4:	4b56      	ldr	r3, [pc, #344]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80014ca:	4855      	ldr	r0, [pc, #340]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014cc:	f000 fc12 	bl	8001cf4 <HAL_DMA_Init>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 80014d6:	f7ff fe75 	bl	80011c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart1_tx);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a50      	ldr	r2, [pc, #320]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014de:	67da      	str	r2, [r3, #124]	@ 0x7c
 80014e0:	4a4f      	ldr	r2, [pc, #316]	@ (8001620 <HAL_UART_MspInit+0x280>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80014e6:	e08e      	b.n	8001606 <HAL_UART_MspInit+0x266>
  else if(huart->Instance==USART1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001628 <HAL_UART_MspInit+0x288>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	f040 8089 	bne.w	8001606 <HAL_UART_MspInit+0x266>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4618      	mov	r0, r3
 8001502:	f003 fcb1 	bl	8004e68 <HAL_RCCEx_PeriphCLKConfig>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <HAL_UART_MspInit+0x170>
      Error_Handler();
 800150c:	f7ff fe5a 	bl	80011c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001510:	4b40      	ldr	r3, [pc, #256]	@ (8001614 <HAL_UART_MspInit+0x274>)
 8001512:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001514:	4a3f      	ldr	r2, [pc, #252]	@ (8001614 <HAL_UART_MspInit+0x274>)
 8001516:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800151a:	6613      	str	r3, [r2, #96]	@ 0x60
 800151c:	4b3d      	ldr	r3, [pc, #244]	@ (8001614 <HAL_UART_MspInit+0x274>)
 800151e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001520:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001528:	4b3a      	ldr	r3, [pc, #232]	@ (8001614 <HAL_UART_MspInit+0x274>)
 800152a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800152c:	4a39      	ldr	r2, [pc, #228]	@ (8001614 <HAL_UART_MspInit+0x274>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001534:	4b37      	ldr	r3, [pc, #220]	@ (8001614 <HAL_UART_MspInit+0x274>)
 8001536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001538:	f003 0304 	and.w	r3, r3, #4
 800153c:	60bb      	str	r3, [r7, #8]
 800153e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001540:	2330      	movs	r3, #48	@ 0x30
 8001542:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154c:	2300      	movs	r3, #0
 800154e:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001550:	2307      	movs	r3, #7
 8001552:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001554:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001558:	4619      	mov	r1, r3
 800155a:	4834      	ldr	r0, [pc, #208]	@ (800162c <HAL_UART_MspInit+0x28c>)
 800155c:	f000 feb2 	bl	80022c4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001560:	4b33      	ldr	r3, [pc, #204]	@ (8001630 <HAL_UART_MspInit+0x290>)
 8001562:	4a34      	ldr	r2, [pc, #208]	@ (8001634 <HAL_UART_MspInit+0x294>)
 8001564:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001566:	4b32      	ldr	r3, [pc, #200]	@ (8001630 <HAL_UART_MspInit+0x290>)
 8001568:	2218      	movs	r2, #24
 800156a:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156c:	4b30      	ldr	r3, [pc, #192]	@ (8001630 <HAL_UART_MspInit+0x290>)
 800156e:	2200      	movs	r2, #0
 8001570:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001572:	4b2f      	ldr	r3, [pc, #188]	@ (8001630 <HAL_UART_MspInit+0x290>)
 8001574:	2200      	movs	r2, #0
 8001576:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001578:	4b2d      	ldr	r3, [pc, #180]	@ (8001630 <HAL_UART_MspInit+0x290>)
 800157a:	2280      	movs	r2, #128	@ 0x80
 800157c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157e:	4b2c      	ldr	r3, [pc, #176]	@ (8001630 <HAL_UART_MspInit+0x290>)
 8001580:	2200      	movs	r2, #0
 8001582:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001584:	4b2a      	ldr	r3, [pc, #168]	@ (8001630 <HAL_UART_MspInit+0x290>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800158a:	4b29      	ldr	r3, [pc, #164]	@ (8001630 <HAL_UART_MspInit+0x290>)
 800158c:	2220      	movs	r2, #32
 800158e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001590:	4b27      	ldr	r3, [pc, #156]	@ (8001630 <HAL_UART_MspInit+0x290>)
 8001592:	2200      	movs	r2, #0
 8001594:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001596:	4826      	ldr	r0, [pc, #152]	@ (8001630 <HAL_UART_MspInit+0x290>)
 8001598:	f000 fbac 	bl	8001cf4 <HAL_DMA_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_UART_MspInit+0x206>
      Error_Handler();
 80015a2:	f7ff fe0f 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a21      	ldr	r2, [pc, #132]	@ (8001630 <HAL_UART_MspInit+0x290>)
 80015aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80015ae:	4a20      	ldr	r2, [pc, #128]	@ (8001630 <HAL_UART_MspInit+0x290>)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6293      	str	r3, [r2, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80015b4:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015b6:	4a21      	ldr	r2, [pc, #132]	@ (800163c <HAL_UART_MspInit+0x29c>)
 80015b8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80015ba:	4b1f      	ldr	r3, [pc, #124]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015bc:	2219      	movs	r2, #25
 80015be:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015c0:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015c2:	2210      	movs	r2, #16
 80015c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015cc:	4b1a      	ldr	r3, [pc, #104]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015ce:	2280      	movs	r2, #128	@ 0x80
 80015d0:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015d2:	4b19      	ldr	r3, [pc, #100]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015d8:	4b17      	ldr	r3, [pc, #92]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015da:	2200      	movs	r2, #0
 80015dc:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80015de:	4b16      	ldr	r3, [pc, #88]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015e4:	4b14      	ldr	r3, [pc, #80]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80015ea:	4813      	ldr	r0, [pc, #76]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015ec:	f000 fb82 	bl	8001cf4 <HAL_DMA_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_UART_MspInit+0x25a>
      Error_Handler();
 80015f6:	f7ff fde5 	bl	80011c4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a0e      	ldr	r2, [pc, #56]	@ (8001638 <HAL_UART_MspInit+0x298>)
 80015fe:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <HAL_UART_MspInit+0x298>)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001606:	bf00      	nop
 8001608:	3780      	adds	r7, #128	@ 0x80
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40008000 	.word	0x40008000
 8001614:	40021000 	.word	0x40021000
 8001618:	200002f8 	.word	0x200002f8
 800161c:	40020030 	.word	0x40020030
 8001620:	20000358 	.word	0x20000358
 8001624:	40020044 	.word	0x40020044
 8001628:	40013800 	.word	0x40013800
 800162c:	48000800 	.word	0x48000800
 8001630:	200003b8 	.word	0x200003b8
 8001634:	40020008 	.word	0x40020008
 8001638:	20000418 	.word	0x20000418
 800163c:	4002001c 	.word	0x4002001c

08001640 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001650:	d113      	bne.n	800167a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001652:	4b0c      	ldr	r3, [pc, #48]	@ (8001684 <HAL_TIM_Base_MspInit+0x44>)
 8001654:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001656:	4a0b      	ldr	r2, [pc, #44]	@ (8001684 <HAL_TIM_Base_MspInit+0x44>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6593      	str	r3, [r2, #88]	@ 0x58
 800165e:	4b09      	ldr	r3, [pc, #36]	@ (8001684 <HAL_TIM_Base_MspInit+0x44>)
 8001660:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	201c      	movs	r0, #28
 8001670:	f000 fb0b 	bl	8001c8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001674:	201c      	movs	r0, #28
 8001676:	f000 fb22 	bl	8001cbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40021000 	.word	0x40021000

08001688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800168c:	bf00      	nop
 800168e:	e7fd      	b.n	800168c <NMI_Handler+0x4>

08001690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001694:	bf00      	nop
 8001696:	e7fd      	b.n	8001694 <HardFault_Handler+0x4>

08001698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800169c:	bf00      	nop
 800169e:	e7fd      	b.n	800169c <MemManage_Handler+0x4>

080016a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016a4:	bf00      	nop
 80016a6:	e7fd      	b.n	80016a4 <BusFault_Handler+0x4>

080016a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016ac:	bf00      	nop
 80016ae:	e7fd      	b.n	80016ac <UsageFault_Handler+0x4>

080016b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016c2:	bf00      	nop
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016d0:	bf00      	nop
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016de:	f000 f9b9 	bl	8001a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <DMA1_Channel1_IRQHandler+0x10>)
 80016ee:	f000 fc8b 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	200003b8 	.word	0x200003b8

080016fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <DMA1_Channel2_IRQHandler+0x10>)
 8001702:	f000 fc81 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000418 	.word	0x20000418

08001710 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <DMA1_Channel3_IRQHandler+0x10>)
 8001716:	f000 fc77 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200002f8 	.word	0x200002f8

08001724 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <DMA1_Channel4_IRQHandler+0x10>)
 800172a:	f000 fc6d 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	20000358 	.word	0x20000358

08001738 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800173c:	4802      	ldr	r0, [pc, #8]	@ (8001748 <DMA1_Channel5_IRQHandler+0x10>)
 800173e:	f000 fc63 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000110 	.word	0x20000110

0800174c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001750:	4802      	ldr	r0, [pc, #8]	@ (800175c <DMA1_Channel6_IRQHandler+0x10>)
 8001752:	f000 fc59 	bl	8002008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20000170 	.word	0x20000170

08001760 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001764:	4802      	ldr	r0, [pc, #8]	@ (8001770 <TIM2_IRQHandler+0x10>)
 8001766:	f003 fe9d 	bl	80054a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000478 	.word	0x20000478

08001774 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_EV_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <I2C1_EV_IRQHandler+0x10>)
 800177a:	f001 f90b 	bl	8002994 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	200000bc 	.word	0x200000bc

08001788 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <I2C1_ER_IRQHandler+0x10>)
 800178e:	f001 f91b 	bl	80029c8 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	200000bc 	.word	0x200000bc

0800179c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80017a0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80017a4:	f000 ff28 	bl	80025f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017a8:	bf00      	nop
 80017aa:	bd80      	pop	{r7, pc}

080017ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return 1;
 80017b0:	2301      	movs	r3, #1
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <_kill>:

int _kill(int pid, int sig)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017c6:	f005 fe13 	bl	80073f0 <__errno>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2216      	movs	r2, #22
 80017ce:	601a      	str	r2, [r3, #0]
  return -1;
 80017d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <_exit>:

void _exit (int status)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	6878      	ldr	r0, [r7, #4]
 80017ea:	f7ff ffe7 	bl	80017bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80017ee:	bf00      	nop
 80017f0:	e7fd      	b.n	80017ee <_exit+0x12>

080017f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	60f8      	str	r0, [r7, #12]
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	2300      	movs	r3, #0
 8001800:	617b      	str	r3, [r7, #20]
 8001802:	e00a      	b.n	800181a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001804:	f3af 8000 	nop.w
 8001808:	4601      	mov	r1, r0
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	60ba      	str	r2, [r7, #8]
 8001810:	b2ca      	uxtb	r2, r1
 8001812:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	3301      	adds	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	429a      	cmp	r2, r3
 8001820:	dbf0      	blt.n	8001804 <_read+0x12>
  }

  return len;
 8001822:	687b      	ldr	r3, [r7, #4]
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}

0800182c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	60f8      	str	r0, [r7, #12]
 8001834:	60b9      	str	r1, [r7, #8]
 8001836:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e009      	b.n	8001852 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	1c5a      	adds	r2, r3, #1
 8001842:	60ba      	str	r2, [r7, #8]
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	3301      	adds	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
 8001852:	697a      	ldr	r2, [r7, #20]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	429a      	cmp	r2, r3
 8001858:	dbf1      	blt.n	800183e <_write+0x12>
  }
  return len;
 800185a:	687b      	ldr	r3, [r7, #4]
}
 800185c:	4618      	mov	r0, r3
 800185e:	3718      	adds	r7, #24
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <_close>:

int _close(int file)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800186c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800188c:	605a      	str	r2, [r3, #4]
  return 0;
 800188e:	2300      	movs	r3, #0
}
 8001890:	4618      	mov	r0, r3
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr

0800189c <_isatty>:

int _isatty(int file)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr

080018b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	60f8      	str	r0, [r7, #12]
 80018ba:	60b9      	str	r1, [r7, #8]
 80018bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	@ (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	@ (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	@ (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	@ (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	@ (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	@ (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f005 fd78 	bl	80073f0 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	@ (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	@ (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	@ (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20020000 	.word	0x20020000
 800192c:	00000400 	.word	0x00000400
 8001930:	200004f0 	.word	0x200004f0
 8001934:	20000648 	.word	0x20000648

08001938 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	@ (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	@ (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800195c:	480d      	ldr	r0, [pc, #52]	@ (8001994 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800195e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001960:	f7ff ffea 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001964:	480c      	ldr	r0, [pc, #48]	@ (8001998 <LoopForever+0x6>)
  ldr r1, =_edata
 8001966:	490d      	ldr	r1, [pc, #52]	@ (800199c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <LoopForever+0xe>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0a      	ldr	r2, [pc, #40]	@ (80019a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800197c:	4c0a      	ldr	r4, [pc, #40]	@ (80019a8 <LoopForever+0x16>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198a:	f005 fd37 	bl	80073fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800198e:	f7fe fe17 	bl	80005c0 <main>

08001992 <LoopForever>:

LoopForever:
    b LoopForever
 8001992:	e7fe      	b.n	8001992 <LoopForever>
  ldr   r0, =_estack
 8001994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 80019a0:	0800834c 	.word	0x0800834c
  ldr r2, =_sbss
 80019a4:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 80019a8:	20000644 	.word	0x20000644

080019ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC1_2_IRQHandler>

080019ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f95b 	bl	8001c74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019be:	2000      	movs	r0, #0
 80019c0:	f000 f80e 	bl	80019e0 <HAL_InitTick>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	e001      	b.n	80019d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d0:	f7ff fbfe 	bl	80011d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d4:	79fb      	ldrb	r3, [r7, #7]

}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019ec:	4b16      	ldr	r3, [pc, #88]	@ (8001a48 <HAL_InitTick+0x68>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d022      	beq.n	8001a3a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019f4:	4b15      	ldr	r3, [pc, #84]	@ (8001a4c <HAL_InitTick+0x6c>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b13      	ldr	r3, [pc, #76]	@ (8001a48 <HAL_InitTick+0x68>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 f966 	bl	8001cda <HAL_SYSTICK_Config>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d10f      	bne.n	8001a34 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	d809      	bhi.n	8001a2e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	6879      	ldr	r1, [r7, #4]
 8001a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a22:	f000 f932 	bl	8001c8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a26:	4a0a      	ldr	r2, [pc, #40]	@ (8001a50 <HAL_InitTick+0x70>)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6013      	str	r3, [r2, #0]
 8001a2c:	e007      	b.n	8001a3e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	73fb      	strb	r3, [r7, #15]
 8001a32:	e004      	b.n	8001a3e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a34:	2301      	movs	r3, #1
 8001a36:	73fb      	strb	r3, [r7, #15]
 8001a38:	e001      	b.n	8001a3e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000040 	.word	0x20000040
 8001a4c:	20000038 	.word	0x20000038
 8001a50:	2000003c 	.word	0x2000003c

08001a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a58:	4b05      	ldr	r3, [pc, #20]	@ (8001a70 <HAL_IncTick+0x1c>)
 8001a5a:	681a      	ldr	r2, [r3, #0]
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_IncTick+0x20>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4413      	add	r3, r2
 8001a62:	4a03      	ldr	r2, [pc, #12]	@ (8001a70 <HAL_IncTick+0x1c>)
 8001a64:	6013      	str	r3, [r2, #0]
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	200004f4 	.word	0x200004f4
 8001a74:	20000040 	.word	0x20000040

08001a78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <HAL_GetTick+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	200004f4 	.word	0x200004f4

08001a90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b084      	sub	sp, #16
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a98:	f7ff ffee 	bl	8001a78 <HAL_GetTick>
 8001a9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa8:	d004      	beq.n	8001ab4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aaa:	4b09      	ldr	r3, [pc, #36]	@ (8001ad0 <HAL_Delay+0x40>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	68fa      	ldr	r2, [r7, #12]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab4:	bf00      	nop
 8001ab6:	f7ff ffdf 	bl	8001a78 <HAL_GetTick>
 8001aba:	4602      	mov	r2, r0
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1ad3      	subs	r3, r2, r3
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d8f7      	bhi.n	8001ab6 <HAL_Delay+0x26>
  {
  }
}
 8001ac6:	bf00      	nop
 8001ac8:	bf00      	nop
 8001aca:	3710      	adds	r7, #16
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000040 	.word	0x20000040

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	@ (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	@ (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4907      	ldr	r1, [pc, #28]	@ (8001b70 <__NVIC_EnableIRQ+0x38>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr
 8001b6e:	bf00      	nop
 8001b70:	e000e100 	.word	0xe000e100

08001b74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	db0a      	blt.n	8001b9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	b2da      	uxtb	r2, r3
 8001b8c:	490c      	ldr	r1, [pc, #48]	@ (8001bc0 <__NVIC_SetPriority+0x4c>)
 8001b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b92:	0112      	lsls	r2, r2, #4
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	440b      	add	r3, r1
 8001b98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b9c:	e00a      	b.n	8001bb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4908      	ldr	r1, [pc, #32]	@ (8001bc4 <__NVIC_SetPriority+0x50>)
 8001ba4:	79fb      	ldrb	r3, [r7, #7]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	3b04      	subs	r3, #4
 8001bac:	0112      	lsls	r2, r2, #4
 8001bae:	b2d2      	uxtb	r2, r2
 8001bb0:	440b      	add	r3, r1
 8001bb2:	761a      	strb	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100
 8001bc4:	e000ed00 	.word	0xe000ed00

08001bc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b089      	sub	sp, #36	@ 0x24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f1c3 0307 	rsb	r3, r3, #7
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	bf28      	it	cs
 8001be6:	2304      	movcs	r3, #4
 8001be8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	3304      	adds	r3, #4
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d902      	bls.n	8001bf8 <NVIC_EncodePriority+0x30>
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3b03      	subs	r3, #3
 8001bf6:	e000      	b.n	8001bfa <NVIC_EncodePriority+0x32>
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8001c00:	69bb      	ldr	r3, [r7, #24]
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43da      	mvns	r2, r3
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	fa01 f303 	lsl.w	r3, r1, r3
 8001c1a:	43d9      	mvns	r1, r3
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	4313      	orrs	r3, r2
         );
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3724      	adds	r7, #36	@ 0x24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
	...

08001c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c40:	d301      	bcc.n	8001c46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00f      	b.n	8001c66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c46:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <SysTick_Config+0x40>)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c4e:	210f      	movs	r1, #15
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff ff8e 	bl	8001b74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c58:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <SysTick_Config+0x40>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c5e:	4b04      	ldr	r3, [pc, #16]	@ (8001c70 <SysTick_Config+0x40>)
 8001c60:	2207      	movs	r2, #7
 8001c62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	e000e010 	.word	0xe000e010

08001c74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f7ff ff29 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b086      	sub	sp, #24
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	4603      	mov	r3, r0
 8001c92:	60b9      	str	r1, [r7, #8]
 8001c94:	607a      	str	r2, [r7, #4]
 8001c96:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c98:	f7ff ff40 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	68b9      	ldr	r1, [r7, #8]
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f7ff ff90 	bl	8001bc8 <NVIC_EncodePriority>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cae:	4611      	mov	r1, r2
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff ff5f 	bl	8001b74 <__NVIC_SetPriority>
}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}

08001cbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cbe:	b580      	push	{r7, lr}
 8001cc0:	b082      	sub	sp, #8
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ff33 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b082      	sub	sp, #8
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f7ff ffa4 	bl	8001c30 <SysTick_Config>
 8001ce8:	4603      	mov	r3, r0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d101      	bne.n	8001d06 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e08d      	b.n	8001e22 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	461a      	mov	r2, r3
 8001d0c:	4b47      	ldr	r3, [pc, #284]	@ (8001e2c <HAL_DMA_Init+0x138>)
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d80f      	bhi.n	8001d32 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	461a      	mov	r2, r3
 8001d18:	4b45      	ldr	r3, [pc, #276]	@ (8001e30 <HAL_DMA_Init+0x13c>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	4a45      	ldr	r2, [pc, #276]	@ (8001e34 <HAL_DMA_Init+0x140>)
 8001d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d22:	091b      	lsrs	r3, r3, #4
 8001d24:	009a      	lsls	r2, r3, #2
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a42      	ldr	r2, [pc, #264]	@ (8001e38 <HAL_DMA_Init+0x144>)
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d30:	e00e      	b.n	8001d50 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b40      	ldr	r3, [pc, #256]	@ (8001e3c <HAL_DMA_Init+0x148>)
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e34 <HAL_DMA_Init+0x140>)
 8001d3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d42:	091b      	lsrs	r3, r3, #4
 8001d44:	009a      	lsls	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a3c      	ldr	r2, [pc, #240]	@ (8001e40 <HAL_DMA_Init+0x14c>)
 8001d4e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2202      	movs	r2, #2
 8001d54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8001d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d6a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001d74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001d94:	68fa      	ldr	r2, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f000 fa2c 	bl	8002200 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001db0:	d102      	bne.n	8001db8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685a      	ldr	r2, [r3, #4]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001dcc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d010      	beq.n	8001df8 <HAL_DMA_Init+0x104>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	d80c      	bhi.n	8001df8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fa4c 	bl	800227c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	e008      	b.n	8001e0a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40020407 	.word	0x40020407
 8001e30:	bffdfff8 	.word	0xbffdfff8
 8001e34:	cccccccd 	.word	0xcccccccd
 8001e38:	40020000 	.word	0x40020000
 8001e3c:	bffdfbf8 	.word	0xbffdfbf8
 8001e40:	40020400 	.word	0x40020400

08001e44 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
 8001e50:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d101      	bne.n	8001e64 <HAL_DMA_Start_IT+0x20>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e066      	b.n	8001f32 <HAL_DMA_Start_IT+0xee>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d155      	bne.n	8001f24 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f022 0201 	bic.w	r2, r2, #1
 8001e94:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68b9      	ldr	r1, [r7, #8]
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 f970 	bl	8002182 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d008      	beq.n	8001ebc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 020e 	orr.w	r2, r2, #14
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	e00f      	b.n	8001edc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0204 	bic.w	r2, r2, #4
 8001eca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f042 020a 	orr.w	r2, r2, #10
 8001eda:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d007      	beq.n	8001efa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ef4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ef8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d007      	beq.n	8001f12 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001f10:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 0201 	orr.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
 8001f22:	e005      	b.n	8001f30 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001f30:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3718      	adds	r7, #24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}

08001f3a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d00d      	beq.n	8001f6e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2204      	movs	r2, #4
 8001f56:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	73fb      	strb	r3, [r7, #15]
 8001f6c:	e047      	b.n	8001ffe <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 020e 	bic.w	r2, r2, #14
 8001f7c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f022 0201 	bic.w	r2, r2, #1
 8001f8c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001f98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f9c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	f003 021f 	and.w	r2, r3, #31
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001fba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00c      	beq.n	8001fde <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fce:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001fdc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	4798      	blx	r3
    }
  }
  return status;
 8001ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002000:	4618      	mov	r0, r3
 8002002:	3710      	adds	r7, #16
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}

08002008 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002024:	f003 031f 	and.w	r3, r3, #31
 8002028:	2204      	movs	r2, #4
 800202a:	409a      	lsls	r2, r3
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d026      	beq.n	8002082 <HAL_DMA_IRQHandler+0x7a>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d021      	beq.n	8002082 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0320 	and.w	r3, r3, #32
 8002048:	2b00      	cmp	r3, #0
 800204a:	d107      	bne.n	800205c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0204 	bic.w	r2, r2, #4
 800205a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	2104      	movs	r1, #4
 800206a:	fa01 f202 	lsl.w	r2, r1, r2
 800206e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	2b00      	cmp	r3, #0
 8002076:	d071      	beq.n	800215c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002080:	e06c      	b.n	800215c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002086:	f003 031f 	and.w	r3, r3, #31
 800208a:	2202      	movs	r2, #2
 800208c:	409a      	lsls	r2, r3
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4013      	ands	r3, r2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d02e      	beq.n	80020f4 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d029      	beq.n	80020f4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10b      	bne.n	80020c6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 020a 	bic.w	r2, r2, #10
 80020bc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2201      	movs	r2, #1
 80020c2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	f003 021f 	and.w	r2, r3, #31
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	2102      	movs	r1, #2
 80020d4:	fa01 f202 	lsl.w	r2, r1, r2
 80020d8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d038      	beq.n	800215c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ee:	6878      	ldr	r0, [r7, #4]
 80020f0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80020f2:	e033      	b.n	800215c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f8:	f003 031f 	and.w	r3, r3, #31
 80020fc:	2208      	movs	r2, #8
 80020fe:	409a      	lsls	r2, r3
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4013      	ands	r3, r2
 8002104:	2b00      	cmp	r3, #0
 8002106:	d02a      	beq.n	800215e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d025      	beq.n	800215e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 020e 	bic.w	r2, r2, #14
 8002120:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002126:	f003 021f 	and.w	r2, r3, #31
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212e:	2101      	movs	r1, #1
 8002130:	fa01 f202 	lsl.w	r2, r1, r2
 8002134:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2201      	movs	r2, #1
 800213a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800215c:	bf00      	nop
 800215e:	bf00      	nop
}
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}

08002166 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002166:	b480      	push	{r7}
 8002168:	b083      	sub	sp, #12
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002174:	b2db      	uxtb	r3, r3
}
 8002176:	4618      	mov	r0, r3
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	607a      	str	r2, [r7, #4]
 800218e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002198:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d004      	beq.n	80021ac <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80021aa:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b0:	f003 021f 	and.w	r2, r3, #31
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	2101      	movs	r1, #1
 80021ba:	fa01 f202 	lsl.w	r2, r1, r2
 80021be:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b10      	cmp	r3, #16
 80021ce:	d108      	bne.n	80021e2 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	687a      	ldr	r2, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80021e0:	e007      	b.n	80021f2 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	60da      	str	r2, [r3, #12]
}
 80021f2:	bf00      	nop
 80021f4:	3714      	adds	r7, #20
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
	...

08002200 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8002210:	429a      	cmp	r2, r3
 8002212:	d802      	bhi.n	800221a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8002214:	4b15      	ldr	r3, [pc, #84]	@ (800226c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	e001      	b.n	800221e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800221a:	4b15      	ldr	r3, [pc, #84]	@ (8002270 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800221c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3b08      	subs	r3, #8
 800222a:	4a12      	ldr	r2, [pc, #72]	@ (8002274 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800222c:	fba2 2303 	umull	r2, r3, r2, r3
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002238:	089b      	lsrs	r3, r3, #2
 800223a:	009a      	lsls	r2, r3, #2
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4413      	add	r3, r2
 8002240:	461a      	mov	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a0b      	ldr	r2, [pc, #44]	@ (8002278 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800224a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f003 031f 	and.w	r3, r3, #31
 8002252:	2201      	movs	r2, #1
 8002254:	409a      	lsls	r2, r3
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800225a:	bf00      	nop
 800225c:	371c      	adds	r7, #28
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40020407 	.word	0x40020407
 800226c:	40020800 	.word	0x40020800
 8002270:	40020820 	.word	0x40020820
 8002274:	cccccccd 	.word	0xcccccccd
 8002278:	40020880 	.word	0x40020880

0800227c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800228c:	68fa      	ldr	r2, [r7, #12]
 800228e:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	461a      	mov	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a08      	ldr	r2, [pc, #32]	@ (80022c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800229e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	f003 031f 	and.w	r3, r3, #31
 80022a8:	2201      	movs	r2, #1
 80022aa:	409a      	lsls	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80022b0:	bf00      	nop
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	1000823f 	.word	0x1000823f
 80022c0:	40020940 	.word	0x40020940

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022d2:	e15a      	b.n	800258a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	fa01 f303 	lsl.w	r3, r1, r3
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	f000 814c 	beq.w	8002584 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f003 0303 	and.w	r3, r3, #3
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d005      	beq.n	8002304 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002300:	2b02      	cmp	r3, #2
 8002302:	d130      	bne.n	8002366 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	2203      	movs	r2, #3
 8002310:	fa02 f303 	lsl.w	r3, r2, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4013      	ands	r3, r2
 800231a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	005b      	lsls	r3, r3, #1
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800233a:	2201      	movs	r2, #1
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43db      	mvns	r3, r3
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4013      	ands	r3, r2
 8002348:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	091b      	lsrs	r3, r3, #4
 8002350:	f003 0201 	and.w	r2, r3, #1
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa02 f303 	lsl.w	r3, r2, r3
 800235a:	693a      	ldr	r2, [r7, #16]
 800235c:	4313      	orrs	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b03      	cmp	r3, #3
 8002370:	d017      	beq.n	80023a2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	2203      	movs	r2, #3
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d123      	bne.n	80023f6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	08da      	lsrs	r2, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	3208      	adds	r2, #8
 80023b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f003 0307 	and.w	r3, r3, #7
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	220f      	movs	r2, #15
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	691a      	ldr	r2, [r3, #16]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	f003 0307 	and.w	r3, r3, #7
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	fa02 f303 	lsl.w	r3, r2, r3
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	08da      	lsrs	r2, r3, #3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3208      	adds	r2, #8
 80023f0:	6939      	ldr	r1, [r7, #16]
 80023f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	2203      	movs	r2, #3
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	43db      	mvns	r3, r3
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	4013      	ands	r3, r2
 800240c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f003 0203 	and.w	r2, r3, #3
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	693a      	ldr	r2, [r7, #16]
 8002420:	4313      	orrs	r3, r2
 8002422:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002432:	2b00      	cmp	r3, #0
 8002434:	f000 80a6 	beq.w	8002584 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002438:	4b5b      	ldr	r3, [pc, #364]	@ (80025a8 <HAL_GPIO_Init+0x2e4>)
 800243a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800243c:	4a5a      	ldr	r2, [pc, #360]	@ (80025a8 <HAL_GPIO_Init+0x2e4>)
 800243e:	f043 0301 	orr.w	r3, r3, #1
 8002442:	6613      	str	r3, [r2, #96]	@ 0x60
 8002444:	4b58      	ldr	r3, [pc, #352]	@ (80025a8 <HAL_GPIO_Init+0x2e4>)
 8002446:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002450:	4a56      	ldr	r2, [pc, #344]	@ (80025ac <HAL_GPIO_Init+0x2e8>)
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	089b      	lsrs	r3, r3, #2
 8002456:	3302      	adds	r3, #2
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	4013      	ands	r3, r2
 8002472:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800247a:	d01f      	beq.n	80024bc <HAL_GPIO_Init+0x1f8>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	4a4c      	ldr	r2, [pc, #304]	@ (80025b0 <HAL_GPIO_Init+0x2ec>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d019      	beq.n	80024b8 <HAL_GPIO_Init+0x1f4>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	4a4b      	ldr	r2, [pc, #300]	@ (80025b4 <HAL_GPIO_Init+0x2f0>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d013      	beq.n	80024b4 <HAL_GPIO_Init+0x1f0>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	4a4a      	ldr	r2, [pc, #296]	@ (80025b8 <HAL_GPIO_Init+0x2f4>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d00d      	beq.n	80024b0 <HAL_GPIO_Init+0x1ec>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	4a49      	ldr	r2, [pc, #292]	@ (80025bc <HAL_GPIO_Init+0x2f8>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d007      	beq.n	80024ac <HAL_GPIO_Init+0x1e8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4a48      	ldr	r2, [pc, #288]	@ (80025c0 <HAL_GPIO_Init+0x2fc>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d101      	bne.n	80024a8 <HAL_GPIO_Init+0x1e4>
 80024a4:	2305      	movs	r3, #5
 80024a6:	e00a      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024a8:	2306      	movs	r3, #6
 80024aa:	e008      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024ac:	2304      	movs	r3, #4
 80024ae:	e006      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024b0:	2303      	movs	r3, #3
 80024b2:	e004      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e002      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024b8:	2301      	movs	r3, #1
 80024ba:	e000      	b.n	80024be <HAL_GPIO_Init+0x1fa>
 80024bc:	2300      	movs	r3, #0
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	f002 0203 	and.w	r2, r2, #3
 80024c4:	0092      	lsls	r2, r2, #2
 80024c6:	4093      	lsls	r3, r2
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024ce:	4937      	ldr	r1, [pc, #220]	@ (80025ac <HAL_GPIO_Init+0x2e8>)
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	089b      	lsrs	r3, r3, #2
 80024d4:	3302      	adds	r3, #2
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024dc:	4b39      	ldr	r3, [pc, #228]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	43db      	mvns	r3, r3
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	4013      	ands	r3, r2
 80024ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80024f8:	693a      	ldr	r2, [r7, #16]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	4313      	orrs	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002500:	4a30      	ldr	r2, [pc, #192]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002506:	4b2f      	ldr	r3, [pc, #188]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	43db      	mvns	r3, r3
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	4013      	ands	r3, r2
 8002514:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d003      	beq.n	800252a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800252a:	4a26      	ldr	r2, [pc, #152]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002530:	4b24      	ldr	r3, [pc, #144]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	43db      	mvns	r3, r3
 800253a:	693a      	ldr	r2, [r7, #16]
 800253c:	4013      	ands	r3, r2
 800253e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d003      	beq.n	8002554 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800254c:	693a      	ldr	r2, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4313      	orrs	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002554:	4a1b      	ldr	r2, [pc, #108]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800255a:	4b1a      	ldr	r3, [pc, #104]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43db      	mvns	r3, r3
 8002564:	693a      	ldr	r2, [r7, #16]
 8002566:	4013      	ands	r3, r2
 8002568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002576:	693a      	ldr	r2, [r7, #16]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	4313      	orrs	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800257e:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <HAL_GPIO_Init+0x300>)
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	3301      	adds	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	697b      	ldr	r3, [r7, #20]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	f47f ae9d 	bne.w	80022d4 <HAL_GPIO_Init+0x10>
  }
}
 800259a:	bf00      	nop
 800259c:	bf00      	nop
 800259e:	371c      	adds	r7, #28
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40010000 	.word	0x40010000
 80025b0:	48000400 	.word	0x48000400
 80025b4:	48000800 	.word	0x48000800
 80025b8:	48000c00 	.word	0x48000c00
 80025bc:	48001000 	.word	0x48001000
 80025c0:	48001400 	.word	0x48001400
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80025e4:	e002      	b.n	80025ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80025e6:	887a      	ldrh	r2, [r7, #2]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80025ec:	bf00      	nop
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002602:	4b08      	ldr	r3, [pc, #32]	@ (8002624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002604:	695a      	ldr	r2, [r3, #20]
 8002606:	88fb      	ldrh	r3, [r7, #6]
 8002608:	4013      	ands	r3, r2
 800260a:	2b00      	cmp	r3, #0
 800260c:	d006      	beq.n	800261c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800260e:	4a05      	ldr	r2, [pc, #20]	@ (8002624 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002610:	88fb      	ldrh	r3, [r7, #6]
 8002612:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	4618      	mov	r0, r3
 8002618:	f000 f806 	bl	8002628 <HAL_GPIO_EXTI_Callback>
  }
}
 800261c:	bf00      	nop
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40010400 	.word	0x40010400

08002628 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002632:	bf00      	nop
 8002634:	370c      	adds	r7, #12
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800263e:	b580      	push	{r7, lr}
 8002640:	b082      	sub	sp, #8
 8002642:	af00      	add	r7, sp, #0
 8002644:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d101      	bne.n	8002650 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e08d      	b.n	800276c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d106      	bne.n	800266a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f7fe fdd7 	bl	8001218 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2224      	movs	r2, #36	@ 0x24
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0201 	bic.w	r2, r2, #1
 8002680:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800268e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689a      	ldr	r2, [r3, #8]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800269e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d107      	bne.n	80026b8 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80026b4:	609a      	str	r2, [r3, #8]
 80026b6:	e006      	b.n	80026c6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80026c4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d108      	bne.n	80026e0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80026dc:	605a      	str	r2, [r3, #4]
 80026de:	e007      	b.n	80026f0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ee:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	687a      	ldr	r2, [r7, #4]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80026fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002702:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	68da      	ldr	r2, [r3, #12]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002712:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691a      	ldr	r2, [r3, #16]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	695b      	ldr	r3, [r3, #20]
 800271c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	69d9      	ldr	r1, [r3, #28]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a1a      	ldr	r2, [r3, #32]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f042 0201 	orr.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2220      	movs	r2, #32
 8002758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_I2C_Mem_Write_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b086      	sub	sp, #24
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	4608      	mov	r0, r1
 800277e:	4611      	mov	r1, r2
 8002780:	461a      	mov	r2, r3
 8002782:	4603      	mov	r3, r0
 8002784:	817b      	strh	r3, [r7, #10]
 8002786:	460b      	mov	r3, r1
 8002788:	813b      	strh	r3, [r7, #8]
 800278a:	4613      	mov	r3, r2
 800278c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b20      	cmp	r3, #32
 8002798:	d16a      	bne.n	8002870 <HAL_I2C_Mem_Write_IT+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800279a:	69bb      	ldr	r3, [r7, #24]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_I2C_Mem_Write_IT+0x32>
 80027a0:	8bbb      	ldrh	r3, [r7, #28]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_I2C_Mem_Write_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80027ac:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e05f      	b.n	8002872 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027c0:	d101      	bne.n	80027c6 <HAL_I2C_Mem_Write_IT+0x52>
    {
      return HAL_BUSY;
 80027c2:	2302      	movs	r3, #2
 80027c4:	e055      	b.n	8002872 <HAL_I2C_Mem_Write_IT+0xfe>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2C_Mem_Write_IT+0x60>
 80027d0:	2302      	movs	r3, #2
 80027d2:	e04e      	b.n	8002872 <HAL_I2C_Mem_Write_IT+0xfe>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2221      	movs	r2, #33	@ 0x21
 80027e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2240      	movs	r2, #64	@ 0x40
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2200      	movs	r2, #0
 80027f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->XferSize    = 0U;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2200      	movs	r2, #0
 80027f6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->pBuffPtr    = pData;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8bba      	ldrh	r2, [r7, #28]
 8002802:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4a1d      	ldr	r2, [pc, #116]	@ (800287c <HAL_I2C_Mem_Write_IT+0x108>)
 8002808:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a1c      	ldr	r2, [pc, #112]	@ (8002880 <HAL_I2C_Mem_Write_IT+0x10c>)
 800280e:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 8002810:	897a      	ldrh	r2, [r7, #10]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002816:	88fb      	ldrh	r3, [r7, #6]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d109      	bne.n	8002830 <HAL_I2C_Mem_Write_IT+0xbc>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800281c:	893b      	ldrh	r3, [r7, #8]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	f04f 32ff 	mov.w	r2, #4294967295
 800282c:	651a      	str	r2, [r3, #80]	@ 0x50
 800282e:	e00b      	b.n	8002848 <HAL_I2C_Mem_Write_IT+0xd4>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002830:	893b      	ldrh	r3, [r7, #8]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	b29b      	uxth	r3, r3
 8002836:	b2da      	uxtb	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800283e:	893b      	ldrh	r3, [r7, #8]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	461a      	mov	r2, r3
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	b2da      	uxtb	r2, r3
 800284c:	8979      	ldrh	r1, [r7, #10]
 800284e:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <HAL_I2C_Mem_Write_IT+0x110>)
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002856:	68f8      	ldr	r0, [r7, #12]
 8002858:	f001 fb78 	bl	8003f4c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002864:	2101      	movs	r1, #1
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f001 fba2 	bl	8003fb0 <I2C_Enable_IRQ>

    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_I2C_Mem_Write_IT+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	4618      	mov	r0, r3
 8002874:	3710      	adds	r7, #16
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	ffff0000 	.word	0xffff0000
 8002880:	08002b51 	.word	0x08002b51
 8002884:	80002000 	.word	0x80002000

08002888 <HAL_I2C_Mem_Read_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                      uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af02      	add	r7, sp, #8
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	4608      	mov	r0, r1
 8002892:	4611      	mov	r1, r2
 8002894:	461a      	mov	r2, r3
 8002896:	4603      	mov	r3, r0
 8002898:	817b      	strh	r3, [r7, #10]
 800289a:	460b      	mov	r3, r1
 800289c:	813b      	strh	r3, [r7, #8]
 800289e:	4613      	mov	r3, r2
 80028a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	d166      	bne.n	800297c <HAL_I2C_Mem_Read_IT+0xf4>
  {
    if ((pData == NULL) || (Size == 0U))
 80028ae:	69bb      	ldr	r3, [r7, #24]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d002      	beq.n	80028ba <HAL_I2C_Mem_Read_IT+0x32>
 80028b4:	8bbb      	ldrh	r3, [r7, #28]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d105      	bne.n	80028c6 <HAL_I2C_Mem_Read_IT+0x3e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028c0:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e05b      	b.n	800297e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80028d4:	d101      	bne.n	80028da <HAL_I2C_Mem_Read_IT+0x52>
    {
      return HAL_BUSY;
 80028d6:	2302      	movs	r3, #2
 80028d8:	e051      	b.n	800297e <HAL_I2C_Mem_Read_IT+0xf6>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_I2C_Mem_Read_IT+0x60>
 80028e4:	2302      	movs	r3, #2
 80028e6:	e04a      	b.n	800297e <HAL_I2C_Mem_Read_IT+0xf6>
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2222      	movs	r2, #34	@ 0x22
 80028f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2240      	movs	r2, #64	@ 0x40
 80028fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8bba      	ldrh	r2, [r7, #28]
 8002910:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4a1c      	ldr	r2, [pc, #112]	@ (8002988 <HAL_I2C_Mem_Read_IT+0x100>)
 8002916:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Mem_ISR_IT;
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4a1c      	ldr	r2, [pc, #112]	@ (800298c <HAL_I2C_Mem_Read_IT+0x104>)
 800291c:	635a      	str	r2, [r3, #52]	@ 0x34
    hi2c->Devaddress  = DevAddress;
 800291e:	897a      	ldrh	r2, [r7, #10]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* If Memory address size is 8Bit */
    if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002924:	88fb      	ldrh	r3, [r7, #6]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d109      	bne.n	800293e <HAL_I2C_Mem_Read_IT+0xb6>
    {
      /* Prefetch Memory Address */
      hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800292a:	893b      	ldrh	r3, [r7, #8]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f04f 32ff 	mov.w	r2, #4294967295
 800293a:	651a      	str	r2, [r3, #80]	@ 0x50
 800293c:	e00b      	b.n	8002956 <HAL_I2C_Mem_Read_IT+0xce>
    }
    /* If Memory address size is 16Bit */
    else
    {
      /* Prefetch Memory Address (MSB part, LSB will be manage through interrupt) */
      hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800293e:	893b      	ldrh	r3, [r7, #8]
 8002940:	0a1b      	lsrs	r3, r3, #8
 8002942:	b29b      	uxth	r3, r3
 8002944:	b2da      	uxtb	r2, r3
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Prepare Memaddress buffer for LSB part */
      hi2c->Memaddress = I2C_MEM_ADD_LSB(MemAddress);
 800294c:	893b      	ldrh	r3, [r7, #8]
 800294e:	b2db      	uxtb	r3, r3
 8002950:	461a      	mov	r2, r3
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* Send Slave Address and Memory Address */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	8979      	ldrh	r1, [r7, #10]
 800295c:	4b0c      	ldr	r3, [pc, #48]	@ (8002990 <HAL_I2C_Mem_Read_IT+0x108>)
 800295e:	9300      	str	r3, [sp, #0]
 8002960:	2300      	movs	r3, #0
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f001 faf2 	bl	8003f4c <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002970:	2101      	movs	r1, #1
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f001 fb1c 	bl	8003fb0 <I2C_Enable_IRQ>

    return HAL_OK;
 8002978:	2300      	movs	r3, #0
 800297a:	e000      	b.n	800297e <HAL_I2C_Mem_Read_IT+0xf6>
  }
  else
  {
    return HAL_BUSY;
 800297c:	2302      	movs	r3, #2
  }
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	ffff0000 	.word	0xffff0000
 800298c:	08002b51 	.word	0x08002b51
 8002990:	80002000 	.word	0x80002000

08002994 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b8:	68ba      	ldr	r2, [r7, #8]
 80029ba:	68f9      	ldr	r1, [r7, #12]
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
  }
}
 80029c0:	bf00      	nop
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00f      	beq.n	8002a0a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f8:	f043 0201 	orr.w	r2, r3, #1
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a08:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00f      	beq.n	8002a34 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d00a      	beq.n	8002a34 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a22:	f043 0208 	orr.w	r2, r3, #8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a32:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00f      	beq.n	8002a5e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a4c:	f043 0202 	orr.w	r2, r3, #2
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a5c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 030b 	and.w	r3, r3, #11
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002a6e:	68f9      	ldr	r1, [r7, #12]
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f001 f911 	bl	8003c98 <I2C_ITError>
  }
}
 8002a76:	bf00      	nop
 8002a78:	3718      	adds	r7, #24
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	b083      	sub	sp, #12
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002aae:	bf00      	nop
 8002ab0:	370c      	adds	r7, #12
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr

08002aba <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aba:	b480      	push	{r7}
 8002abc:	b083      	sub	sp, #12
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b083      	sub	sp, #12
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	6078      	str	r0, [r7, #4]
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	70fb      	strb	r3, [r7, #3]
 8002ada:	4613      	mov	r3, r2
 8002adc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002ade:	bf00      	nop
 8002ae0:	370c      	adds	r7, #12
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr

08002aea <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr

08002b3a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr
	...

08002b50 <I2C_Mem_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                        uint32_t ITSources)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b088      	sub	sp, #32
 8002b54:	af02      	add	r7, sp, #8
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8002b5c:	4b8d      	ldr	r3, [pc, #564]	@ (8002d94 <I2C_Mem_ISR_IT+0x244>)
 8002b5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <I2C_Mem_ISR_IT+0x22>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e10c      	b.n	8002d8c <I2C_Mem_ISR_IT+0x23c>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d012      	beq.n	8002baa <I2C_Mem_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d00d      	beq.n	8002baa <I2C_Mem_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2210      	movs	r2, #16
 8002b94:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9a:	f043 0204 	orr.w	r2, r3, #4
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002ba2:	68f8      	ldr	r0, [r7, #12]
 8002ba4:	f001 f98f 	bl	8003ec6 <I2C_Flush_TXDR>
 8002ba8:	e0dd      	b.n	8002d66 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d022      	beq.n	8002bfa <I2C_Mem_ISR_IT+0xaa>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01d      	beq.n	8002bfa <I2C_Mem_ISR_IT+0xaa>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	613b      	str	r3, [r7, #16]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd0:	b2d2      	uxtb	r2, r2
 8002bd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002bf8:	e0b5      	b.n	8002d66 <I2C_Mem_ISR_IT+0x216>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	f003 0302 	and.w	r3, r3, #2
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d02c      	beq.n	8002c5e <I2C_Mem_ISR_IT+0x10e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d027      	beq.n	8002c5e <I2C_Mem_ISR_IT+0x10e>
  {
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c16:	d118      	bne.n	8002c4a <I2C_Mem_ISR_IT+0xfa>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c1c:	781a      	ldrb	r2, [r3, #0]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c28:	1c5a      	adds	r2, r3, #1
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c32:	3b01      	subs	r3, #1
 8002c34:	b29a      	uxth	r2, r3
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	3b01      	subs	r3, #1
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002c48:	e08d      	b.n	8002d66 <I2C_Mem_ISR_IT+0x216>
    }
    else
    {
      /* Write LSB part of Memory Address */
      hi2c->Instance->TXDR = hi2c->Memaddress;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002c52:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Reset Memaddress content */
      hi2c->Memaddress = 0xFFFFFFFFU;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	f04f 32ff 	mov.w	r2, #4294967295
 8002c5a:	651a      	str	r2, [r3, #80]	@ 0x50
    if (hi2c->Memaddress == 0xFFFFFFFFU)
 8002c5c:	e083      	b.n	8002d66 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d03c      	beq.n	8002ce2 <I2C_Mem_ISR_IT+0x192>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d037      	beq.n	8002ce2 <I2C_Mem_ISR_IT+0x192>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02c      	beq.n	8002cd6 <I2C_Mem_ISR_IT+0x186>
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d128      	bne.n	8002cd6 <I2C_Mem_ISR_IT+0x186>
    {
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	2bff      	cmp	r3, #255	@ 0xff
 8002c8c:	d910      	bls.n	8002cb0 <I2C_Mem_ISR_IT+0x160>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	22ff      	movs	r2, #255	@ 0xff
 8002c92:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c98:	b299      	uxth	r1, r3
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	9300      	str	r3, [sp, #0]
 8002ca4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f001 f94f 	bl	8003f4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cae:	e017      	b.n	8002ce0 <I2C_Mem_ISR_IT+0x190>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cb4:	b29a      	uxth	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cbe:	b299      	uxth	r1, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cc4:	b2da      	uxtb	r2, r3
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f001 f93c 	bl	8003f4c <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002cd4:	e004      	b.n	8002ce0 <I2C_Mem_ISR_IT+0x190>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002cd6:	2140      	movs	r1, #64	@ 0x40
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 ffdd 	bl	8003c98 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002cde:	e042      	b.n	8002d66 <I2C_Mem_ISR_IT+0x216>
 8002ce0:	e041      	b.n	8002d66 <I2C_Mem_ISR_IT+0x216>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d03c      	beq.n	8002d66 <I2C_Mem_ISR_IT+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d037      	beq.n	8002d66 <I2C_Mem_ISR_IT+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	68f8      	ldr	r0, [r7, #12]
 8002cfa:	f001 f9dd 	bl	80040b8 <I2C_Disable_IRQ>

    /* Enable ERR, TC, STOP, NACK and RXI interrupts */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002cfe:	2102      	movs	r1, #2
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f001 f955 	bl	8003fb0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b22      	cmp	r3, #34	@ 0x22
 8002d10:	d101      	bne.n	8002d16 <I2C_Mem_ISR_IT+0x1c6>
    {
      direction = I2C_GENERATE_START_READ;
 8002d12:	4b21      	ldr	r3, [pc, #132]	@ (8002d98 <I2C_Mem_ISR_IT+0x248>)
 8002d14:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2bff      	cmp	r3, #255	@ 0xff
 8002d1e:	d910      	bls.n	8002d42 <I2C_Mem_ISR_IT+0x1f2>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	22ff      	movs	r2, #255	@ 0xff
 8002d24:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d2a:	b299      	uxth	r1, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d30:	b2da      	uxtb	r2, r3
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f001 f906 	bl	8003f4c <I2C_TransferConfig>
 8002d40:	e011      	b.n	8002d66 <I2C_Mem_ISR_IT+0x216>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d50:	b299      	uxth	r1, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	9300      	str	r3, [sp, #0]
 8002d5c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f001 f8f3 	bl	8003f4c <I2C_TransferConfig>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	f003 0320 	and.w	r3, r3, #32
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <I2C_Mem_ISR_IT+0x232>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d003      	beq.n	8002d82 <I2C_Mem_ISR_IT+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8002d7a:	6939      	ldr	r1, [r7, #16]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fd0b 	bl	8003798 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002d8a:	2300      	movs	r3, #0
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	3718      	adds	r7, #24
 8002d90:	46bd      	mov	sp, r7
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	80002000 	.word	0x80002000
 8002d98:	80002400 	.word	0x80002400

08002d9c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d101      	bne.n	8002dc0 <I2C_Slave_ISR_IT+0x24>
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	e0e2      	b.n	8002f86 <I2C_Slave_ISR_IT+0x1ea>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d004      	beq.n	8002de6 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002ddc:	6939      	ldr	r1, [r7, #16]
 8002dde:	68f8      	ldr	r0, [r7, #12]
 8002de0:	f000 fda2 	bl	8003928 <I2C_ITSlaveCplt>
 8002de4:	e0ca      	b.n	8002f7c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d04b      	beq.n	8002e88 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d046      	beq.n	8002e88 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dfe:	b29b      	uxth	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d128      	bne.n	8002e56 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b28      	cmp	r3, #40	@ 0x28
 8002e0e:	d108      	bne.n	8002e22 <I2C_Slave_ISR_IT+0x86>
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e16:	d104      	bne.n	8002e22 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002e18:	6939      	ldr	r1, [r7, #16]
 8002e1a:	68f8      	ldr	r0, [r7, #12]
 8002e1c:	f000 fee8 	bl	8003bf0 <I2C_ITListenCplt>
 8002e20:	e031      	b.n	8002e86 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b29      	cmp	r3, #41	@ 0x29
 8002e2c:	d10e      	bne.n	8002e4c <I2C_Slave_ISR_IT+0xb0>
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e34:	d00a      	beq.n	8002e4c <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f001 f841 	bl	8003ec6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fc4b 	bl	80036e0 <I2C_ITSlaveSeqCplt>
 8002e4a:	e01c      	b.n	8002e86 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2210      	movs	r2, #16
 8002e52:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e54:	e08f      	b.n	8002f76 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	f043 0204 	orr.w	r2, r3, #4
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <I2C_Slave_ISR_IT+0xdc>
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e76:	d17e      	bne.n	8002f76 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 ff0a 	bl	8003c98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e84:	e077      	b.n	8002f76 <I2C_Slave_ISR_IT+0x1da>
 8002e86:	e076      	b.n	8002f76 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	f003 0304 	and.w	r3, r3, #4
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d02f      	beq.n	8002ef2 <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d02a      	beq.n	8002ef2 <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ea0:	b29b      	uxth	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb0:	b2d2      	uxtb	r2, r2
 8002eb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb8:	1c5a      	adds	r2, r3, #1
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d14b      	bne.n	8002f7a <I2C_Slave_ISR_IT+0x1de>
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002ee8:	d047      	beq.n	8002f7a <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002eea:	68f8      	ldr	r0, [r7, #12]
 8002eec:	f000 fbf8 	bl	80036e0 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ef0:	e043      	b.n	8002f7a <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f003 0308 	and.w	r3, r3, #8
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d009      	beq.n	8002f10 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d004      	beq.n	8002f10 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002f06:	6939      	ldr	r1, [r7, #16]
 8002f08:	68f8      	ldr	r0, [r7, #12]
 8002f0a:	f000 fb28 	bl	800355e <I2C_ITAddrCplt>
 8002f0e:	e035      	b.n	8002f7c <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d030      	beq.n	8002f7c <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d02b      	beq.n	8002f7c <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d018      	beq.n	8002f60 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f32:	781a      	ldrb	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	1c5a      	adds	r2, r3, #1
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002f5e:	e00d      	b.n	8002f7c <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f66:	d002      	beq.n	8002f6e <I2C_Slave_ISR_IT+0x1d2>
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f6e:	68f8      	ldr	r0, [r7, #12]
 8002f70:	f000 fbb6 	bl	80036e0 <I2C_ITSlaveSeqCplt>
 8002f74:	e002      	b.n	8002f7c <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8002f76:	bf00      	nop
 8002f78:	e000      	b.n	8002f7c <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8002f7a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b088      	sub	sp, #32
 8002f92:	af02      	add	r7, sp, #8
 8002f94:	60f8      	str	r0, [r7, #12]
 8002f96:	60b9      	str	r1, [r7, #8]
 8002f98:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d101      	bne.n	8002fa8 <I2C_Master_ISR_DMA+0x1a>
 8002fa4:	2302      	movs	r3, #2
 8002fa6:	e0d9      	b.n	800315c <I2C_Master_ISR_DMA+0x1ce>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	f003 0310 	and.w	r3, r3, #16
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d016      	beq.n	8002fe8 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fd0:	f043 0204 	orr.w	r2, r3, #4
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002fd8:	2120      	movs	r1, #32
 8002fda:	68f8      	ldr	r0, [r7, #12]
 8002fdc:	f000 ffe8 	bl	8003fb0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002fe0:	68f8      	ldr	r0, [r7, #12]
 8002fe2:	f000 ff70 	bl	8003ec6 <I2C_Flush_TXDR>
 8002fe6:	e0b4      	b.n	8003152 <I2C_Master_ISR_DMA+0x1c4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d071      	beq.n	80030d6 <I2C_Master_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d06c      	beq.n	80030d6 <I2C_Master_ISR_DMA+0x148>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800300a:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d04e      	beq.n	80030b4 <I2C_Master_ISR_DMA+0x126>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	b29b      	uxth	r3, r3
 800301e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003022:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003028:	b29b      	uxth	r3, r3
 800302a:	2bff      	cmp	r3, #255	@ 0xff
 800302c:	d906      	bls.n	800303c <I2C_Master_ISR_DMA+0xae>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	22ff      	movs	r2, #255	@ 0xff
 8003032:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8003034:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e010      	b.n	800305e <I2C_Master_ISR_DMA+0xd0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800304e:	d003      	beq.n	8003058 <I2C_Master_ISR_DMA+0xca>
        {
          xfermode = hi2c->XferOptions;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003054:	617b      	str	r3, [r7, #20]
 8003056:	e002      	b.n	800305e <I2C_Master_ISR_DMA+0xd0>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8003058:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800305c:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003062:	b2da      	uxtb	r2, r3
 8003064:	8a79      	ldrh	r1, [r7, #18]
 8003066:	2300      	movs	r3, #0
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	68f8      	ldr	r0, [r7, #12]
 800306e:	f000 ff6d 	bl	8003f4c <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	b29a      	uxth	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800308a:	b2db      	uxtb	r3, r3
 800308c:	2b22      	cmp	r3, #34	@ 0x22
 800308e:	d108      	bne.n	80030a2 <I2C_Master_ISR_DMA+0x114>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800309e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80030a0:	e057      	b.n	8003152 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030b0:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80030b2:	e04e      	b.n	8003152 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030be:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030c2:	d003      	beq.n	80030cc <I2C_Master_ISR_DMA+0x13e>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80030c4:	68f8      	ldr	r0, [r7, #12]
 80030c6:	f000 face 	bl	8003666 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80030ca:	e042      	b.n	8003152 <I2C_Master_ISR_DMA+0x1c4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80030cc:	2140      	movs	r1, #64	@ 0x40
 80030ce:	68f8      	ldr	r0, [r7, #12]
 80030d0:	f000 fde2 	bl	8003c98 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80030d4:	e03d      	b.n	8003152 <I2C_Master_ISR_DMA+0x1c4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d028      	beq.n	8003132 <I2C_Master_ISR_DMA+0x1a4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d023      	beq.n	8003132 <I2C_Master_ISR_DMA+0x1a4>
  {
    if (hi2c->XferCount == 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d119      	bne.n	8003128 <I2C_Master_ISR_DMA+0x19a>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030fe:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003102:	d025      	beq.n	8003150 <I2C_Master_ISR_DMA+0x1c2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003108:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800310c:	d108      	bne.n	8003120 <I2C_Master_ISR_DMA+0x192>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800311c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800311e:	e017      	b.n	8003150 <I2C_Master_ISR_DMA+0x1c2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 faa0 	bl	8003666 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8003126:	e013      	b.n	8003150 <I2C_Master_ISR_DMA+0x1c2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8003128:	2140      	movs	r1, #64	@ 0x40
 800312a:	68f8      	ldr	r0, [r7, #12]
 800312c:	f000 fdb4 	bl	8003c98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003130:	e00e      	b.n	8003150 <I2C_Master_ISR_DMA+0x1c2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	f003 0320 	and.w	r3, r3, #32
 8003138:	2b00      	cmp	r3, #0
 800313a:	d00a      	beq.n	8003152 <I2C_Master_ISR_DMA+0x1c4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003142:	2b00      	cmp	r3, #0
 8003144:	d005      	beq.n	8003152 <I2C_Master_ISR_DMA+0x1c4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fb25 	bl	8003798 <I2C_ITMasterCplt>
 800314e:	e000      	b.n	8003152 <I2C_Master_ISR_DMA+0x1c4>
    if (hi2c->XferCount == 0U)
 8003150:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	3718      	adds	r7, #24
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af02      	add	r7, sp, #8
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8003170:	4b8d      	ldr	r3, [pc, #564]	@ (80033a8 <I2C_Mem_ISR_DMA+0x244>)
 8003172:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <I2C_Mem_ISR_DMA+0x1e>
 800317e:	2302      	movs	r3, #2
 8003180:	e10e      	b.n	80033a0 <I2C_Mem_ISR_DMA+0x23c>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f003 0310 	and.w	r3, r3, #16
 8003190:	2b00      	cmp	r3, #0
 8003192:	d016      	beq.n	80031c2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800319a:	2b00      	cmp	r3, #0
 800319c:	d011      	beq.n	80031c2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	2210      	movs	r2, #16
 80031a4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031aa:	f043 0204 	orr.w	r2, r3, #4
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80031b2:	2120      	movs	r1, #32
 80031b4:	68f8      	ldr	r0, [r7, #12]
 80031b6:	f000 fefb 	bl	8003fb0 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 fe83 	bl	8003ec6 <I2C_Flush_TXDR>
 80031c0:	e0e9      	b.n	8003396 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d009      	beq.n	80031ea <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80031de:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f04f 32ff 	mov.w	r2, #4294967295
 80031e6:	651a      	str	r2, [r3, #80]	@ 0x50
 80031e8:	e0d5      	b.n	8003396 <I2C_Mem_ISR_DMA+0x232>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d05f      	beq.n	80032b4 <I2C_Mem_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d05a      	beq.n	80032b4 <I2C_Mem_ISR_DMA+0x150>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80031fe:	2101      	movs	r1, #1
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 ff59 	bl	80040b8 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8003206:	2110      	movs	r1, #16
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f000 fed1 	bl	8003fb0 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003212:	b29b      	uxth	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d048      	beq.n	80032aa <I2C_Mem_ISR_DMA+0x146>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800321c:	b29b      	uxth	r3, r3
 800321e:	2bff      	cmp	r3, #255	@ 0xff
 8003220:	d910      	bls.n	8003244 <I2C_Mem_ISR_DMA+0xe0>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	22ff      	movs	r2, #255	@ 0xff
 8003226:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800322c:	b299      	uxth	r1, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003232:	b2da      	uxtb	r2, r3
 8003234:	2300      	movs	r3, #0
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 fe85 	bl	8003f4c <I2C_TransferConfig>
 8003242:	e011      	b.n	8003268 <I2C_Mem_ISR_DMA+0x104>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003248:	b29a      	uxth	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003252:	b299      	uxth	r1, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003258:	b2da      	uxtb	r2, r3
 800325a:	2300      	movs	r3, #0
 800325c:	9300      	str	r3, [sp, #0]
 800325e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003262:	68f8      	ldr	r0, [r7, #12]
 8003264:	f000 fe72 	bl	8003f4c <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800326c:	b29a      	uxth	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	b29a      	uxth	r2, r3
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b22      	cmp	r3, #34	@ 0x22
 8003284:	d108      	bne.n	8003298 <I2C_Mem_ISR_DMA+0x134>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003294:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8003296:	e07e      	b.n	8003396 <I2C_Mem_ISR_DMA+0x232>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	681a      	ldr	r2, [r3, #0]
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032a6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80032a8:	e075      	b.n	8003396 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80032aa:	2140      	movs	r1, #64	@ 0x40
 80032ac:	68f8      	ldr	r0, [r7, #12]
 80032ae:	f000 fcf3 	bl	8003c98 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80032b2:	e070      	b.n	8003396 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d05d      	beq.n	800337a <I2C_Mem_ISR_DMA+0x216>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d058      	beq.n	800337a <I2C_Mem_ISR_DMA+0x216>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80032c8:	2101      	movs	r1, #1
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 fef4 	bl	80040b8 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80032d0:	2110      	movs	r1, #16
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 fe6c 	bl	8003fb0 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b22      	cmp	r3, #34	@ 0x22
 80032e2:	d101      	bne.n	80032e8 <I2C_Mem_ISR_DMA+0x184>
    {
      direction = I2C_GENERATE_START_READ;
 80032e4:	4b31      	ldr	r3, [pc, #196]	@ (80033ac <I2C_Mem_ISR_DMA+0x248>)
 80032e6:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	2bff      	cmp	r3, #255	@ 0xff
 80032f0:	d910      	bls.n	8003314 <I2C_Mem_ISR_DMA+0x1b0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	22ff      	movs	r2, #255	@ 0xff
 80032f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032fc:	b299      	uxth	r1, r3
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003302:	b2da      	uxtb	r2, r3
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 fe1d 	bl	8003f4c <I2C_TransferConfig>
 8003312:	e011      	b.n	8003338 <I2C_Mem_ISR_DMA+0x1d4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003322:	b299      	uxth	r1, r3
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003328:	b2da      	uxtb	r2, r3
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fe0a 	bl	8003f4c <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	b29a      	uxth	r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b22      	cmp	r3, #34	@ 0x22
 8003354:	d108      	bne.n	8003368 <I2C_Mem_ISR_DMA+0x204>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003364:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003366:	e016      	b.n	8003396 <I2C_Mem_ISR_DMA+0x232>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003376:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003378:	e00d      	b.n	8003396 <I2C_Mem_ISR_DMA+0x232>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d008      	beq.n	8003396 <I2C_Mem_ISR_DMA+0x232>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800338a:	2b00      	cmp	r3, #0
 800338c:	d003      	beq.n	8003396 <I2C_Mem_ISR_DMA+0x232>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800338e:	68b9      	ldr	r1, [r7, #8]
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 fa01 	bl	8003798 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800339e:	2300      	movs	r3, #0
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	80002000 	.word	0x80002000
 80033ac:	80002400 	.word	0x80002400

080033b0 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b088      	sub	sp, #32
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <I2C_Slave_ISR_DMA+0x24>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0c0      	b.n	8003556 <I2C_Slave_ISR_DMA+0x1a6>
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	f003 0320 	and.w	r3, r3, #32
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d004      	beq.n	80033fa <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80033f0:	68b9      	ldr	r1, [r7, #8]
 80033f2:	68f8      	ldr	r0, [r7, #12]
 80033f4:	f000 fa98 	bl	8003928 <I2C_ITSlaveCplt>
 80033f8:	e0a8      	b.n	800354c <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	f000 8095 	beq.w	8003530 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 808f 	beq.w	8003530 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8003422:	2b00      	cmp	r3, #0
 8003424:	d07d      	beq.n	8003522 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800342a:	2b00      	cmp	r3, #0
 800342c:	d00c      	beq.n	8003448 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d007      	beq.n	8003448 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d101      	bne.n	8003448 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8003444:	2301      	movs	r3, #1
 8003446:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800344c:	2b00      	cmp	r3, #0
 800344e:	d00c      	beq.n	800346a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d007      	beq.n	800346a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8003466:	2301      	movs	r3, #1
 8003468:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d128      	bne.n	80034c2 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003476:	b2db      	uxtb	r3, r3
 8003478:	2b28      	cmp	r3, #40	@ 0x28
 800347a:	d108      	bne.n	800348e <I2C_Slave_ISR_DMA+0xde>
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003482:	d104      	bne.n	800348e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8003484:	68b9      	ldr	r1, [r7, #8]
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f000 fbb2 	bl	8003bf0 <I2C_ITListenCplt>
 800348c:	e048      	b.n	8003520 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b29      	cmp	r3, #41	@ 0x29
 8003498:	d10e      	bne.n	80034b8 <I2C_Slave_ISR_DMA+0x108>
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80034a0:	d00a      	beq.n	80034b8 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2210      	movs	r2, #16
 80034a8:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f000 fd0b 	bl	8003ec6 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 f915 	bl	80036e0 <I2C_ITSlaveSeqCplt>
 80034b6:	e033      	b.n	8003520 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2210      	movs	r2, #16
 80034be:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80034c0:	e034      	b.n	800352c <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2210      	movs	r2, #16
 80034c8:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	f043 0204 	orr.w	r2, r3, #4
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034dc:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d003      	beq.n	80034ec <I2C_Slave_ISR_DMA+0x13c>
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034ea:	d11f      	bne.n	800352c <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80034ec:	7dfb      	ldrb	r3, [r7, #23]
 80034ee:	2b21      	cmp	r3, #33	@ 0x21
 80034f0:	d002      	beq.n	80034f8 <I2C_Slave_ISR_DMA+0x148>
 80034f2:	7dfb      	ldrb	r3, [r7, #23]
 80034f4:	2b29      	cmp	r3, #41	@ 0x29
 80034f6:	d103      	bne.n	8003500 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2221      	movs	r2, #33	@ 0x21
 80034fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80034fe:	e008      	b.n	8003512 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003500:	7dfb      	ldrb	r3, [r7, #23]
 8003502:	2b22      	cmp	r3, #34	@ 0x22
 8003504:	d002      	beq.n	800350c <I2C_Slave_ISR_DMA+0x15c>
 8003506:	7dfb      	ldrb	r3, [r7, #23]
 8003508:	2b2a      	cmp	r3, #42	@ 0x2a
 800350a:	d102      	bne.n	8003512 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2222      	movs	r2, #34	@ 0x22
 8003510:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	4619      	mov	r1, r3
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 fbbd 	bl	8003c98 <I2C_ITError>
      if (treatdmanack == 1U)
 800351e:	e005      	b.n	800352c <I2C_Slave_ISR_DMA+0x17c>
 8003520:	e004      	b.n	800352c <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	2210      	movs	r2, #16
 8003528:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800352a:	e00f      	b.n	800354c <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 800352c:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800352e:	e00d      	b.n	800354c <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f003 0308 	and.w	r3, r3, #8
 8003536:	2b00      	cmp	r3, #0
 8003538:	d008      	beq.n	800354c <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8003544:	68b9      	ldr	r1, [r7, #8]
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f809 	bl	800355e <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3720      	adds	r7, #32
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b084      	sub	sp, #16
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356e:	b2db      	uxtb	r3, r3
 8003570:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003574:	2b28      	cmp	r3, #40	@ 0x28
 8003576:	d16a      	bne.n	800364e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	699b      	ldr	r3, [r3, #24]
 800357e:	0c1b      	lsrs	r3, r3, #16
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	0c1b      	lsrs	r3, r3, #16
 8003590:	b29b      	uxth	r3, r3
 8003592:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8003596:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	b29b      	uxth	r3, r3
 80035a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035a4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 80035b2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d138      	bne.n	800362e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80035bc:	897b      	ldrh	r3, [r7, #10]
 80035be:	09db      	lsrs	r3, r3, #7
 80035c0:	b29a      	uxth	r2, r3
 80035c2:	89bb      	ldrh	r3, [r7, #12]
 80035c4:	4053      	eors	r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	f003 0306 	and.w	r3, r3, #6
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d11c      	bne.n	800360a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80035d0:	897b      	ldrh	r3, [r7, #10]
 80035d2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d13b      	bne.n	800365e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	2208      	movs	r2, #8
 80035f2:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035fc:	89ba      	ldrh	r2, [r7, #12]
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	4619      	mov	r1, r3
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff fa63 	bl	8002ace <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003608:	e029      	b.n	800365e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800360a:	893b      	ldrh	r3, [r7, #8]
 800360c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800360e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003612:	6878      	ldr	r0, [r7, #4]
 8003614:	f000 fd50 	bl	80040b8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003620:	89ba      	ldrh	r2, [r7, #12]
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fa51 	bl	8002ace <HAL_I2C_AddrCallback>
}
 800362c:	e017      	b.n	800365e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800362e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fd40 	bl	80040b8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003640:	89ba      	ldrh	r2, [r7, #12]
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	4619      	mov	r1, r3
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff fa41 	bl	8002ace <HAL_I2C_AddrCallback>
}
 800364c:	e007      	b.n	800365e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2208      	movs	r2, #8
 8003654:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
}
 800365e:	bf00      	nop
 8003660:	3710      	adds	r7, #16
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b21      	cmp	r3, #33	@ 0x21
 8003680:	d115      	bne.n	80036ae <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2211      	movs	r2, #17
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2200      	movs	r2, #0
 8003694:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003696:	2101      	movs	r1, #1
 8003698:	6878      	ldr	r0, [r7, #4]
 800369a:	f000 fd0d 	bl	80040b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7ff f9e9 	bl	8002a7e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036ac:	e014      	b.n	80036d8 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2212      	movs	r2, #18
 80036ba:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80036c2:	2102      	movs	r1, #2
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 fcf7 	bl	80040b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f7ff f9dd 	bl	8002a92 <HAL_I2C_MasterRxCpltCallback>
}
 80036d8:	bf00      	nop
 80036da:	3708      	adds	r7, #8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	e00c      	b.n	800372e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d007      	beq.n	800372e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800372c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003734:	b2db      	uxtb	r3, r3
 8003736:	2b29      	cmp	r3, #41	@ 0x29
 8003738:	d112      	bne.n	8003760 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2228      	movs	r2, #40	@ 0x28
 800373e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2221      	movs	r2, #33	@ 0x21
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003748:	2101      	movs	r1, #1
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 fcb4 	bl	80040b8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff f9a4 	bl	8002aa6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800375e:	e017      	b.n	8003790 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b2a      	cmp	r3, #42	@ 0x2a
 800376a:	d111      	bne.n	8003790 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2228      	movs	r2, #40	@ 0x28
 8003770:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2222      	movs	r2, #34	@ 0x22
 8003778:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800377a:	2102      	movs	r1, #2
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 fc9b 	bl	80040b8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff f995 	bl	8002aba <HAL_I2C_SlaveRxCpltCallback>
}
 8003790:	bf00      	nop
 8003792:	3710      	adds	r7, #16
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2220      	movs	r2, #32
 80037ac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	2b21      	cmp	r3, #33	@ 0x21
 80037b8:	d107      	bne.n	80037ca <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80037ba:	2101      	movs	r1, #1
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fc7b 	bl	80040b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2211      	movs	r2, #17
 80037c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80037c8:	e00c      	b.n	80037e4 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b22      	cmp	r3, #34	@ 0x22
 80037d4:	d106      	bne.n	80037e4 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80037d6:	2102      	movs	r1, #2
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fc6d 	bl	80040b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2212      	movs	r2, #18
 80037e2:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	4b4c      	ldr	r3, [pc, #304]	@ (8003920 <I2C_ITMasterCplt+0x188>)
 80037f0:	400b      	ands	r3, r1
 80037f2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a49      	ldr	r2, [pc, #292]	@ (8003924 <I2C_ITMasterCplt+0x18c>)
 80037fe:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2210      	movs	r2, #16
 8003810:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003816:	f043 0204 	orr.w	r2, r3, #4
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b60      	cmp	r3, #96	@ 0x60
 8003828:	d10a      	bne.n	8003840 <I2C_ITMasterCplt+0xa8>
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	d005      	beq.n	8003840 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800383a:	b2db      	uxtb	r3, r3
 800383c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800383e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fb40 	bl	8003ec6 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800384a:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b60      	cmp	r3, #96	@ 0x60
 8003856:	d002      	beq.n	800385e <I2C_ITMasterCplt+0xc6>
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d006      	beq.n	800386c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f000 fa17 	bl	8003c98 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800386a:	e054      	b.n	8003916 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b21      	cmp	r3, #33	@ 0x21
 8003876:	d124      	bne.n	80038c2 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b40      	cmp	r3, #64	@ 0x40
 8003890:	d10b      	bne.n	80038aa <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2200      	movs	r2, #0
 800389e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff f92b 	bl	8002afe <HAL_I2C_MemTxCpltCallback>
}
 80038a8:	e035      	b.n	8003916 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7ff f8df 	bl	8002a7e <HAL_I2C_MasterTxCpltCallback>
}
 80038c0:	e029      	b.n	8003916 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	2b22      	cmp	r3, #34	@ 0x22
 80038cc:	d123      	bne.n	8003916 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b40      	cmp	r3, #64	@ 0x40
 80038e6:	d10b      	bne.n	8003900 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff f90a 	bl	8002b12 <HAL_I2C_MemRxCpltCallback>
}
 80038fe:	e00a      	b.n	8003916 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      __HAL_UNLOCK(hi2c);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	f7ff f8be 	bl	8002a92 <HAL_I2C_MasterRxCpltCallback>
}
 8003916:	bf00      	nop
 8003918:	3718      	adds	r7, #24
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	fe00e800 	.word	0xfe00e800
 8003924:	ffff0000 	.word	0xffff0000

08003928 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b086      	sub	sp, #24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003942:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800394a:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2220      	movs	r2, #32
 8003952:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003954:	7afb      	ldrb	r3, [r7, #11]
 8003956:	2b21      	cmp	r3, #33	@ 0x21
 8003958:	d002      	beq.n	8003960 <I2C_ITSlaveCplt+0x38>
 800395a:	7afb      	ldrb	r3, [r7, #11]
 800395c:	2b29      	cmp	r3, #41	@ 0x29
 800395e:	d108      	bne.n	8003972 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003960:	f248 0101 	movw	r1, #32769	@ 0x8001
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 fba7 	bl	80040b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2221      	movs	r2, #33	@ 0x21
 800396e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003970:	e019      	b.n	80039a6 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003972:	7afb      	ldrb	r3, [r7, #11]
 8003974:	2b22      	cmp	r3, #34	@ 0x22
 8003976:	d002      	beq.n	800397e <I2C_ITSlaveCplt+0x56>
 8003978:	7afb      	ldrb	r3, [r7, #11]
 800397a:	2b2a      	cmp	r3, #42	@ 0x2a
 800397c:	d108      	bne.n	8003990 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800397e:	f248 0102 	movw	r1, #32770	@ 0x8002
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f000 fb98 	bl	80040b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2222      	movs	r2, #34	@ 0x22
 800398c:	631a      	str	r2, [r3, #48]	@ 0x30
 800398e:	e00a      	b.n	80039a6 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003990:	7afb      	ldrb	r3, [r7, #11]
 8003992:	2b28      	cmp	r3, #40	@ 0x28
 8003994:	d107      	bne.n	80039a6 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003996:	f248 0103 	movw	r1, #32771	@ 0x8003
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fb8c 	bl	80040b8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	685a      	ldr	r2, [r3, #4]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80039b4:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	6859      	ldr	r1, [r3, #4]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	4b89      	ldr	r3, [pc, #548]	@ (8003be8 <I2C_ITSlaveCplt+0x2c0>)
 80039c2:	400b      	ands	r3, r1
 80039c4:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f000 fa7d 	bl	8003ec6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d013      	beq.n	80039fe <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80039e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01f      	beq.n	8003a2e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b29a      	uxth	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80039fc:	e017      	b.n	8003a2e <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d012      	beq.n	8003a2e <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a16:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d006      	beq.n	8003a2e <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	f003 0304 	and.w	r3, r3, #4
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d020      	beq.n	8003a7a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	f023 0304 	bic.w	r3, r3, #4
 8003a3e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a52:	1c5a      	adds	r2, r3, #1
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00c      	beq.n	8003a7a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a64:	3b01      	subs	r3, #1
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	3b01      	subs	r3, #1
 8003a74:	b29a      	uxth	r2, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d005      	beq.n	8003a90 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a88:	f043 0204 	orr.w	r2, r3, #4
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	f003 0310 	and.w	r3, r3, #16
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d049      	beq.n	8003b2e <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d044      	beq.n	8003b2e <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d128      	bne.n	8003b00 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b28      	cmp	r3, #40	@ 0x28
 8003ab8:	d108      	bne.n	8003acc <I2C_ITSlaveCplt+0x1a4>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ac0:	d104      	bne.n	8003acc <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003ac2:	6979      	ldr	r1, [r7, #20]
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f893 	bl	8003bf0 <I2C_ITListenCplt>
 8003aca:	e030      	b.n	8003b2e <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b29      	cmp	r3, #41	@ 0x29
 8003ad6:	d10e      	bne.n	8003af6 <I2C_ITSlaveCplt+0x1ce>
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ade:	d00a      	beq.n	8003af6 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	2210      	movs	r2, #16
 8003ae6:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 f9ec 	bl	8003ec6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f7ff fdf6 	bl	80036e0 <I2C_ITSlaveSeqCplt>
 8003af4:	e01b      	b.n	8003b2e <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2210      	movs	r2, #16
 8003afc:	61da      	str	r2, [r3, #28]
 8003afe:	e016      	b.n	8003b2e <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2210      	movs	r2, #16
 8003b06:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <I2C_ITSlaveCplt+0x1fa>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b20:	d105      	bne.n	8003b2e <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	4619      	mov	r1, r3
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f8b5 	bl	8003c98 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d010      	beq.n	8003b66 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b48:	4619      	mov	r1, r3
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 f8a4 	bl	8003c98 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b28      	cmp	r3, #40	@ 0x28
 8003b5a:	d141      	bne.n	8003be0 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b5c:	6979      	ldr	r1, [r7, #20]
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f846 	bl	8003bf0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b64:	e03c      	b.n	8003be0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b6a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003b6e:	d014      	beq.n	8003b9a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7ff fdb5 	bl	80036e0 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a1c      	ldr	r2, [pc, #112]	@ (8003bec <I2C_ITSlaveCplt+0x2c4>)
 8003b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f7fe ffa9 	bl	8002aea <HAL_I2C_ListenCpltCallback>
}
 8003b98:	e022      	b.n	8003be0 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ba0:	b2db      	uxtb	r3, r3
 8003ba2:	2b22      	cmp	r3, #34	@ 0x22
 8003ba4:	d10e      	bne.n	8003bc4 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7fe ff7c 	bl	8002aba <HAL_I2C_SlaveRxCpltCallback>
}
 8003bc2:	e00d      	b.n	8003be0 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fe ff63 	bl	8002aa6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003be0:	bf00      	nop
 8003be2:	3718      	adds	r7, #24
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	fe00e800 	.word	0xfe00e800
 8003bec:	ffff0000 	.word	0xffff0000

08003bf0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b082      	sub	sp, #8
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a25      	ldr	r2, [pc, #148]	@ (8003c94 <I2C_ITListenCplt+0xa4>)
 8003bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferISR = NULL;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	f003 0304 	and.w	r3, r3, #4
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d022      	beq.n	8003c6c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	b2d2      	uxtb	r2, r2
 8003c32:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d012      	beq.n	8003c6c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c64:	f043 0204 	orr.w	r2, r3, #4
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c6c:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fa21 	bl	80040b8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2210      	movs	r2, #16
 8003c7c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f7fe ff2f 	bl	8002aea <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003c8c:	bf00      	nop
 8003c8e:	3708      	adds	r7, #8
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}
 8003c94:	ffff0000 	.word	0xffff0000

08003c98 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2200      	movs	r2, #0
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a6d      	ldr	r2, [pc, #436]	@ (8003e6c <I2C_ITError+0x1d4>)
 8003cb6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003cca:	7bfb      	ldrb	r3, [r7, #15]
 8003ccc:	2b28      	cmp	r3, #40	@ 0x28
 8003cce:	d005      	beq.n	8003cdc <I2C_ITError+0x44>
 8003cd0:	7bfb      	ldrb	r3, [r7, #15]
 8003cd2:	2b29      	cmp	r3, #41	@ 0x29
 8003cd4:	d002      	beq.n	8003cdc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003cd6:	7bfb      	ldrb	r3, [r7, #15]
 8003cd8:	2b2a      	cmp	r3, #42	@ 0x2a
 8003cda:	d10b      	bne.n	8003cf4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cdc:	2103      	movs	r1, #3
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f9ea 	bl	80040b8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2228      	movs	r2, #40	@ 0x28
 8003ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a60      	ldr	r2, [pc, #384]	@ (8003e70 <I2C_ITError+0x1d8>)
 8003cf0:	635a      	str	r2, [r3, #52]	@ 0x34
 8003cf2:	e030      	b.n	8003d56 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cf4:	f248 0103 	movw	r1, #32771	@ 0x8003
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 f9dd 	bl	80040b8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f8e1 	bl	8003ec6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b60      	cmp	r3, #96	@ 0x60
 8003d0e:	d01f      	beq.n	8003d50 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b20      	cmp	r3, #32
 8003d24:	d114      	bne.n	8003d50 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f003 0310 	and.w	r3, r3, #16
 8003d30:	2b10      	cmp	r3, #16
 8003d32:	d109      	bne.n	8003d48 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d40:	f043 0204 	orr.w	r2, r3, #4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2200      	movs	r2, #0
 8003d54:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d039      	beq.n	8003dd8 <I2C_ITError+0x140>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2b11      	cmp	r3, #17
 8003d68:	d002      	beq.n	8003d70 <I2C_ITError+0xd8>
 8003d6a:	68bb      	ldr	r3, [r7, #8]
 8003d6c:	2b21      	cmp	r3, #33	@ 0x21
 8003d6e:	d133      	bne.n	8003dd8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003d7e:	d107      	bne.n	8003d90 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003d8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7fe f9e6 	bl	8002166 <HAL_DMA_GetState>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d017      	beq.n	8003dd0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003da4:	4a33      	ldr	r2, [pc, #204]	@ (8003e74 <I2C_ITError+0x1dc>)
 8003da6:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7fe f8c0 	bl	8001f3a <HAL_DMA_Abort_IT>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d04d      	beq.n	8003e5c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dce:	e045      	b.n	8003e5c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f851 	bl	8003e78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dd6:	e041      	b.n	8003e5c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d039      	beq.n	8003e54 <I2C_ITError+0x1bc>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	2b12      	cmp	r3, #18
 8003de4:	d002      	beq.n	8003dec <I2C_ITError+0x154>
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	2b22      	cmp	r3, #34	@ 0x22
 8003dea:	d133      	bne.n	8003e54 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003df6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dfa:	d107      	bne.n	8003e0c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e0a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7fe f9a8 	bl	8002166 <HAL_DMA_GetState>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d017      	beq.n	8003e4c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e20:	4a14      	ldr	r2, [pc, #80]	@ (8003e74 <I2C_ITError+0x1dc>)
 8003e22:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fe f882 	bl	8001f3a <HAL_DMA_Abort_IT>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d011      	beq.n	8003e60 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e46:	4610      	mov	r0, r2
 8003e48:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e4a:	e009      	b.n	8003e60 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f813 	bl	8003e78 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e52:	e005      	b.n	8003e60 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f80f 	bl	8003e78 <I2C_TreatErrorCallback>
  }
}
 8003e5a:	e002      	b.n	8003e62 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e5c:	bf00      	nop
 8003e5e:	e000      	b.n	8003e62 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e60:	bf00      	nop
}
 8003e62:	bf00      	nop
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	ffff0000 	.word	0xffff0000
 8003e70:	08002d9d 	.word	0x08002d9d
 8003e74:	08003f0f 	.word	0x08003f0f

08003e78 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b082      	sub	sp, #8
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	2b60      	cmp	r3, #96	@ 0x60
 8003e8a:	d10e      	bne.n	8003eaa <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f7fe fe49 	bl	8002b3a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ea8:	e009      	b.n	8003ebe <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fe fe34 	bl	8002b26 <HAL_I2C_ErrorCallback>
}
 8003ebe:	bf00      	nop
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	699b      	ldr	r3, [r3, #24]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d103      	bne.n	8003ee4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	f003 0301 	and.w	r3, r3, #1
 8003eee:	2b01      	cmp	r3, #1
 8003ef0:	d007      	beq.n	8003f02 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	699a      	ldr	r2, [r3, #24]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f042 0201 	orr.w	r2, r2, #1
 8003f00:	619a      	str	r2, [r3, #24]
  }
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f0e:	b580      	push	{r7, lr}
 8003f10:	b084      	sub	sp, #16
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f1a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f28:	2200      	movs	r2, #0
 8003f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d003      	beq.n	8003f3c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f38:	2200      	movs	r2, #0
 8003f3a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003f3c:	68f8      	ldr	r0, [r7, #12]
 8003f3e:	f7ff ff9b 	bl	8003e78 <I2C_TreatErrorCallback>
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
	...

08003f4c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b087      	sub	sp, #28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	607b      	str	r3, [r7, #4]
 8003f56:	460b      	mov	r3, r1
 8003f58:	817b      	strh	r3, [r7, #10]
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f5e:	897b      	ldrh	r3, [r7, #10]
 8003f60:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f64:	7a7b      	ldrb	r3, [r7, #9]
 8003f66:	041b      	lsls	r3, r3, #16
 8003f68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f6c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003f72:	6a3b      	ldr	r3, [r7, #32]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003f7a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	6a3b      	ldr	r3, [r7, #32]
 8003f84:	0d5b      	lsrs	r3, r3, #21
 8003f86:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003f8a:	4b08      	ldr	r3, [pc, #32]	@ (8003fac <I2C_TransferConfig+0x60>)
 8003f8c:	430b      	orrs	r3, r1
 8003f8e:	43db      	mvns	r3, r3
 8003f90:	ea02 0103 	and.w	r1, r2, r3
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	430a      	orrs	r2, r1
 8003f9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	03ff63ff 	.word	0x03ff63ff

08003fb0 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	460b      	mov	r3, r1
 8003fba:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fc4:	4a39      	ldr	r2, [pc, #228]	@ (80040ac <I2C_Enable_IRQ+0xfc>)
 8003fc6:	4293      	cmp	r3, r2
 8003fc8:	d032      	beq.n	8004030 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8003fce:	4a38      	ldr	r2, [pc, #224]	@ (80040b0 <I2C_Enable_IRQ+0x100>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d02d      	beq.n	8004030 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8003fd8:	4a36      	ldr	r2, [pc, #216]	@ (80040b4 <I2C_Enable_IRQ+0x104>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d028      	beq.n	8004030 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fde:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da03      	bge.n	8003fee <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 8003fec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003fee:	887b      	ldrh	r3, [r7, #2]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8003ffe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004000:	887b      	ldrh	r3, [r7, #2]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004010:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	2b10      	cmp	r3, #16
 8004016:	d103      	bne.n	8004020 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 800401e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	2b20      	cmp	r3, #32
 8004024:	d133      	bne.n	800408e <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f043 0320 	orr.w	r3, r3, #32
 800402c:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800402e:	e02e      	b.n	800408e <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004030:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004034:	2b00      	cmp	r3, #0
 8004036:	da03      	bge.n	8004040 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800403e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004040:	887b      	ldrh	r3, [r7, #2]
 8004042:	f003 0301 	and.w	r3, r3, #1
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f043 03f2 	orr.w	r3, r3, #242	@ 0xf2
 8004050:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004052:	887b      	ldrh	r3, [r7, #2]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f043 03f4 	orr.w	r3, r3, #244	@ 0xf4
 8004062:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004064:	887b      	ldrh	r3, [r7, #2]
 8004066:	2b10      	cmp	r3, #16
 8004068:	d103      	bne.n	8004072 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004070:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004072:	887b      	ldrh	r3, [r7, #2]
 8004074:	2b20      	cmp	r3, #32
 8004076:	d103      	bne.n	8004080 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800407e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004080:	887b      	ldrh	r3, [r7, #2]
 8004082:	2b40      	cmp	r3, #64	@ 0x40
 8004084:	d103      	bne.n	800408e <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800408c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6819      	ldr	r1, [r3, #0]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	430a      	orrs	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
}
 800409e:	bf00      	nop
 80040a0:	3714      	adds	r7, #20
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr
 80040aa:	bf00      	nop
 80040ac:	08002f8f 	.word	0x08002f8f
 80040b0:	080033b1 	.word	0x080033b1
 80040b4:	08003165 	.word	0x08003165

080040b8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b085      	sub	sp, #20
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	460b      	mov	r3, r1
 80040c2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80040c8:	887b      	ldrh	r3, [r7, #2]
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00f      	beq.n	80040f2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f043 0342 	orr.w	r3, r3, #66	@ 0x42
 80040d8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80040e6:	2b28      	cmp	r3, #40	@ 0x28
 80040e8:	d003      	beq.n	80040f2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 80040f0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80040f2:	887b      	ldrh	r3, [r7, #2]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00f      	beq.n	800411c <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	f043 0344 	orr.w	r3, r3, #68	@ 0x44
 8004102:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410a:	b2db      	uxtb	r3, r3
 800410c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004110:	2b28      	cmp	r3, #40	@ 0x28
 8004112:	d003      	beq.n	800411c <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 800411a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800411c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004120:	2b00      	cmp	r3, #0
 8004122:	da03      	bge.n	800412c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f043 03b8 	orr.w	r3, r3, #184	@ 0xb8
 800412a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800412c:	887b      	ldrh	r3, [r7, #2]
 800412e:	2b10      	cmp	r3, #16
 8004130:	d103      	bne.n	800413a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	f043 0390 	orr.w	r3, r3, #144	@ 0x90
 8004138:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800413a:	887b      	ldrh	r3, [r7, #2]
 800413c:	2b20      	cmp	r3, #32
 800413e:	d103      	bne.n	8004148 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f043 0320 	orr.w	r3, r3, #32
 8004146:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004148:	887b      	ldrh	r3, [r7, #2]
 800414a:	2b40      	cmp	r3, #64	@ 0x40
 800414c:	d103      	bne.n	8004156 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004154:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	6819      	ldr	r1, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	43da      	mvns	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	400a      	ands	r2, r1
 8004166:	601a      	str	r2, [r3, #0]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b20      	cmp	r3, #32
 8004188:	d138      	bne.n	80041fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004190:	2b01      	cmp	r3, #1
 8004192:	d101      	bne.n	8004198 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004194:	2302      	movs	r3, #2
 8004196:	e032      	b.n	80041fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2224      	movs	r2, #36	@ 0x24
 80041a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0201 	bic.w	r2, r2, #1
 80041b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80041c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	6819      	ldr	r1, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2220      	movs	r2, #32
 80041ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	e000      	b.n	80041fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041fc:	2302      	movs	r3, #2
  }
}
 80041fe:	4618      	mov	r0, r3
 8004200:	370c      	adds	r7, #12
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr

0800420a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800420a:	b480      	push	{r7}
 800420c:	b085      	sub	sp, #20
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
 8004212:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b20      	cmp	r3, #32
 800421e:	d139      	bne.n	8004294 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004226:	2b01      	cmp	r3, #1
 8004228:	d101      	bne.n	800422e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800422a:	2302      	movs	r3, #2
 800422c:	e033      	b.n	8004296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2224      	movs	r2, #36	@ 0x24
 800423a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0201 	bic.w	r2, r2, #1
 800424c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800425c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	021b      	lsls	r3, r3, #8
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4313      	orrs	r3, r2
 8004266:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68fa      	ldr	r2, [r7, #12]
 800426e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f042 0201 	orr.w	r2, r2, #1
 800427e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004290:	2300      	movs	r3, #0
 8004292:	e000      	b.n	8004296 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004294:	2302      	movs	r3, #2
  }
}
 8004296:	4618      	mov	r0, r3
 8004298:	3714      	adds	r7, #20
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d141      	bne.n	8004336 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80042b2:	4b4b      	ldr	r3, [pc, #300]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80042ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042be:	d131      	bne.n	8004324 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80042c0:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80042c6:	4a46      	ldr	r2, [pc, #280]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042cc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80042d0:	4b43      	ldr	r3, [pc, #268]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80042d8:	4a41      	ldr	r2, [pc, #260]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80042da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80042de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80042e0:	4b40      	ldr	r3, [pc, #256]	@ (80043e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2232      	movs	r2, #50	@ 0x32
 80042e6:	fb02 f303 	mul.w	r3, r2, r3
 80042ea:	4a3f      	ldr	r2, [pc, #252]	@ (80043e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80042ec:	fba2 2303 	umull	r2, r3, r2, r3
 80042f0:	0c9b      	lsrs	r3, r3, #18
 80042f2:	3301      	adds	r3, #1
 80042f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042f6:	e002      	b.n	80042fe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	3b01      	subs	r3, #1
 80042fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80042fe:	4b38      	ldr	r3, [pc, #224]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004306:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800430a:	d102      	bne.n	8004312 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f2      	bne.n	80042f8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004312:	4b33      	ldr	r3, [pc, #204]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800431e:	d158      	bne.n	80043d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e057      	b.n	80043d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004324:	4b2e      	ldr	r3, [pc, #184]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004326:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800432a:	4a2d      	ldr	r2, [pc, #180]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800432c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004330:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004334:	e04d      	b.n	80043d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800433c:	d141      	bne.n	80043c2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800433e:	4b28      	ldr	r3, [pc, #160]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434a:	d131      	bne.n	80043b0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800434c:	4b24      	ldr	r3, [pc, #144]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800434e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004352:	4a23      	ldr	r2, [pc, #140]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004358:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800435c:	4b20      	ldr	r3, [pc, #128]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004364:	4a1e      	ldr	r2, [pc, #120]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004366:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800436a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800436c:	4b1d      	ldr	r3, [pc, #116]	@ (80043e4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2232      	movs	r2, #50	@ 0x32
 8004372:	fb02 f303 	mul.w	r3, r2, r3
 8004376:	4a1c      	ldr	r2, [pc, #112]	@ (80043e8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004378:	fba2 2303 	umull	r2, r3, r2, r3
 800437c:	0c9b      	lsrs	r3, r3, #18
 800437e:	3301      	adds	r3, #1
 8004380:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004382:	e002      	b.n	800438a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	3b01      	subs	r3, #1
 8004388:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800438a:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004392:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004396:	d102      	bne.n	800439e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f2      	bne.n	8004384 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800439e:	4b10      	ldr	r3, [pc, #64]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043aa:	d112      	bne.n	80043d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e011      	b.n	80043d4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80043b6:	4a0a      	ldr	r2, [pc, #40]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043bc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80043c0:	e007      	b.n	80043d2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80043c2:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80043ca:	4a05      	ldr	r2, [pc, #20]	@ (80043e0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80043cc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80043d0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80043d2:	2300      	movs	r3, #0
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	3714      	adds	r7, #20
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr
 80043e0:	40007000 	.word	0x40007000
 80043e4:	20000038 	.word	0x20000038
 80043e8:	431bde83 	.word	0x431bde83

080043ec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80043f0:	4b05      	ldr	r3, [pc, #20]	@ (8004408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	4a04      	ldr	r2, [pc, #16]	@ (8004408 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80043f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80043fa:	6093      	str	r3, [r2, #8]
}
 80043fc:	bf00      	nop
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	40007000 	.word	0x40007000

0800440c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b088      	sub	sp, #32
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e2fe      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0301 	and.w	r3, r3, #1
 8004426:	2b00      	cmp	r3, #0
 8004428:	d075      	beq.n	8004516 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800442a:	4b97      	ldr	r3, [pc, #604]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f003 030c 	and.w	r3, r3, #12
 8004432:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004434:	4b94      	ldr	r3, [pc, #592]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	2b0c      	cmp	r3, #12
 8004442:	d102      	bne.n	800444a <HAL_RCC_OscConfig+0x3e>
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d002      	beq.n	8004450 <HAL_RCC_OscConfig+0x44>
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	2b08      	cmp	r3, #8
 800444e:	d10b      	bne.n	8004468 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004450:	4b8d      	ldr	r3, [pc, #564]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d05b      	beq.n	8004514 <HAL_RCC_OscConfig+0x108>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d157      	bne.n	8004514 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e2d9      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004470:	d106      	bne.n	8004480 <HAL_RCC_OscConfig+0x74>
 8004472:	4b85      	ldr	r3, [pc, #532]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a84      	ldr	r2, [pc, #528]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800447c:	6013      	str	r3, [r2, #0]
 800447e:	e01d      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004488:	d10c      	bne.n	80044a4 <HAL_RCC_OscConfig+0x98>
 800448a:	4b7f      	ldr	r3, [pc, #508]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a7e      	ldr	r2, [pc, #504]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004494:	6013      	str	r3, [r2, #0]
 8004496:	4b7c      	ldr	r3, [pc, #496]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a7b      	ldr	r2, [pc, #492]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044a0:	6013      	str	r3, [r2, #0]
 80044a2:	e00b      	b.n	80044bc <HAL_RCC_OscConfig+0xb0>
 80044a4:	4b78      	ldr	r3, [pc, #480]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a77      	ldr	r2, [pc, #476]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80044aa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044ae:	6013      	str	r3, [r2, #0]
 80044b0:	4b75      	ldr	r3, [pc, #468]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a74      	ldr	r2, [pc, #464]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80044b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80044ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d013      	beq.n	80044ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c4:	f7fd fad8 	bl	8001a78 <HAL_GetTick>
 80044c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ca:	e008      	b.n	80044de <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fd fad4 	bl	8001a78 <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	@ 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e29e      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044de:	4b6a      	ldr	r3, [pc, #424]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0xc0>
 80044ea:	e014      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fd fac4 	bl	8001a78 <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fd fac0 	bl	8001a78 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	@ 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e28a      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004506:	4b60      	ldr	r3, [pc, #384]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0xe8>
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d075      	beq.n	800460e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004522:	4b59      	ldr	r3, [pc, #356]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800452c:	4b56      	ldr	r3, [pc, #344]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	2b0c      	cmp	r3, #12
 800453a:	d102      	bne.n	8004542 <HAL_RCC_OscConfig+0x136>
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d002      	beq.n	8004548 <HAL_RCC_OscConfig+0x13c>
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b04      	cmp	r3, #4
 8004546:	d11f      	bne.n	8004588 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004548:	4b4f      	ldr	r3, [pc, #316]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004550:	2b00      	cmp	r3, #0
 8004552:	d005      	beq.n	8004560 <HAL_RCC_OscConfig+0x154>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e25d      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004560:	4b49      	ldr	r3, [pc, #292]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	691b      	ldr	r3, [r3, #16]
 800456c:	061b      	lsls	r3, r3, #24
 800456e:	4946      	ldr	r1, [pc, #280]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004570:	4313      	orrs	r3, r2
 8004572:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004574:	4b45      	ldr	r3, [pc, #276]	@ (800468c <HAL_RCC_OscConfig+0x280>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f7fd fa31 	bl	80019e0 <HAL_InitTick>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d043      	beq.n	800460c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	e249      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d023      	beq.n	80045d8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004590:	4b3d      	ldr	r3, [pc, #244]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a3c      	ldr	r2, [pc, #240]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004596:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800459a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459c:	f7fd fa6c 	bl	8001a78 <HAL_GetTick>
 80045a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a2:	e008      	b.n	80045b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045a4:	f7fd fa68 	bl	8001a78 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d901      	bls.n	80045b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80045b2:	2303      	movs	r3, #3
 80045b4:	e232      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045b6:	4b34      	ldr	r3, [pc, #208]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0f0      	beq.n	80045a4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045c2:	4b31      	ldr	r3, [pc, #196]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	061b      	lsls	r3, r3, #24
 80045d0:	492d      	ldr	r1, [pc, #180]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	604b      	str	r3, [r1, #4]
 80045d6:	e01a      	b.n	800460e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045d8:	4b2b      	ldr	r3, [pc, #172]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2a      	ldr	r2, [pc, #168]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 80045de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fd fa48 	bl	8001a78 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045ec:	f7fd fa44 	bl	8001a78 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e20e      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045fe:	4b22      	ldr	r3, [pc, #136]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x1e0>
 800460a:	e000      	b.n	800460e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800460c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	2b00      	cmp	r3, #0
 8004618:	d041      	beq.n	800469e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d01c      	beq.n	800465c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004622:	4b19      	ldr	r3, [pc, #100]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004624:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004628:	4a17      	ldr	r2, [pc, #92]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004632:	f7fd fa21 	bl	8001a78 <HAL_GetTick>
 8004636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004638:	e008      	b.n	800464c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800463a:	f7fd fa1d 	bl	8001a78 <HAL_GetTick>
 800463e:	4602      	mov	r2, r0
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	2b02      	cmp	r3, #2
 8004646:	d901      	bls.n	800464c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004648:	2303      	movs	r3, #3
 800464a:	e1e7      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800464c:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 800464e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ef      	beq.n	800463a <HAL_RCC_OscConfig+0x22e>
 800465a:	e020      	b.n	800469e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800465c:	4b0a      	ldr	r3, [pc, #40]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 800465e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004662:	4a09      	ldr	r2, [pc, #36]	@ (8004688 <HAL_RCC_OscConfig+0x27c>)
 8004664:	f023 0301 	bic.w	r3, r3, #1
 8004668:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800466c:	f7fd fa04 	bl	8001a78 <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004672:	e00d      	b.n	8004690 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004674:	f7fd fa00 	bl	8001a78 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d906      	bls.n	8004690 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e1ca      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
 8004686:	bf00      	nop
 8004688:	40021000 	.word	0x40021000
 800468c:	2000003c 	.word	0x2000003c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004690:	4b8c      	ldr	r3, [pc, #560]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004692:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004696:	f003 0302 	and.w	r3, r3, #2
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1ea      	bne.n	8004674 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f003 0304 	and.w	r3, r3, #4
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80a6 	beq.w	80047f8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ac:	2300      	movs	r3, #0
 80046ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80046b0:	4b84      	ldr	r3, [pc, #528]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80046b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_OscConfig+0x2b4>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <HAL_RCC_OscConfig+0x2b6>
 80046c0:	2300      	movs	r3, #0
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00d      	beq.n	80046e2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c6:	4b7f      	ldr	r3, [pc, #508]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80046c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046ca:	4a7e      	ldr	r2, [pc, #504]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80046cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80046d2:	4b7c      	ldr	r3, [pc, #496]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80046d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046da:	60fb      	str	r3, [r7, #12]
 80046dc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80046de:	2301      	movs	r3, #1
 80046e0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046e2:	4b79      	ldr	r3, [pc, #484]	@ (80048c8 <HAL_RCC_OscConfig+0x4bc>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d118      	bne.n	8004720 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046ee:	4b76      	ldr	r3, [pc, #472]	@ (80048c8 <HAL_RCC_OscConfig+0x4bc>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a75      	ldr	r2, [pc, #468]	@ (80048c8 <HAL_RCC_OscConfig+0x4bc>)
 80046f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fa:	f7fd f9bd 	bl	8001a78 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004702:	f7fd f9b9 	bl	8001a78 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e183      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004714:	4b6c      	ldr	r3, [pc, #432]	@ (80048c8 <HAL_RCC_OscConfig+0x4bc>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d108      	bne.n	800473a <HAL_RCC_OscConfig+0x32e>
 8004728:	4b66      	ldr	r3, [pc, #408]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800472e:	4a65      	ldr	r2, [pc, #404]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004730:	f043 0301 	orr.w	r3, r3, #1
 8004734:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004738:	e024      	b.n	8004784 <HAL_RCC_OscConfig+0x378>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	2b05      	cmp	r3, #5
 8004740:	d110      	bne.n	8004764 <HAL_RCC_OscConfig+0x358>
 8004742:	4b60      	ldr	r3, [pc, #384]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004744:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004748:	4a5e      	ldr	r2, [pc, #376]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 800474a:	f043 0304 	orr.w	r3, r3, #4
 800474e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004752:	4b5c      	ldr	r3, [pc, #368]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004754:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004758:	4a5a      	ldr	r2, [pc, #360]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 800475a:	f043 0301 	orr.w	r3, r3, #1
 800475e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004762:	e00f      	b.n	8004784 <HAL_RCC_OscConfig+0x378>
 8004764:	4b57      	ldr	r3, [pc, #348]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800476a:	4a56      	ldr	r2, [pc, #344]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 800476c:	f023 0301 	bic.w	r3, r3, #1
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004774:	4b53      	ldr	r3, [pc, #332]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	4a52      	ldr	r2, [pc, #328]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 800477c:	f023 0304 	bic.w	r3, r3, #4
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d016      	beq.n	80047ba <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800478c:	f7fd f974 	bl	8001a78 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004792:	e00a      	b.n	80047aa <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004794:	f7fd f970 	bl	8001a78 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e138      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047aa:	4b46      	ldr	r3, [pc, #280]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047b0:	f003 0302 	and.w	r3, r3, #2
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0ed      	beq.n	8004794 <HAL_RCC_OscConfig+0x388>
 80047b8:	e015      	b.n	80047e6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047ba:	f7fd f95d 	bl	8001a78 <HAL_GetTick>
 80047be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047c0:	e00a      	b.n	80047d8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fd f959 	bl	8001a78 <HAL_GetTick>
 80047c6:	4602      	mov	r2, r0
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e121      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047d8:	4b3a      	ldr	r3, [pc, #232]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80047da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047de:	f003 0302 	and.w	r3, r3, #2
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1ed      	bne.n	80047c2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80047e6:	7ffb      	ldrb	r3, [r7, #31]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d105      	bne.n	80047f8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047ec:	4b35      	ldr	r3, [pc, #212]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80047ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047f0:	4a34      	ldr	r2, [pc, #208]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80047f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047f6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f003 0320 	and.w	r3, r3, #32
 8004800:	2b00      	cmp	r3, #0
 8004802:	d03c      	beq.n	800487e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	699b      	ldr	r3, [r3, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01c      	beq.n	8004846 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800480c:	4b2d      	ldr	r3, [pc, #180]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 800480e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004812:	4a2c      	ldr	r2, [pc, #176]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004814:	f043 0301 	orr.w	r3, r3, #1
 8004818:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fd f92c 	bl	8001a78 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004824:	f7fd f928 	bl	8001a78 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b02      	cmp	r3, #2
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e0f2      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004836:	4b23      	ldr	r3, [pc, #140]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004838:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0ef      	beq.n	8004824 <HAL_RCC_OscConfig+0x418>
 8004844:	e01b      	b.n	800487e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004846:	4b1f      	ldr	r3, [pc, #124]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004848:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800484c:	4a1d      	ldr	r2, [pc, #116]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 800484e:	f023 0301 	bic.w	r3, r3, #1
 8004852:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fd f90f 	bl	8001a78 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800485e:	f7fd f90b 	bl	8001a78 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0d5      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004870:	4b14      	ldr	r3, [pc, #80]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 8004872:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d1ef      	bne.n	800485e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	2b00      	cmp	r3, #0
 8004884:	f000 80c9 	beq.w	8004a1a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004888:	4b0e      	ldr	r3, [pc, #56]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 030c 	and.w	r3, r3, #12
 8004890:	2b0c      	cmp	r3, #12
 8004892:	f000 8083 	beq.w	800499c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	69db      	ldr	r3, [r3, #28]
 800489a:	2b02      	cmp	r3, #2
 800489c:	d15e      	bne.n	800495c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800489e:	4b09      	ldr	r3, [pc, #36]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a08      	ldr	r2, [pc, #32]	@ (80048c4 <HAL_RCC_OscConfig+0x4b8>)
 80048a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80048a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048aa:	f7fd f8e5 	bl	8001a78 <HAL_GetTick>
 80048ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b0:	e00c      	b.n	80048cc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048b2:	f7fd f8e1 	bl	8001a78 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d905      	bls.n	80048cc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e0ab      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
 80048c4:	40021000 	.word	0x40021000
 80048c8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048cc:	4b55      	ldr	r3, [pc, #340]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1ec      	bne.n	80048b2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048d8:	4b52      	ldr	r3, [pc, #328]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	4b52      	ldr	r3, [pc, #328]	@ (8004a28 <HAL_RCC_OscConfig+0x61c>)
 80048de:	4013      	ands	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6a11      	ldr	r1, [r2, #32]
 80048e4:	687a      	ldr	r2, [r7, #4]
 80048e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80048e8:	3a01      	subs	r2, #1
 80048ea:	0112      	lsls	r2, r2, #4
 80048ec:	4311      	orrs	r1, r2
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80048f2:	0212      	lsls	r2, r2, #8
 80048f4:	4311      	orrs	r1, r2
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80048fa:	0852      	lsrs	r2, r2, #1
 80048fc:	3a01      	subs	r2, #1
 80048fe:	0552      	lsls	r2, r2, #21
 8004900:	4311      	orrs	r1, r2
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004906:	0852      	lsrs	r2, r2, #1
 8004908:	3a01      	subs	r2, #1
 800490a:	0652      	lsls	r2, r2, #25
 800490c:	4311      	orrs	r1, r2
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004912:	06d2      	lsls	r2, r2, #27
 8004914:	430a      	orrs	r2, r1
 8004916:	4943      	ldr	r1, [pc, #268]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 8004918:	4313      	orrs	r3, r2
 800491a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800491c:	4b41      	ldr	r3, [pc, #260]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a40      	ldr	r2, [pc, #256]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 8004922:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004926:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004928:	4b3e      	ldr	r3, [pc, #248]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a3d      	ldr	r2, [pc, #244]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 800492e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004932:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004934:	f7fd f8a0 	bl	8001a78 <HAL_GetTick>
 8004938:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800493a:	e008      	b.n	800494e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800493c:	f7fd f89c 	bl	8001a78 <HAL_GetTick>
 8004940:	4602      	mov	r2, r0
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	1ad3      	subs	r3, r2, r3
 8004946:	2b02      	cmp	r3, #2
 8004948:	d901      	bls.n	800494e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800494a:	2303      	movs	r3, #3
 800494c:	e066      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800494e:	4b35      	ldr	r3, [pc, #212]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0f0      	beq.n	800493c <HAL_RCC_OscConfig+0x530>
 800495a:	e05e      	b.n	8004a1a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495c:	4b31      	ldr	r3, [pc, #196]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a30      	ldr	r2, [pc, #192]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 8004962:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004966:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004968:	f7fd f886 	bl	8001a78 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004970:	f7fd f882 	bl	8001a78 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b02      	cmp	r3, #2
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e04c      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004982:	4b28      	ldr	r3, [pc, #160]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d1f0      	bne.n	8004970 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800498e:	4b25      	ldr	r3, [pc, #148]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 8004990:	68da      	ldr	r2, [r3, #12]
 8004992:	4924      	ldr	r1, [pc, #144]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 8004994:	4b25      	ldr	r3, [pc, #148]	@ (8004a2c <HAL_RCC_OscConfig+0x620>)
 8004996:	4013      	ands	r3, r2
 8004998:	60cb      	str	r3, [r1, #12]
 800499a:	e03e      	b.n	8004a1a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	69db      	ldr	r3, [r3, #28]
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e039      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80049a8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a24 <HAL_RCC_OscConfig+0x618>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	f003 0203 	and.w	r2, r3, #3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d12c      	bne.n	8004a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c6:	3b01      	subs	r3, #1
 80049c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d123      	bne.n	8004a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80049da:	429a      	cmp	r2, r3
 80049dc:	d11b      	bne.n	8004a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049e8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d113      	bne.n	8004a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f8:	085b      	lsrs	r3, r3, #1
 80049fa:	3b01      	subs	r3, #1
 80049fc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d109      	bne.n	8004a16 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004a0c:	085b      	lsrs	r3, r3, #1
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d001      	beq.n	8004a1a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e000      	b.n	8004a1c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3720      	adds	r7, #32
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	40021000 	.word	0x40021000
 8004a28:	019f800c 	.word	0x019f800c
 8004a2c:	feeefffc 	.word	0xfeeefffc

08004a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
 8004a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e11e      	b.n	8004c86 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a48:	4b91      	ldr	r3, [pc, #580]	@ (8004c90 <HAL_RCC_ClockConfig+0x260>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 030f 	and.w	r3, r3, #15
 8004a50:	683a      	ldr	r2, [r7, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d910      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a56:	4b8e      	ldr	r3, [pc, #568]	@ (8004c90 <HAL_RCC_ClockConfig+0x260>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f023 020f 	bic.w	r2, r3, #15
 8004a5e:	498c      	ldr	r1, [pc, #560]	@ (8004c90 <HAL_RCC_ClockConfig+0x260>)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b8a      	ldr	r3, [pc, #552]	@ (8004c90 <HAL_RCC_ClockConfig+0x260>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 030f 	and.w	r3, r3, #15
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e106      	b.n	8004c86 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d073      	beq.n	8004b6c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	2b03      	cmp	r3, #3
 8004a8a:	d129      	bne.n	8004ae0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a8c:	4b81      	ldr	r3, [pc, #516]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d101      	bne.n	8004a9c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e0f4      	b.n	8004c86 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004a9c:	f000 f99e 	bl	8004ddc <RCC_GetSysClockFreqFromPLLSource>
 8004aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4a7c      	ldr	r2, [pc, #496]	@ (8004c98 <HAL_RCC_ClockConfig+0x268>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d93f      	bls.n	8004b2a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004aaa:	4b7a      	ldr	r3, [pc, #488]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d033      	beq.n	8004b2a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d12f      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aca:	4b72      	ldr	r3, [pc, #456]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004ad2:	4a70      	ldr	r2, [pc, #448]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004ad4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004ad8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004ada:	2380      	movs	r3, #128	@ 0x80
 8004adc:	617b      	str	r3, [r7, #20]
 8004ade:	e024      	b.n	8004b2a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	2b02      	cmp	r3, #2
 8004ae6:	d107      	bne.n	8004af8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ae8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d109      	bne.n	8004b08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e0c6      	b.n	8004c86 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004af8:	4b66      	ldr	r3, [pc, #408]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d101      	bne.n	8004b08 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e0be      	b.n	8004c86 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004b08:	f000 f8ce 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4a61      	ldr	r2, [pc, #388]	@ (8004c98 <HAL_RCC_ClockConfig+0x268>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d909      	bls.n	8004b2a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b16:	4b5f      	ldr	r3, [pc, #380]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004b1e:	4a5d      	ldr	r2, [pc, #372]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004b20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b24:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004b26:	2380      	movs	r3, #128	@ 0x80
 8004b28:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b2a:	4b5a      	ldr	r3, [pc, #360]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f023 0203 	bic.w	r2, r3, #3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4957      	ldr	r1, [pc, #348]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3c:	f7fc ff9c 	bl	8001a78 <HAL_GetTick>
 8004b40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	e00a      	b.n	8004b5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b44:	f7fc ff98 	bl	8001a78 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d901      	bls.n	8004b5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e095      	b.n	8004c86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b5a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f003 020c 	and.w	r2, r3, #12
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d1eb      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d023      	beq.n	8004bc0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 0304 	and.w	r3, r3, #4
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b84:	4b43      	ldr	r3, [pc, #268]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	4a42      	ldr	r2, [pc, #264]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004b8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004b8e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0308 	and.w	r3, r3, #8
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004b9c:	4b3d      	ldr	r3, [pc, #244]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004ba4:	4a3b      	ldr	r2, [pc, #236]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004ba6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004baa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bac:	4b39      	ldr	r3, [pc, #228]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689b      	ldr	r3, [r3, #8]
 8004bb8:	4936      	ldr	r1, [pc, #216]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	608b      	str	r3, [r1, #8]
 8004bbe:	e008      	b.n	8004bd2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b80      	cmp	r3, #128	@ 0x80
 8004bc4:	d105      	bne.n	8004bd2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bc6:	4b33      	ldr	r3, [pc, #204]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	4a32      	ldr	r2, [pc, #200]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004bcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004bd0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004bd2:	4b2f      	ldr	r3, [pc, #188]	@ (8004c90 <HAL_RCC_ClockConfig+0x260>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 030f 	and.w	r3, r3, #15
 8004bda:	683a      	ldr	r2, [r7, #0]
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d21d      	bcs.n	8004c1c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004be0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c90 <HAL_RCC_ClockConfig+0x260>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f023 020f 	bic.w	r2, r3, #15
 8004be8:	4929      	ldr	r1, [pc, #164]	@ (8004c90 <HAL_RCC_ClockConfig+0x260>)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	4313      	orrs	r3, r2
 8004bee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004bf0:	f7fc ff42 	bl	8001a78 <HAL_GetTick>
 8004bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bf6:	e00a      	b.n	8004c0e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bf8:	f7fc ff3e 	bl	8001a78 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d901      	bls.n	8004c0e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e03b      	b.n	8004c86 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c0e:	4b20      	ldr	r3, [pc, #128]	@ (8004c90 <HAL_RCC_ClockConfig+0x260>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d1ed      	bne.n	8004bf8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0304 	and.w	r3, r3, #4
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d008      	beq.n	8004c3a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c28:	4b1a      	ldr	r3, [pc, #104]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004c2a:	689b      	ldr	r3, [r3, #8]
 8004c2c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	4917      	ldr	r1, [pc, #92]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004c36:	4313      	orrs	r3, r2
 8004c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0308 	and.w	r3, r3, #8
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d009      	beq.n	8004c5a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c46:	4b13      	ldr	r3, [pc, #76]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	00db      	lsls	r3, r3, #3
 8004c54:	490f      	ldr	r1, [pc, #60]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004c56:	4313      	orrs	r3, r2
 8004c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c5a:	f000 f825 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	4b0c      	ldr	r3, [pc, #48]	@ (8004c94 <HAL_RCC_ClockConfig+0x264>)
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	091b      	lsrs	r3, r3, #4
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	490c      	ldr	r1, [pc, #48]	@ (8004c9c <HAL_RCC_ClockConfig+0x26c>)
 8004c6c:	5ccb      	ldrb	r3, [r1, r3]
 8004c6e:	f003 031f 	and.w	r3, r3, #31
 8004c72:	fa22 f303 	lsr.w	r3, r2, r3
 8004c76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca0 <HAL_RCC_ClockConfig+0x270>)
 8004c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004ca4 <HAL_RCC_ClockConfig+0x274>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fc feae 	bl	80019e0 <HAL_InitTick>
 8004c84:	4603      	mov	r3, r0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40022000 	.word	0x40022000
 8004c94:	40021000 	.word	0x40021000
 8004c98:	04c4b400 	.word	0x04c4b400
 8004c9c:	0800821c 	.word	0x0800821c
 8004ca0:	20000038 	.word	0x20000038
 8004ca4:	2000003c 	.word	0x2000003c

08004ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004cae:	4b2c      	ldr	r3, [pc, #176]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 030c 	and.w	r3, r3, #12
 8004cb6:	2b04      	cmp	r3, #4
 8004cb8:	d102      	bne.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cba:	4b2a      	ldr	r3, [pc, #168]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004cbc:	613b      	str	r3, [r7, #16]
 8004cbe:	e047      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004cc0:	4b27      	ldr	r3, [pc, #156]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 030c 	and.w	r3, r3, #12
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d102      	bne.n	8004cd2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ccc:	4b26      	ldr	r3, [pc, #152]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	e03e      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004cd2:	4b23      	ldr	r3, [pc, #140]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d136      	bne.n	8004d4c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cde:	4b20      	ldr	r3, [pc, #128]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	f003 0303 	and.w	r3, r3, #3
 8004ce6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004ce8:	4b1d      	ldr	r3, [pc, #116]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	091b      	lsrs	r3, r3, #4
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	3301      	adds	r3, #1
 8004cf4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2b03      	cmp	r3, #3
 8004cfa:	d10c      	bne.n	8004d16 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004cfc:	4a1a      	ldr	r2, [pc, #104]	@ (8004d68 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d04:	4a16      	ldr	r2, [pc, #88]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d06:	68d2      	ldr	r2, [r2, #12]
 8004d08:	0a12      	lsrs	r2, r2, #8
 8004d0a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d0e:	fb02 f303 	mul.w	r3, r2, r3
 8004d12:	617b      	str	r3, [r7, #20]
      break;
 8004d14:	e00c      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004d16:	4a13      	ldr	r2, [pc, #76]	@ (8004d64 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1e:	4a10      	ldr	r2, [pc, #64]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d20:	68d2      	ldr	r2, [r2, #12]
 8004d22:	0a12      	lsrs	r2, r2, #8
 8004d24:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]
      break;
 8004d2e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d30:	4b0b      	ldr	r3, [pc, #44]	@ (8004d60 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	0e5b      	lsrs	r3, r3, #25
 8004d36:	f003 0303 	and.w	r3, r3, #3
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	e001      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004d50:	693b      	ldr	r3, [r7, #16]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	371c      	adds	r7, #28
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40021000 	.word	0x40021000
 8004d64:	00f42400 	.word	0x00f42400
 8004d68:	016e3600 	.word	0x016e3600

08004d6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d70:	4b03      	ldr	r3, [pc, #12]	@ (8004d80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d72:	681b      	ldr	r3, [r3, #0]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	20000038 	.word	0x20000038

08004d84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d88:	f7ff fff0 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	4b06      	ldr	r3, [pc, #24]	@ (8004da8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f003 0307 	and.w	r3, r3, #7
 8004d98:	4904      	ldr	r1, [pc, #16]	@ (8004dac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d9a:	5ccb      	ldrb	r3, [r1, r3]
 8004d9c:	f003 031f 	and.w	r3, r3, #31
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40021000 	.word	0x40021000
 8004dac:	0800822c 	.word	0x0800822c

08004db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004db4:	f7ff ffda 	bl	8004d6c <HAL_RCC_GetHCLKFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b06      	ldr	r3, [pc, #24]	@ (8004dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	0adb      	lsrs	r3, r3, #11
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4904      	ldr	r1, [pc, #16]	@ (8004dd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	f003 031f 	and.w	r3, r3, #31
 8004dcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	0800822c 	.word	0x0800822c

08004ddc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b087      	sub	sp, #28
 8004de0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004de2:	4b1e      	ldr	r3, [pc, #120]	@ (8004e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0303 	and.w	r3, r3, #3
 8004dea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dec:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	091b      	lsrs	r3, r3, #4
 8004df2:	f003 030f 	and.w	r3, r3, #15
 8004df6:	3301      	adds	r3, #1
 8004df8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b03      	cmp	r3, #3
 8004dfe:	d10c      	bne.n	8004e1a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e00:	4a17      	ldr	r2, [pc, #92]	@ (8004e60 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e08:	4a14      	ldr	r2, [pc, #80]	@ (8004e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e0a:	68d2      	ldr	r2, [r2, #12]
 8004e0c:	0a12      	lsrs	r2, r2, #8
 8004e0e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e12:	fb02 f303 	mul.w	r3, r2, r3
 8004e16:	617b      	str	r3, [r7, #20]
    break;
 8004e18:	e00c      	b.n	8004e34 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004e1a:	4a12      	ldr	r2, [pc, #72]	@ (8004e64 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	4a0e      	ldr	r2, [pc, #56]	@ (8004e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e24:	68d2      	ldr	r2, [r2, #12]
 8004e26:	0a12      	lsrs	r2, r2, #8
 8004e28:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004e2c:	fb02 f303 	mul.w	r3, r2, r3
 8004e30:	617b      	str	r3, [r7, #20]
    break;
 8004e32:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e34:	4b09      	ldr	r3, [pc, #36]	@ (8004e5c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	0e5b      	lsrs	r3, r3, #25
 8004e3a:	f003 0303 	and.w	r3, r3, #3
 8004e3e:	3301      	adds	r3, #1
 8004e40:	005b      	lsls	r3, r3, #1
 8004e42:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004e44:	697a      	ldr	r2, [r7, #20]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e4c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004e4e:	687b      	ldr	r3, [r7, #4]
}
 8004e50:	4618      	mov	r0, r3
 8004e52:	371c      	adds	r7, #28
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	016e3600 	.word	0x016e3600
 8004e64:	00f42400 	.word	0x00f42400

08004e68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e70:	2300      	movs	r3, #0
 8004e72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e74:	2300      	movs	r3, #0
 8004e76:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 8098 	beq.w	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e86:	2300      	movs	r3, #0
 8004e88:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e8a:	4b43      	ldr	r3, [pc, #268]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d10d      	bne.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e96:	4b40      	ldr	r3, [pc, #256]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e9a:	4a3f      	ldr	r2, [pc, #252]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004e9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ea0:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ea2:	4b3d      	ldr	r3, [pc, #244]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ea4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ea6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004eaa:	60bb      	str	r3, [r7, #8]
 8004eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004eb2:	4b3a      	ldr	r3, [pc, #232]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a39      	ldr	r2, [pc, #228]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004eb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ebc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ebe:	f7fc fddb 	bl	8001a78 <HAL_GetTick>
 8004ec2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004ec4:	e009      	b.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ec6:	f7fc fdd7 	bl	8001a78 <HAL_GetTick>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	1ad3      	subs	r3, r2, r3
 8004ed0:	2b02      	cmp	r3, #2
 8004ed2:	d902      	bls.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004ed4:	2303      	movs	r3, #3
 8004ed6:	74fb      	strb	r3, [r7, #19]
        break;
 8004ed8:	e005      	b.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004eda:	4b30      	ldr	r3, [pc, #192]	@ (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d0ef      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004ee6:	7cfb      	ldrb	r3, [r7, #19]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d159      	bne.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004eec:	4b2a      	ldr	r3, [pc, #168]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ef6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d01e      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d019      	beq.n	8004f3c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004f08:	4b23      	ldr	r3, [pc, #140]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f0e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004f14:	4b20      	ldr	r3, [pc, #128]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f1a:	4a1f      	ldr	r2, [pc, #124]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004f24:	4b1c      	ldr	r3, [pc, #112]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f2c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004f34:	4a18      	ldr	r2, [pc, #96]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f36:	697b      	ldr	r3, [r7, #20]
 8004f38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 0301 	and.w	r3, r3, #1
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d016      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f46:	f7fc fd97 	bl	8001a78 <HAL_GetTick>
 8004f4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f4c:	e00b      	b.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f7fc fd93 	bl	8001a78 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d902      	bls.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	74fb      	strb	r3, [r7, #19]
            break;
 8004f64:	e006      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f66:	4b0c      	ldr	r3, [pc, #48]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d0ec      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004f74:	7cfb      	ldrb	r3, [r7, #19]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10b      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f7a:	4b07      	ldr	r3, [pc, #28]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f88:	4903      	ldr	r1, [pc, #12]	@ (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004f90:	e008      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	74bb      	strb	r3, [r7, #18]
 8004f96:	e005      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004f98:	40021000 	.word	0x40021000
 8004f9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fa0:	7cfb      	ldrb	r3, [r7, #19]
 8004fa2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fa4:	7c7b      	ldrb	r3, [r7, #17]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d105      	bne.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004faa:	4ba7      	ldr	r3, [pc, #668]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fae:	4aa6      	ldr	r2, [pc, #664]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fb0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004fb4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00a      	beq.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fc2:	4ba1      	ldr	r3, [pc, #644]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fc8:	f023 0203 	bic.w	r2, r3, #3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	499d      	ldr	r1, [pc, #628]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d00a      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fe4:	4b98      	ldr	r3, [pc, #608]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fea:	f023 020c 	bic.w	r2, r3, #12
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	4995      	ldr	r1, [pc, #596]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0304 	and.w	r3, r3, #4
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00a      	beq.n	800501c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005006:	4b90      	ldr	r3, [pc, #576]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800500c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	498c      	ldr	r1, [pc, #560]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005016:	4313      	orrs	r3, r2
 8005018:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0308 	and.w	r3, r3, #8
 8005024:	2b00      	cmp	r3, #0
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005028:	4b87      	ldr	r3, [pc, #540]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800502e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	4984      	ldr	r1, [pc, #528]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005038:	4313      	orrs	r3, r2
 800503a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0310 	and.w	r3, r3, #16
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00a      	beq.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800504a:	4b7f      	ldr	r3, [pc, #508]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005050:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	497b      	ldr	r1, [pc, #492]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800505a:	4313      	orrs	r3, r2
 800505c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0320 	and.w	r3, r3, #32
 8005068:	2b00      	cmp	r3, #0
 800506a:	d00a      	beq.n	8005082 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800506c:	4b76      	ldr	r3, [pc, #472]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005072:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	4973      	ldr	r1, [pc, #460]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800507c:	4313      	orrs	r3, r2
 800507e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800508e:	4b6e      	ldr	r3, [pc, #440]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005094:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	496a      	ldr	r1, [pc, #424]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00a      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80050b0:	4b65      	ldr	r3, [pc, #404]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	4962      	ldr	r1, [pc, #392]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050c0:	4313      	orrs	r3, r2
 80050c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00a      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80050d2:	4b5d      	ldr	r3, [pc, #372]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050d8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	4959      	ldr	r1, [pc, #356]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d00a      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80050f4:	4b54      	ldr	r3, [pc, #336]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80050f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050fa:	f023 0203 	bic.w	r2, r3, #3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005102:	4951      	ldr	r1, [pc, #324]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005104:	4313      	orrs	r3, r2
 8005106:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005112:	2b00      	cmp	r3, #0
 8005114:	d00a      	beq.n	800512c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005116:	4b4c      	ldr	r3, [pc, #304]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800511c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005124:	4948      	ldr	r1, [pc, #288]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005126:	4313      	orrs	r3, r2
 8005128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005134:	2b00      	cmp	r3, #0
 8005136:	d015      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005138:	4b43      	ldr	r3, [pc, #268]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800513a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800513e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005146:	4940      	ldr	r1, [pc, #256]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005148:	4313      	orrs	r3, r2
 800514a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005152:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005156:	d105      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005158:	4b3b      	ldr	r3, [pc, #236]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	4a3a      	ldr	r2, [pc, #232]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800515e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005162:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005170:	4b35      	ldr	r3, [pc, #212]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005176:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517e:	4932      	ldr	r1, [pc, #200]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800518a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800518e:	d105      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005190:	4b2d      	ldr	r3, [pc, #180]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a2c      	ldr	r2, [pc, #176]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005196:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800519a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d015      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80051a8:	4b27      	ldr	r3, [pc, #156]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b6:	4924      	ldr	r1, [pc, #144]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051b8:	4313      	orrs	r3, r2
 80051ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80051c6:	d105      	bne.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051c8:	4b1f      	ldr	r3, [pc, #124]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051d2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d015      	beq.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051e0:	4b19      	ldr	r3, [pc, #100]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051ee:	4916      	ldr	r1, [pc, #88]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051fe:	d105      	bne.n	800520c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005200:	4b11      	ldr	r3, [pc, #68]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	4a10      	ldr	r2, [pc, #64]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005206:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800520a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d019      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005218:	4b0b      	ldr	r3, [pc, #44]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800521a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800521e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	4908      	ldr	r1, [pc, #32]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005228:	4313      	orrs	r3, r2
 800522a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005232:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005236:	d109      	bne.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005238:	4b03      	ldr	r3, [pc, #12]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4a02      	ldr	r2, [pc, #8]	@ (8005248 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800523e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005242:	60d3      	str	r3, [r2, #12]
 8005244:	e002      	b.n	800524c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005246:	bf00      	nop
 8005248:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005258:	4b29      	ldr	r3, [pc, #164]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800525a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800525e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005266:	4926      	ldr	r1, [pc, #152]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005268:	4313      	orrs	r3, r2
 800526a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005272:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005276:	d105      	bne.n	8005284 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005278:	4b21      	ldr	r3, [pc, #132]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	4a20      	ldr	r2, [pc, #128]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800527e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005282:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d015      	beq.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005290:	4b1b      	ldr	r3, [pc, #108]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005296:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800529e:	4918      	ldr	r1, [pc, #96]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ae:	d105      	bne.n	80052bc <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80052b0:	4b13      	ldr	r3, [pc, #76]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052b2:	68db      	ldr	r3, [r3, #12]
 80052b4:	4a12      	ldr	r2, [pc, #72]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052ba:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d015      	beq.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80052c8:	4b0d      	ldr	r3, [pc, #52]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80052ce:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052d6:	490a      	ldr	r1, [pc, #40]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052e2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052e6:	d105      	bne.n	80052f4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052e8:	4b05      	ldr	r3, [pc, #20]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	4a04      	ldr	r2, [pc, #16]	@ (8005300 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80052ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80052f2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80052f4:	7cbb      	ldrb	r3, [r7, #18]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000

08005304 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d101      	bne.n	8005316 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005312:	2301      	movs	r3, #1
 8005314:	e049      	b.n	80053aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d106      	bne.n	8005330 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	f7fc f988 	bl	8001640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2202      	movs	r2, #2
 8005334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f000 fb46 	bl	80059d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d001      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e054      	b.n	8005476 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a26      	ldr	r2, [pc, #152]	@ (8005484 <HAL_TIM_Base_Start_IT+0xd0>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053f6:	d01d      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a22      	ldr	r2, [pc, #136]	@ (8005488 <HAL_TIM_Base_Start_IT+0xd4>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a21      	ldr	r2, [pc, #132]	@ (800548c <HAL_TIM_Base_Start_IT+0xd8>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1f      	ldr	r2, [pc, #124]	@ (8005490 <HAL_TIM_Base_Start_IT+0xdc>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1e      	ldr	r2, [pc, #120]	@ (8005494 <HAL_TIM_Base_Start_IT+0xe0>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1c      	ldr	r2, [pc, #112]	@ (8005498 <HAL_TIM_Base_Start_IT+0xe4>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1b      	ldr	r2, [pc, #108]	@ (800549c <HAL_TIM_Base_Start_IT+0xe8>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d115      	bne.n	8005460 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	4b19      	ldr	r3, [pc, #100]	@ (80054a0 <HAL_TIM_Base_Start_IT+0xec>)
 800543c:	4013      	ands	r3, r2
 800543e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b06      	cmp	r3, #6
 8005444:	d015      	beq.n	8005472 <HAL_TIM_Base_Start_IT+0xbe>
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544c:	d011      	beq.n	8005472 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	e008      	b.n	8005472 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e000      	b.n	8005474 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40012c00 	.word	0x40012c00
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40000c00 	.word	0x40000c00
 8005494:	40013400 	.word	0x40013400
 8005498:	40014000 	.word	0x40014000
 800549c:	40015000 	.word	0x40015000
 80054a0:	00010007 	.word	0x00010007

080054a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d020      	beq.n	8005508 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d01b      	beq.n	8005508 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f06f 0202 	mvn.w	r2, #2
 80054d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2201      	movs	r2, #1
 80054de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	f003 0303 	and.w	r3, r3, #3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d003      	beq.n	80054f6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f000 fa52 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 80054f4:	e005      	b.n	8005502 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa44 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f000 fa55 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	f003 0304 	and.w	r3, r3, #4
 800550e:	2b00      	cmp	r3, #0
 8005510:	d020      	beq.n	8005554 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01b      	beq.n	8005554 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f06f 0204 	mvn.w	r2, #4
 8005524:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2202      	movs	r2, #2
 800552a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005536:	2b00      	cmp	r3, #0
 8005538:	d003      	beq.n	8005542 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 fa2c 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 8005540:	e005      	b.n	800554e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 fa1e 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 fa2f 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f003 0308 	and.w	r3, r3, #8
 800555a:	2b00      	cmp	r3, #0
 800555c:	d020      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f003 0308 	and.w	r3, r3, #8
 8005564:	2b00      	cmp	r3, #0
 8005566:	d01b      	beq.n	80055a0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0208 	mvn.w	r2, #8
 8005570:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2204      	movs	r2, #4
 8005576:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	69db      	ldr	r3, [r3, #28]
 800557e:	f003 0303 	and.w	r3, r3, #3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 fa06 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 800558c:	e005      	b.n	800559a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9f8 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f000 fa09 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2200      	movs	r2, #0
 800559e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d020      	beq.n	80055ec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d01b      	beq.n	80055ec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0210 	mvn.w	r2, #16
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2208      	movs	r2, #8
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f9e0 	bl	8005998 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f9d2 	bl	8005984 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f9e3 	bl	80059ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00c      	beq.n	8005610 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d007      	beq.n	8005610 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0201 	mvn.w	r2, #1
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f9b0 	bl	8005970 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d104      	bne.n	8005624 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00c      	beq.n	800563e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005636:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f000 fbbb 	bl	8005db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d00c      	beq.n	8005662 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800564e:	2b00      	cmp	r3, #0
 8005650:	d007      	beq.n	8005662 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800565a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f000 fbb3 	bl	8005dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00c      	beq.n	8005686 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800567e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f99d 	bl	80059c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	f003 0320 	and.w	r3, r3, #32
 800568c:	2b00      	cmp	r3, #0
 800568e:	d00c      	beq.n	80056aa <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f003 0320 	and.w	r3, r3, #32
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f06f 0220 	mvn.w	r2, #32
 80056a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fb7b 	bl	8005da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00c      	beq.n	80056ce <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d007      	beq.n	80056ce <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80056c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fb87 	bl	8005ddc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00c      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d007      	beq.n	80056f2 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80056ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fb7f 	bl	8005df0 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00c      	beq.n	8005716 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d007      	beq.n	8005716 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800570e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fb77 	bl	8005e04 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d00c      	beq.n	800573a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d007      	beq.n	800573a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f000 fb6f 	bl	8005e18 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800573a:	bf00      	nop
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIM_ConfigClockSource+0x1c>
 800575c:	2302      	movs	r3, #2
 800575e:	e0f6      	b.n	800594e <HAL_TIM_ConfigClockSource+0x20a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800577e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800578a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68ba      	ldr	r2, [r7, #8]
 8005792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a6f      	ldr	r2, [pc, #444]	@ (8005958 <HAL_TIM_ConfigClockSource+0x214>)
 800579a:	4293      	cmp	r3, r2
 800579c:	f000 80c1 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 80057a0:	4a6d      	ldr	r2, [pc, #436]	@ (8005958 <HAL_TIM_ConfigClockSource+0x214>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	f200 80c6 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 80057a8:	4a6c      	ldr	r2, [pc, #432]	@ (800595c <HAL_TIM_ConfigClockSource+0x218>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	f000 80b9 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 80057b0:	4a6a      	ldr	r2, [pc, #424]	@ (800595c <HAL_TIM_ConfigClockSource+0x218>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	f200 80be 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 80057b8:	4a69      	ldr	r2, [pc, #420]	@ (8005960 <HAL_TIM_ConfigClockSource+0x21c>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	f000 80b1 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 80057c0:	4a67      	ldr	r2, [pc, #412]	@ (8005960 <HAL_TIM_ConfigClockSource+0x21c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	f200 80b6 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 80057c8:	4a66      	ldr	r2, [pc, #408]	@ (8005964 <HAL_TIM_ConfigClockSource+0x220>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	f000 80a9 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 80057d0:	4a64      	ldr	r2, [pc, #400]	@ (8005964 <HAL_TIM_ConfigClockSource+0x220>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	f200 80ae 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 80057d8:	4a63      	ldr	r2, [pc, #396]	@ (8005968 <HAL_TIM_ConfigClockSource+0x224>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	f000 80a1 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 80057e0:	4a61      	ldr	r2, [pc, #388]	@ (8005968 <HAL_TIM_ConfigClockSource+0x224>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	f200 80a6 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 80057e8:	4a60      	ldr	r2, [pc, #384]	@ (800596c <HAL_TIM_ConfigClockSource+0x228>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	f000 8099 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 80057f0:	4a5e      	ldr	r2, [pc, #376]	@ (800596c <HAL_TIM_ConfigClockSource+0x228>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	f200 809e 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 80057f8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80057fc:	f000 8091 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 8005800:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005804:	f200 8096 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 8005808:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800580c:	f000 8089 	beq.w	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 8005810:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005814:	f200 808e 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 8005818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800581c:	d03e      	beq.n	800589c <HAL_TIM_ConfigClockSource+0x158>
 800581e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005822:	f200 8087 	bhi.w	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 8005826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800582a:	f000 8086 	beq.w	800593a <HAL_TIM_ConfigClockSource+0x1f6>
 800582e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005832:	d87f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 8005834:	2b70      	cmp	r3, #112	@ 0x70
 8005836:	d01a      	beq.n	800586e <HAL_TIM_ConfigClockSource+0x12a>
 8005838:	2b70      	cmp	r3, #112	@ 0x70
 800583a:	d87b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 800583c:	2b60      	cmp	r3, #96	@ 0x60
 800583e:	d050      	beq.n	80058e2 <HAL_TIM_ConfigClockSource+0x19e>
 8005840:	2b60      	cmp	r3, #96	@ 0x60
 8005842:	d877      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 8005844:	2b50      	cmp	r3, #80	@ 0x50
 8005846:	d03c      	beq.n	80058c2 <HAL_TIM_ConfigClockSource+0x17e>
 8005848:	2b50      	cmp	r3, #80	@ 0x50
 800584a:	d873      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 800584c:	2b40      	cmp	r3, #64	@ 0x40
 800584e:	d058      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0x1be>
 8005850:	2b40      	cmp	r3, #64	@ 0x40
 8005852:	d86f      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 8005854:	2b30      	cmp	r3, #48	@ 0x30
 8005856:	d064      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 8005858:	2b30      	cmp	r3, #48	@ 0x30
 800585a:	d86b      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 800585c:	2b20      	cmp	r3, #32
 800585e:	d060      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 8005860:	2b20      	cmp	r3, #32
 8005862:	d867      	bhi.n	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
 8005864:	2b00      	cmp	r3, #0
 8005866:	d05c      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 8005868:	2b10      	cmp	r3, #16
 800586a:	d05a      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x1de>
 800586c:	e062      	b.n	8005934 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800587e:	f000 f9d9 	bl	8005c34 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68ba      	ldr	r2, [r7, #8]
 8005898:	609a      	str	r2, [r3, #8]
      break;
 800589a:	e04f      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80058ac:	f000 f9c2 	bl	8005c34 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689a      	ldr	r2, [r3, #8]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80058be:	609a      	str	r2, [r3, #8]
      break;
 80058c0:	e03c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ce:	461a      	mov	r2, r3
 80058d0:	f000 f934 	bl	8005b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2150      	movs	r1, #80	@ 0x50
 80058da:	4618      	mov	r0, r3
 80058dc:	f000 f98d 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 80058e0:	e02c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ee:	461a      	mov	r2, r3
 80058f0:	f000 f953 	bl	8005b9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2160      	movs	r1, #96	@ 0x60
 80058fa:	4618      	mov	r0, r3
 80058fc:	f000 f97d 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 8005900:	e01c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800590e:	461a      	mov	r2, r3
 8005910:	f000 f914 	bl	8005b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2140      	movs	r1, #64	@ 0x40
 800591a:	4618      	mov	r0, r3
 800591c:	f000 f96d 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 8005920:	e00c      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4619      	mov	r1, r3
 800592c:	4610      	mov	r0, r2
 800592e:	f000 f964 	bl	8005bfa <TIM_ITRx_SetConfig>
      break;
 8005932:	e003      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005934:	2301      	movs	r3, #1
 8005936:	73fb      	strb	r3, [r7, #15]
      break;
 8005938:	e000      	b.n	800593c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800593a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800594c:	7bfb      	ldrb	r3, [r7, #15]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3710      	adds	r7, #16
 8005952:	46bd      	mov	sp, r7
 8005954:	bd80      	pop	{r7, pc}
 8005956:	bf00      	nop
 8005958:	00100070 	.word	0x00100070
 800595c:	00100060 	.word	0x00100060
 8005960:	00100050 	.word	0x00100050
 8005964:	00100040 	.word	0x00100040
 8005968:	00100030 	.word	0x00100030
 800596c:	00100020 	.word	0x00100020

08005970 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005978:	bf00      	nop
 800597a:	370c      	adds	r7, #12
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr

08005984 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005998:	b480      	push	{r7}
 800599a:	b083      	sub	sp, #12
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059a0:	bf00      	nop
 80059a2:	370c      	adds	r7, #12
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b083      	sub	sp, #12
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059b4:	bf00      	nop
 80059b6:	370c      	adds	r7, #12
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a4c      	ldr	r2, [pc, #304]	@ (8005b18 <TIM_Base_SetConfig+0x144>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d017      	beq.n	8005a1c <TIM_Base_SetConfig+0x48>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059f2:	d013      	beq.n	8005a1c <TIM_Base_SetConfig+0x48>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a49      	ldr	r2, [pc, #292]	@ (8005b1c <TIM_Base_SetConfig+0x148>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00f      	beq.n	8005a1c <TIM_Base_SetConfig+0x48>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a48      	ldr	r2, [pc, #288]	@ (8005b20 <TIM_Base_SetConfig+0x14c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d00b      	beq.n	8005a1c <TIM_Base_SetConfig+0x48>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a47      	ldr	r2, [pc, #284]	@ (8005b24 <TIM_Base_SetConfig+0x150>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d007      	beq.n	8005a1c <TIM_Base_SetConfig+0x48>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a46      	ldr	r2, [pc, #280]	@ (8005b28 <TIM_Base_SetConfig+0x154>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_Base_SetConfig+0x48>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a45      	ldr	r2, [pc, #276]	@ (8005b2c <TIM_Base_SetConfig+0x158>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d108      	bne.n	8005a2e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a39      	ldr	r2, [pc, #228]	@ (8005b18 <TIM_Base_SetConfig+0x144>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d023      	beq.n	8005a7e <TIM_Base_SetConfig+0xaa>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a3c:	d01f      	beq.n	8005a7e <TIM_Base_SetConfig+0xaa>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a36      	ldr	r2, [pc, #216]	@ (8005b1c <TIM_Base_SetConfig+0x148>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d01b      	beq.n	8005a7e <TIM_Base_SetConfig+0xaa>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a35      	ldr	r2, [pc, #212]	@ (8005b20 <TIM_Base_SetConfig+0x14c>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d017      	beq.n	8005a7e <TIM_Base_SetConfig+0xaa>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a34      	ldr	r2, [pc, #208]	@ (8005b24 <TIM_Base_SetConfig+0x150>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d013      	beq.n	8005a7e <TIM_Base_SetConfig+0xaa>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a33      	ldr	r2, [pc, #204]	@ (8005b28 <TIM_Base_SetConfig+0x154>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d00f      	beq.n	8005a7e <TIM_Base_SetConfig+0xaa>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a33      	ldr	r2, [pc, #204]	@ (8005b30 <TIM_Base_SetConfig+0x15c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d00b      	beq.n	8005a7e <TIM_Base_SetConfig+0xaa>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a32      	ldr	r2, [pc, #200]	@ (8005b34 <TIM_Base_SetConfig+0x160>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d007      	beq.n	8005a7e <TIM_Base_SetConfig+0xaa>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a31      	ldr	r2, [pc, #196]	@ (8005b38 <TIM_Base_SetConfig+0x164>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_Base_SetConfig+0xaa>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a2c      	ldr	r2, [pc, #176]	@ (8005b2c <TIM_Base_SetConfig+0x158>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d108      	bne.n	8005a90 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	68fa      	ldr	r2, [r7, #12]
 8005aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a18      	ldr	r2, [pc, #96]	@ (8005b18 <TIM_Base_SetConfig+0x144>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d013      	beq.n	8005ae4 <TIM_Base_SetConfig+0x110>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a1a      	ldr	r2, [pc, #104]	@ (8005b28 <TIM_Base_SetConfig+0x154>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d00f      	beq.n	8005ae4 <TIM_Base_SetConfig+0x110>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b30 <TIM_Base_SetConfig+0x15c>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d00b      	beq.n	8005ae4 <TIM_Base_SetConfig+0x110>
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a19      	ldr	r2, [pc, #100]	@ (8005b34 <TIM_Base_SetConfig+0x160>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d007      	beq.n	8005ae4 <TIM_Base_SetConfig+0x110>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a18      	ldr	r2, [pc, #96]	@ (8005b38 <TIM_Base_SetConfig+0x164>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_Base_SetConfig+0x110>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a13      	ldr	r2, [pc, #76]	@ (8005b2c <TIM_Base_SetConfig+0x158>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d105      	bne.n	8005b0a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	691b      	ldr	r3, [r3, #16]
 8005b02:	f023 0201 	bic.w	r2, r3, #1
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	611a      	str	r2, [r3, #16]
  }
}
 8005b0a:	bf00      	nop
 8005b0c:	3714      	adds	r7, #20
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40000400 	.word	0x40000400
 8005b20:	40000800 	.word	0x40000800
 8005b24:	40000c00 	.word	0x40000c00
 8005b28:	40013400 	.word	0x40013400
 8005b2c:	40015000 	.word	0x40015000
 8005b30:	40014000 	.word	0x40014000
 8005b34:	40014400 	.word	0x40014400
 8005b38:	40014800 	.word	0x40014800

08005b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6a1b      	ldr	r3, [r3, #32]
 8005b52:	f023 0201 	bic.w	r2, r3, #1
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	011b      	lsls	r3, r3, #4
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 030a 	bic.w	r3, r3, #10
 8005b78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	621a      	str	r2, [r3, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	371c      	adds	r7, #28
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b087      	sub	sp, #28
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	6a1b      	ldr	r3, [r3, #32]
 8005bb0:	f023 0210 	bic.w	r2, r3, #16
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	699b      	ldr	r3, [r3, #24]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	031b      	lsls	r3, r3, #12
 8005bca:	693a      	ldr	r2, [r7, #16]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005bd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005c10:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c16:	683a      	ldr	r2, [r7, #0]
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	f043 0307 	orr.w	r3, r3, #7
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	68fa      	ldr	r2, [r7, #12]
 8005c26:	609a      	str	r2, [r3, #8]
}
 8005c28:	bf00      	nop
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b087      	sub	sp, #28
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
 8005c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	021a      	lsls	r2, r3, #8
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	431a      	orrs	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	697a      	ldr	r2, [r7, #20]
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	bf00      	nop
 8005c6a:	371c      	adds	r7, #28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d101      	bne.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c88:	2302      	movs	r3, #2
 8005c8a:	e074      	b.n	8005d76 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2202      	movs	r2, #2
 8005c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a34      	ldr	r2, [pc, #208]	@ (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d009      	beq.n	8005cca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a33      	ldr	r2, [pc, #204]	@ (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d004      	beq.n	8005cca <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	4a31      	ldr	r2, [pc, #196]	@ (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d108      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005cd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005ce2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ce6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	68fa      	ldr	r2, [r7, #12]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a21      	ldr	r2, [pc, #132]	@ (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d022      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d0c:	d01d      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a1f      	ldr	r2, [pc, #124]	@ (8005d90 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d018      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a1d      	ldr	r2, [pc, #116]	@ (8005d94 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d013      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a1c      	ldr	r2, [pc, #112]	@ (8005d98 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d00e      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a15      	ldr	r2, [pc, #84]	@ (8005d88 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d009      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a18      	ldr	r2, [pc, #96]	@ (8005d9c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d004      	beq.n	8005d4a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a11      	ldr	r2, [pc, #68]	@ (8005d8c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d10c      	bne.n	8005d64 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	4313      	orrs	r3, r2
 8005d5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d74:	2300      	movs	r3, #0
}
 8005d76:	4618      	mov	r0, r3
 8005d78:	3714      	adds	r7, #20
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d80:	4770      	bx	lr
 8005d82:	bf00      	nop
 8005d84:	40012c00 	.word	0x40012c00
 8005d88:	40013400 	.word	0x40013400
 8005d8c:	40015000 	.word	0x40015000
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800
 8005d98:	40000c00 	.word	0x40000c00
 8005d9c:	40014000 	.word	0x40014000

08005da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005de4:	bf00      	nop
 8005de6:	370c      	adds	r7, #12
 8005de8:	46bd      	mov	sp, r7
 8005dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dee:	4770      	bx	lr

08005df0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e2c:	b580      	push	{r7, lr}
 8005e2e:	b082      	sub	sp, #8
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d101      	bne.n	8005e3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	e042      	b.n	8005ec4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d106      	bne.n	8005e56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7fb faa5 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2224      	movs	r2, #36	@ 0x24
 8005e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f022 0201 	bic.w	r2, r2, #1
 8005e6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d002      	beq.n	8005e7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f000 fc28 	bl	80066cc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 f929 	bl	80060d4 <UART_SetConfig>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d101      	bne.n	8005e8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e01b      	b.n	8005ec4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	685a      	ldr	r2, [r3, #4]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005e9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689a      	ldr	r2, [r3, #8]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005eaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f042 0201 	orr.w	r2, r2, #1
 8005eba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fca7 	bl	8006810 <UART_CheckIdleState>
 8005ec2:	4603      	mov	r3, r0
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08a      	sub	sp, #40	@ 0x28
 8005ed0:	af02      	add	r7, sp, #8
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	603b      	str	r3, [r7, #0]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee2:	2b20      	cmp	r3, #32
 8005ee4:	d17b      	bne.n	8005fde <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ee6:	68bb      	ldr	r3, [r7, #8]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d002      	beq.n	8005ef2 <HAL_UART_Transmit+0x26>
 8005eec:	88fb      	ldrh	r3, [r7, #6]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e074      	b.n	8005fe0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2221      	movs	r2, #33	@ 0x21
 8005f02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005f06:	f7fb fdb7 	bl	8001a78 <HAL_GetTick>
 8005f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	88fa      	ldrh	r2, [r7, #6]
 8005f10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f24:	d108      	bne.n	8005f38 <HAL_UART_Transmit+0x6c>
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	61bb      	str	r3, [r7, #24]
 8005f36:	e003      	b.n	8005f40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005f40:	e030      	b.n	8005fa4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	9300      	str	r3, [sp, #0]
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2180      	movs	r1, #128	@ 0x80
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f000 fd09 	bl	8006964 <UART_WaitOnFlagUntilTimeout>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d005      	beq.n	8005f64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2220      	movs	r2, #32
 8005f5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005f60:	2303      	movs	r3, #3
 8005f62:	e03d      	b.n	8005fe0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d10b      	bne.n	8005f82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	881b      	ldrh	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005f78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	3302      	adds	r3, #2
 8005f7e:	61bb      	str	r3, [r7, #24]
 8005f80:	e007      	b.n	8005f92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005f82:	69fb      	ldr	r3, [r7, #28]
 8005f84:	781a      	ldrb	r2, [r3, #0]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29a      	uxth	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005faa:	b29b      	uxth	r3, r3
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1c8      	bne.n	8005f42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	9300      	str	r3, [sp, #0]
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	2140      	movs	r1, #64	@ 0x40
 8005fba:	68f8      	ldr	r0, [r7, #12]
 8005fbc:	f000 fcd2 	bl	8006964 <UART_WaitOnFlagUntilTimeout>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d005      	beq.n	8005fd2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2220      	movs	r2, #32
 8005fca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e006      	b.n	8005fe0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	2220      	movs	r2, #32
 8005fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	e000      	b.n	8005fe0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005fde:	2302      	movs	r3, #2
  }
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3720      	adds	r7, #32
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08a      	sub	sp, #40	@ 0x28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005ffc:	2b20      	cmp	r3, #32
 8005ffe:	d137      	bne.n	8006070 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d002      	beq.n	800600c <HAL_UART_Receive_DMA+0x24>
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d101      	bne.n	8006010 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e030      	b.n	8006072 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2200      	movs	r2, #0
 8006014:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a18      	ldr	r2, [pc, #96]	@ (800607c <HAL_UART_Receive_DMA+0x94>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d01f      	beq.n	8006060 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d018      	beq.n	8006060 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006042:	627b      	str	r3, [r7, #36]	@ 0x24
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604c:	623b      	str	r3, [r7, #32]
 800604e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	61bb      	str	r3, [r7, #24]
   return(result);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e6      	bne.n	800602e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006060:	88fb      	ldrh	r3, [r7, #6]
 8006062:	461a      	mov	r2, r3
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fcea 	bl	8006a40 <UART_Start_Receive_DMA>
 800606c:	4603      	mov	r3, r0
 800606e:	e000      	b.n	8006072 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006070:	2302      	movs	r3, #2
  }
}
 8006072:	4618      	mov	r0, r3
 8006074:	3728      	adds	r7, #40	@ 0x28
 8006076:	46bd      	mov	sp, r7
 8006078:	bd80      	pop	{r7, pc}
 800607a:	bf00      	nop
 800607c:	40008000 	.word	0x40008000

08006080 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b083      	sub	sp, #12
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800609c:	bf00      	nop
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80060b0:	bf00      	nop
 80060b2:	370c      	adds	r7, #12
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80060bc:	b480      	push	{r7}
 80060be:	b083      	sub	sp, #12
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060d8:	b08c      	sub	sp, #48	@ 0x30
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	689a      	ldr	r2, [r3, #8]
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	431a      	orrs	r2, r3
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	4baa      	ldr	r3, [pc, #680]	@ (80063ac <UART_SetConfig+0x2d8>)
 8006104:	4013      	ands	r3, r2
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	6812      	ldr	r2, [r2, #0]
 800610a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800610c:	430b      	orrs	r3, r1
 800610e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	430a      	orrs	r2, r1
 8006124:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a9f      	ldr	r2, [pc, #636]	@ (80063b0 <UART_SetConfig+0x2dc>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800613c:	4313      	orrs	r3, r2
 800613e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800614a:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800614e:	697a      	ldr	r2, [r7, #20]
 8006150:	6812      	ldr	r2, [r2, #0]
 8006152:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006154:	430b      	orrs	r3, r1
 8006156:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615e:	f023 010f 	bic.w	r1, r3, #15
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	430a      	orrs	r2, r1
 800616c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a90      	ldr	r2, [pc, #576]	@ (80063b4 <UART_SetConfig+0x2e0>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d125      	bne.n	80061c4 <UART_SetConfig+0xf0>
 8006178:	4b8f      	ldr	r3, [pc, #572]	@ (80063b8 <UART_SetConfig+0x2e4>)
 800617a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800617e:	f003 0303 	and.w	r3, r3, #3
 8006182:	2b03      	cmp	r3, #3
 8006184:	d81a      	bhi.n	80061bc <UART_SetConfig+0xe8>
 8006186:	a201      	add	r2, pc, #4	@ (adr r2, 800618c <UART_SetConfig+0xb8>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	0800619d 	.word	0x0800619d
 8006190:	080061ad 	.word	0x080061ad
 8006194:	080061a5 	.word	0x080061a5
 8006198:	080061b5 	.word	0x080061b5
 800619c:	2301      	movs	r3, #1
 800619e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061a2:	e116      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80061a4:	2302      	movs	r3, #2
 80061a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061aa:	e112      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80061ac:	2304      	movs	r3, #4
 80061ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061b2:	e10e      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80061b4:	2308      	movs	r3, #8
 80061b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061ba:	e10a      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80061bc:	2310      	movs	r3, #16
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80061c2:	e106      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a7c      	ldr	r2, [pc, #496]	@ (80063bc <UART_SetConfig+0x2e8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d138      	bne.n	8006240 <UART_SetConfig+0x16c>
 80061ce:	4b7a      	ldr	r3, [pc, #488]	@ (80063b8 <UART_SetConfig+0x2e4>)
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061d4:	f003 030c 	and.w	r3, r3, #12
 80061d8:	2b0c      	cmp	r3, #12
 80061da:	d82d      	bhi.n	8006238 <UART_SetConfig+0x164>
 80061dc:	a201      	add	r2, pc, #4	@ (adr r2, 80061e4 <UART_SetConfig+0x110>)
 80061de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e2:	bf00      	nop
 80061e4:	08006219 	.word	0x08006219
 80061e8:	08006239 	.word	0x08006239
 80061ec:	08006239 	.word	0x08006239
 80061f0:	08006239 	.word	0x08006239
 80061f4:	08006229 	.word	0x08006229
 80061f8:	08006239 	.word	0x08006239
 80061fc:	08006239 	.word	0x08006239
 8006200:	08006239 	.word	0x08006239
 8006204:	08006221 	.word	0x08006221
 8006208:	08006239 	.word	0x08006239
 800620c:	08006239 	.word	0x08006239
 8006210:	08006239 	.word	0x08006239
 8006214:	08006231 	.word	0x08006231
 8006218:	2300      	movs	r3, #0
 800621a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800621e:	e0d8      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006220:	2302      	movs	r3, #2
 8006222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006226:	e0d4      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006228:	2304      	movs	r3, #4
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622e:	e0d0      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006230:	2308      	movs	r3, #8
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006236:	e0cc      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006238:	2310      	movs	r3, #16
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623e:	e0c8      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a5e      	ldr	r2, [pc, #376]	@ (80063c0 <UART_SetConfig+0x2ec>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d125      	bne.n	8006296 <UART_SetConfig+0x1c2>
 800624a:	4b5b      	ldr	r3, [pc, #364]	@ (80063b8 <UART_SetConfig+0x2e4>)
 800624c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006250:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006254:	2b30      	cmp	r3, #48	@ 0x30
 8006256:	d016      	beq.n	8006286 <UART_SetConfig+0x1b2>
 8006258:	2b30      	cmp	r3, #48	@ 0x30
 800625a:	d818      	bhi.n	800628e <UART_SetConfig+0x1ba>
 800625c:	2b20      	cmp	r3, #32
 800625e:	d00a      	beq.n	8006276 <UART_SetConfig+0x1a2>
 8006260:	2b20      	cmp	r3, #32
 8006262:	d814      	bhi.n	800628e <UART_SetConfig+0x1ba>
 8006264:	2b00      	cmp	r3, #0
 8006266:	d002      	beq.n	800626e <UART_SetConfig+0x19a>
 8006268:	2b10      	cmp	r3, #16
 800626a:	d008      	beq.n	800627e <UART_SetConfig+0x1aa>
 800626c:	e00f      	b.n	800628e <UART_SetConfig+0x1ba>
 800626e:	2300      	movs	r3, #0
 8006270:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006274:	e0ad      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006276:	2302      	movs	r3, #2
 8006278:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800627c:	e0a9      	b.n	80063d2 <UART_SetConfig+0x2fe>
 800627e:	2304      	movs	r3, #4
 8006280:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006284:	e0a5      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006286:	2308      	movs	r3, #8
 8006288:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800628c:	e0a1      	b.n	80063d2 <UART_SetConfig+0x2fe>
 800628e:	2310      	movs	r3, #16
 8006290:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006294:	e09d      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a4a      	ldr	r2, [pc, #296]	@ (80063c4 <UART_SetConfig+0x2f0>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d125      	bne.n	80062ec <UART_SetConfig+0x218>
 80062a0:	4b45      	ldr	r3, [pc, #276]	@ (80063b8 <UART_SetConfig+0x2e4>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062a6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80062ac:	d016      	beq.n	80062dc <UART_SetConfig+0x208>
 80062ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80062b0:	d818      	bhi.n	80062e4 <UART_SetConfig+0x210>
 80062b2:	2b80      	cmp	r3, #128	@ 0x80
 80062b4:	d00a      	beq.n	80062cc <UART_SetConfig+0x1f8>
 80062b6:	2b80      	cmp	r3, #128	@ 0x80
 80062b8:	d814      	bhi.n	80062e4 <UART_SetConfig+0x210>
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d002      	beq.n	80062c4 <UART_SetConfig+0x1f0>
 80062be:	2b40      	cmp	r3, #64	@ 0x40
 80062c0:	d008      	beq.n	80062d4 <UART_SetConfig+0x200>
 80062c2:	e00f      	b.n	80062e4 <UART_SetConfig+0x210>
 80062c4:	2300      	movs	r3, #0
 80062c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ca:	e082      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80062cc:	2302      	movs	r3, #2
 80062ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062d2:	e07e      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062da:	e07a      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80062dc:	2308      	movs	r3, #8
 80062de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062e2:	e076      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80062e4:	2310      	movs	r3, #16
 80062e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ea:	e072      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a35      	ldr	r2, [pc, #212]	@ (80063c8 <UART_SetConfig+0x2f4>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d12a      	bne.n	800634c <UART_SetConfig+0x278>
 80062f6:	4b30      	ldr	r3, [pc, #192]	@ (80063b8 <UART_SetConfig+0x2e4>)
 80062f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006300:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006304:	d01a      	beq.n	800633c <UART_SetConfig+0x268>
 8006306:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800630a:	d81b      	bhi.n	8006344 <UART_SetConfig+0x270>
 800630c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006310:	d00c      	beq.n	800632c <UART_SetConfig+0x258>
 8006312:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006316:	d815      	bhi.n	8006344 <UART_SetConfig+0x270>
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <UART_SetConfig+0x250>
 800631c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006320:	d008      	beq.n	8006334 <UART_SetConfig+0x260>
 8006322:	e00f      	b.n	8006344 <UART_SetConfig+0x270>
 8006324:	2300      	movs	r3, #0
 8006326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800632a:	e052      	b.n	80063d2 <UART_SetConfig+0x2fe>
 800632c:	2302      	movs	r3, #2
 800632e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006332:	e04e      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006334:	2304      	movs	r3, #4
 8006336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800633a:	e04a      	b.n	80063d2 <UART_SetConfig+0x2fe>
 800633c:	2308      	movs	r3, #8
 800633e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006342:	e046      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006344:	2310      	movs	r3, #16
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800634a:	e042      	b.n	80063d2 <UART_SetConfig+0x2fe>
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a17      	ldr	r2, [pc, #92]	@ (80063b0 <UART_SetConfig+0x2dc>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d13a      	bne.n	80063cc <UART_SetConfig+0x2f8>
 8006356:	4b18      	ldr	r3, [pc, #96]	@ (80063b8 <UART_SetConfig+0x2e4>)
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006360:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006364:	d01a      	beq.n	800639c <UART_SetConfig+0x2c8>
 8006366:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800636a:	d81b      	bhi.n	80063a4 <UART_SetConfig+0x2d0>
 800636c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006370:	d00c      	beq.n	800638c <UART_SetConfig+0x2b8>
 8006372:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006376:	d815      	bhi.n	80063a4 <UART_SetConfig+0x2d0>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <UART_SetConfig+0x2b0>
 800637c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006380:	d008      	beq.n	8006394 <UART_SetConfig+0x2c0>
 8006382:	e00f      	b.n	80063a4 <UART_SetConfig+0x2d0>
 8006384:	2300      	movs	r3, #0
 8006386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800638a:	e022      	b.n	80063d2 <UART_SetConfig+0x2fe>
 800638c:	2302      	movs	r3, #2
 800638e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006392:	e01e      	b.n	80063d2 <UART_SetConfig+0x2fe>
 8006394:	2304      	movs	r3, #4
 8006396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800639a:	e01a      	b.n	80063d2 <UART_SetConfig+0x2fe>
 800639c:	2308      	movs	r3, #8
 800639e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063a2:	e016      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80063a4:	2310      	movs	r3, #16
 80063a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063aa:	e012      	b.n	80063d2 <UART_SetConfig+0x2fe>
 80063ac:	cfff69f3 	.word	0xcfff69f3
 80063b0:	40008000 	.word	0x40008000
 80063b4:	40013800 	.word	0x40013800
 80063b8:	40021000 	.word	0x40021000
 80063bc:	40004400 	.word	0x40004400
 80063c0:	40004800 	.word	0x40004800
 80063c4:	40004c00 	.word	0x40004c00
 80063c8:	40005000 	.word	0x40005000
 80063cc:	2310      	movs	r3, #16
 80063ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4aae      	ldr	r2, [pc, #696]	@ (8006690 <UART_SetConfig+0x5bc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	f040 8097 	bne.w	800650c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80063de:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80063e2:	2b08      	cmp	r3, #8
 80063e4:	d823      	bhi.n	800642e <UART_SetConfig+0x35a>
 80063e6:	a201      	add	r2, pc, #4	@ (adr r2, 80063ec <UART_SetConfig+0x318>)
 80063e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ec:	08006411 	.word	0x08006411
 80063f0:	0800642f 	.word	0x0800642f
 80063f4:	08006419 	.word	0x08006419
 80063f8:	0800642f 	.word	0x0800642f
 80063fc:	0800641f 	.word	0x0800641f
 8006400:	0800642f 	.word	0x0800642f
 8006404:	0800642f 	.word	0x0800642f
 8006408:	0800642f 	.word	0x0800642f
 800640c:	08006427 	.word	0x08006427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006410:	f7fe fcb8 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 8006414:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006416:	e010      	b.n	800643a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006418:	4b9e      	ldr	r3, [pc, #632]	@ (8006694 <UART_SetConfig+0x5c0>)
 800641a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800641c:	e00d      	b.n	800643a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800641e:	f7fe fc43 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8006422:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006424:	e009      	b.n	800643a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006426:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800642a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800642c:	e005      	b.n	800643a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800642e:	2300      	movs	r3, #0
 8006430:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006438:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800643a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 8130 	beq.w	80066a2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006446:	4a94      	ldr	r2, [pc, #592]	@ (8006698 <UART_SetConfig+0x5c4>)
 8006448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800644c:	461a      	mov	r2, r3
 800644e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006450:	fbb3 f3f2 	udiv	r3, r3, r2
 8006454:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	4613      	mov	r3, r2
 800645c:	005b      	lsls	r3, r3, #1
 800645e:	4413      	add	r3, r2
 8006460:	69ba      	ldr	r2, [r7, #24]
 8006462:	429a      	cmp	r2, r3
 8006464:	d305      	bcc.n	8006472 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800646c:	69ba      	ldr	r2, [r7, #24]
 800646e:	429a      	cmp	r2, r3
 8006470:	d903      	bls.n	800647a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006478:	e113      	b.n	80066a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800647a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647c:	2200      	movs	r2, #0
 800647e:	60bb      	str	r3, [r7, #8]
 8006480:	60fa      	str	r2, [r7, #12]
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006486:	4a84      	ldr	r2, [pc, #528]	@ (8006698 <UART_SetConfig+0x5c4>)
 8006488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800648c:	b29b      	uxth	r3, r3
 800648e:	2200      	movs	r2, #0
 8006490:	603b      	str	r3, [r7, #0]
 8006492:	607a      	str	r2, [r7, #4]
 8006494:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006498:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800649c:	f7f9 ff18 	bl	80002d0 <__aeabi_uldivmod>
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4610      	mov	r0, r2
 80064a6:	4619      	mov	r1, r3
 80064a8:	f04f 0200 	mov.w	r2, #0
 80064ac:	f04f 0300 	mov.w	r3, #0
 80064b0:	020b      	lsls	r3, r1, #8
 80064b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064b6:	0202      	lsls	r2, r0, #8
 80064b8:	6979      	ldr	r1, [r7, #20]
 80064ba:	6849      	ldr	r1, [r1, #4]
 80064bc:	0849      	lsrs	r1, r1, #1
 80064be:	2000      	movs	r0, #0
 80064c0:	460c      	mov	r4, r1
 80064c2:	4605      	mov	r5, r0
 80064c4:	eb12 0804 	adds.w	r8, r2, r4
 80064c8:	eb43 0905 	adc.w	r9, r3, r5
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	685b      	ldr	r3, [r3, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	469a      	mov	sl, r3
 80064d4:	4693      	mov	fp, r2
 80064d6:	4652      	mov	r2, sl
 80064d8:	465b      	mov	r3, fp
 80064da:	4640      	mov	r0, r8
 80064dc:	4649      	mov	r1, r9
 80064de:	f7f9 fef7 	bl	80002d0 <__aeabi_uldivmod>
 80064e2:	4602      	mov	r2, r0
 80064e4:	460b      	mov	r3, r1
 80064e6:	4613      	mov	r3, r2
 80064e8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064f0:	d308      	bcc.n	8006504 <UART_SetConfig+0x430>
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064f8:	d204      	bcs.n	8006504 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	6a3a      	ldr	r2, [r7, #32]
 8006500:	60da      	str	r2, [r3, #12]
 8006502:	e0ce      	b.n	80066a2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006504:	2301      	movs	r3, #1
 8006506:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800650a:	e0ca      	b.n	80066a2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006514:	d166      	bne.n	80065e4 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006516:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800651a:	2b08      	cmp	r3, #8
 800651c:	d827      	bhi.n	800656e <UART_SetConfig+0x49a>
 800651e:	a201      	add	r2, pc, #4	@ (adr r2, 8006524 <UART_SetConfig+0x450>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006549 	.word	0x08006549
 8006528:	08006551 	.word	0x08006551
 800652c:	08006559 	.word	0x08006559
 8006530:	0800656f 	.word	0x0800656f
 8006534:	0800655f 	.word	0x0800655f
 8006538:	0800656f 	.word	0x0800656f
 800653c:	0800656f 	.word	0x0800656f
 8006540:	0800656f 	.word	0x0800656f
 8006544:	08006567 	.word	0x08006567
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006548:	f7fe fc1c 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 800654c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800654e:	e014      	b.n	800657a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006550:	f7fe fc2e 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8006554:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006556:	e010      	b.n	800657a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006558:	4b4e      	ldr	r3, [pc, #312]	@ (8006694 <UART_SetConfig+0x5c0>)
 800655a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800655c:	e00d      	b.n	800657a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800655e:	f7fe fba3 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8006562:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006564:	e009      	b.n	800657a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800656a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800656c:	e005      	b.n	800657a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006578:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	f000 8090 	beq.w	80066a2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006586:	4a44      	ldr	r2, [pc, #272]	@ (8006698 <UART_SetConfig+0x5c4>)
 8006588:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800658c:	461a      	mov	r2, r3
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	fbb3 f3f2 	udiv	r3, r3, r2
 8006594:	005a      	lsls	r2, r3, #1
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	085b      	lsrs	r3, r3, #1
 800659c:	441a      	add	r2, r3
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	685b      	ldr	r3, [r3, #4]
 80065a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065a8:	6a3b      	ldr	r3, [r7, #32]
 80065aa:	2b0f      	cmp	r3, #15
 80065ac:	d916      	bls.n	80065dc <UART_SetConfig+0x508>
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065b4:	d212      	bcs.n	80065dc <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065b6:	6a3b      	ldr	r3, [r7, #32]
 80065b8:	b29b      	uxth	r3, r3
 80065ba:	f023 030f 	bic.w	r3, r3, #15
 80065be:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f003 0307 	and.w	r3, r3, #7
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	8bfb      	ldrh	r3, [r7, #30]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	8bfa      	ldrh	r2, [r7, #30]
 80065d8:	60da      	str	r2, [r3, #12]
 80065da:	e062      	b.n	80066a2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80065e2:	e05e      	b.n	80066a2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065e4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065e8:	2b08      	cmp	r3, #8
 80065ea:	d828      	bhi.n	800663e <UART_SetConfig+0x56a>
 80065ec:	a201      	add	r2, pc, #4	@ (adr r2, 80065f4 <UART_SetConfig+0x520>)
 80065ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f2:	bf00      	nop
 80065f4:	08006619 	.word	0x08006619
 80065f8:	08006621 	.word	0x08006621
 80065fc:	08006629 	.word	0x08006629
 8006600:	0800663f 	.word	0x0800663f
 8006604:	0800662f 	.word	0x0800662f
 8006608:	0800663f 	.word	0x0800663f
 800660c:	0800663f 	.word	0x0800663f
 8006610:	0800663f 	.word	0x0800663f
 8006614:	08006637 	.word	0x08006637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006618:	f7fe fbb4 	bl	8004d84 <HAL_RCC_GetPCLK1Freq>
 800661c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800661e:	e014      	b.n	800664a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006620:	f7fe fbc6 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 8006624:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006626:	e010      	b.n	800664a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006628:	4b1a      	ldr	r3, [pc, #104]	@ (8006694 <UART_SetConfig+0x5c0>)
 800662a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800662c:	e00d      	b.n	800664a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800662e:	f7fe fb3b 	bl	8004ca8 <HAL_RCC_GetSysClockFreq>
 8006632:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006634:	e009      	b.n	800664a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800663a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800663c:	e005      	b.n	800664a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800663e:	2300      	movs	r3, #0
 8006640:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006648:	bf00      	nop
    }

    if (pclk != 0U)
 800664a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664c:	2b00      	cmp	r3, #0
 800664e:	d028      	beq.n	80066a2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006654:	4a10      	ldr	r2, [pc, #64]	@ (8006698 <UART_SetConfig+0x5c4>)
 8006656:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800665a:	461a      	mov	r2, r3
 800665c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800665e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	441a      	add	r2, r3
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006672:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	2b0f      	cmp	r3, #15
 8006678:	d910      	bls.n	800669c <UART_SetConfig+0x5c8>
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006680:	d20c      	bcs.n	800669c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	b29a      	uxth	r2, r3
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	60da      	str	r2, [r3, #12]
 800668c:	e009      	b.n	80066a2 <UART_SetConfig+0x5ce>
 800668e:	bf00      	nop
 8006690:	40008000 	.word	0x40008000
 8006694:	00f42400 	.word	0x00f42400
 8006698:	08008234 	.word	0x08008234
      }
      else
      {
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80066a2:	697b      	ldr	r3, [r7, #20]
 80066a4:	2201      	movs	r2, #1
 80066a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	2201      	movs	r2, #1
 80066ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2200      	movs	r2, #0
 80066b6:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2200      	movs	r2, #0
 80066bc:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80066be:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3730      	adds	r7, #48	@ 0x30
 80066c6:	46bd      	mov	sp, r7
 80066c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080066cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d8:	f003 0308 	and.w	r3, r3, #8
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	430a      	orrs	r2, r1
 800675a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006760:	f003 0310 	and.w	r3, r3, #16
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	430a      	orrs	r2, r1
 800677c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d01a      	beq.n	80067e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067ca:	d10a      	bne.n	80067e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	430a      	orrs	r2, r1
 80067e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00a      	beq.n	8006804 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	605a      	str	r2, [r3, #4]
  }
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b098      	sub	sp, #96	@ 0x60
 8006814:	af02      	add	r7, sp, #8
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006820:	f7fb f92a 	bl	8001a78 <HAL_GetTick>
 8006824:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0308 	and.w	r3, r3, #8
 8006830:	2b08      	cmp	r3, #8
 8006832:	d12f      	bne.n	8006894 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006834:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800683c:	2200      	movs	r2, #0
 800683e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 f88e 	bl	8006964 <UART_WaitOnFlagUntilTimeout>
 8006848:	4603      	mov	r3, r0
 800684a:	2b00      	cmp	r3, #0
 800684c:	d022      	beq.n	8006894 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800685c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800685e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006862:	653b      	str	r3, [r7, #80]	@ 0x50
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800686c:	647b      	str	r3, [r7, #68]	@ 0x44
 800686e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006872:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800687a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e6      	bne.n	800684e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2220      	movs	r2, #32
 8006884:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e063      	b.n	800695c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0304 	and.w	r3, r3, #4
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d149      	bne.n	8006936 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068a2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068aa:	2200      	movs	r2, #0
 80068ac:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 f857 	bl	8006964 <UART_WaitOnFlagUntilTimeout>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d03c      	beq.n	8006936 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	623b      	str	r3, [r7, #32]
   return(result);
 80068ca:	6a3b      	ldr	r3, [r7, #32]
 80068cc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068d0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068da:	633b      	str	r3, [r7, #48]	@ 0x30
 80068dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e6      	bne.n	80068bc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3308      	adds	r3, #8
 80068f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	e853 3f00 	ldrex	r3, [r3]
 80068fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f023 0301 	bic.w	r3, r3, #1
 8006904:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	3308      	adds	r3, #8
 800690c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800690e:	61fa      	str	r2, [r7, #28]
 8006910:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006912:	69b9      	ldr	r1, [r7, #24]
 8006914:	69fa      	ldr	r2, [r7, #28]
 8006916:	e841 2300 	strex	r3, r2, [r1]
 800691a:	617b      	str	r3, [r7, #20]
   return(result);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d1e5      	bne.n	80068ee <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2220      	movs	r2, #32
 8006926:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e012      	b.n	800695c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2220      	movs	r2, #32
 800693a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2220      	movs	r2, #32
 8006942:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800695a:	2300      	movs	r3, #0
}
 800695c:	4618      	mov	r0, r3
 800695e:	3758      	adds	r7, #88	@ 0x58
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	603b      	str	r3, [r7, #0]
 8006970:	4613      	mov	r3, r2
 8006972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006974:	e04f      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800697c:	d04b      	beq.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800697e:	f7fb f87b 	bl	8001a78 <HAL_GetTick>
 8006982:	4602      	mov	r2, r0
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	69ba      	ldr	r2, [r7, #24]
 800698a:	429a      	cmp	r2, r3
 800698c:	d302      	bcc.n	8006994 <UART_WaitOnFlagUntilTimeout+0x30>
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e04e      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f003 0304 	and.w	r3, r3, #4
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d037      	beq.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b80      	cmp	r3, #128	@ 0x80
 80069aa:	d034      	beq.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xb2>
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2b40      	cmp	r3, #64	@ 0x40
 80069b0:	d031      	beq.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	69db      	ldr	r3, [r3, #28]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b08      	cmp	r3, #8
 80069be:	d110      	bne.n	80069e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2208      	movs	r2, #8
 80069c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f000 f920 	bl	8006c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2208      	movs	r2, #8
 80069d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2200      	movs	r2, #0
 80069da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e029      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	69db      	ldr	r3, [r3, #28]
 80069e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069f0:	d111      	bne.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 f906 	bl	8006c0e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2220      	movs	r2, #32
 8006a06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a12:	2303      	movs	r3, #3
 8006a14:	e00f      	b.n	8006a36 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	69da      	ldr	r2, [r3, #28]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4013      	ands	r3, r2
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	bf0c      	ite	eq
 8006a26:	2301      	moveq	r3, #1
 8006a28:	2300      	movne	r3, #0
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	79fb      	ldrb	r3, [r7, #7]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d0a0      	beq.n	8006976 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3710      	adds	r7, #16
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
	...

08006a40 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b096      	sub	sp, #88	@ 0x58
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	88fa      	ldrh	r2, [r7, #6]
 8006a58:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	2222      	movs	r2, #34	@ 0x22
 8006a68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d02d      	beq.n	8006ad2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a7c:	4a40      	ldr	r2, [pc, #256]	@ (8006b80 <UART_Start_Receive_DMA+0x140>)
 8006a7e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a86:	4a3f      	ldr	r2, [pc, #252]	@ (8006b84 <UART_Start_Receive_DMA+0x144>)
 8006a88:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a90:	4a3d      	ldr	r2, [pc, #244]	@ (8006b88 <UART_Start_Receive_DMA+0x148>)
 8006a92:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	3324      	adds	r3, #36	@ 0x24
 8006aaa:	4619      	mov	r1, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ab0:	461a      	mov	r2, r3
 8006ab2:	88fb      	ldrh	r3, [r7, #6]
 8006ab4:	f7fb f9c6 	bl	8001e44 <HAL_DMA_Start_IT>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d009      	beq.n	8006ad2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	2210      	movs	r2, #16
 8006ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2220      	movs	r2, #32
 8006aca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e051      	b.n	8006b76 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d018      	beq.n	8006b0c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ae2:	e853 3f00 	ldrex	r3, [r3]
 8006ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006aee:	657b      	str	r3, [r7, #84]	@ 0x54
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	461a      	mov	r2, r3
 8006af6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006afa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e6      	bne.n	8006ada <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b16:	e853 3f00 	ldrex	r3, [r3]
 8006b1a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	f043 0301 	orr.w	r3, r3, #1
 8006b22:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	3308      	adds	r3, #8
 8006b2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006b2c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006b2e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b30:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b34:	e841 2300 	strex	r3, r2, [r1]
 8006b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1e5      	bne.n	8006b0c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	3308      	adds	r3, #8
 8006b46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	e853 3f00 	ldrex	r3, [r3]
 8006b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	3308      	adds	r3, #8
 8006b5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006b60:	623a      	str	r2, [r7, #32]
 8006b62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b64:	69f9      	ldr	r1, [r7, #28]
 8006b66:	6a3a      	ldr	r2, [r7, #32]
 8006b68:	e841 2300 	strex	r3, r2, [r1]
 8006b6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b6e:	69bb      	ldr	r3, [r7, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d1e5      	bne.n	8006b40 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3758      	adds	r7, #88	@ 0x58
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	08006cdb 	.word	0x08006cdb
 8006b84:	08006e07 	.word	0x08006e07
 8006b88:	08006e45 	.word	0x08006e45

08006b8c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b08f      	sub	sp, #60	@ 0x3c
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	e853 3f00 	ldrex	r3, [r3]
 8006ba0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ba2:	69fb      	ldr	r3, [r7, #28]
 8006ba4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006ba8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	461a      	mov	r2, r3
 8006bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006bb4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006bb8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bba:	e841 2300 	strex	r3, r2, [r1]
 8006bbe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d1e6      	bne.n	8006b94 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	3308      	adds	r3, #8
 8006bcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006bdc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	3308      	adds	r3, #8
 8006be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be6:	61ba      	str	r2, [r7, #24]
 8006be8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e5      	bne.n	8006bc6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006c02:	bf00      	nop
 8006c04:	373c      	adds	r7, #60	@ 0x3c
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c0e:	b480      	push	{r7}
 8006c10:	b095      	sub	sp, #84	@ 0x54
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c1e:	e853 3f00 	ldrex	r3, [r3]
 8006c22:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c26:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	461a      	mov	r2, r3
 8006c32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c34:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c36:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c38:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c3a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c3c:	e841 2300 	strex	r3, r2, [r1]
 8006c40:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1e6      	bne.n	8006c16 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	3308      	adds	r3, #8
 8006c4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	e853 3f00 	ldrex	r3, [r3]
 8006c56:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006c5e:	f023 0301 	bic.w	r3, r3, #1
 8006c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	3308      	adds	r3, #8
 8006c6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e3      	bne.n	8006c48 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c84:	2b01      	cmp	r3, #1
 8006c86:	d118      	bne.n	8006cba <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	e853 3f00 	ldrex	r3, [r3]
 8006c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	f023 0310 	bic.w	r3, r3, #16
 8006c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	461a      	mov	r2, r3
 8006ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca6:	61bb      	str	r3, [r7, #24]
 8006ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006caa:	6979      	ldr	r1, [r7, #20]
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	e841 2300 	strex	r3, r2, [r1]
 8006cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e6      	bne.n	8006c88 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2220      	movs	r2, #32
 8006cbe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006cce:	bf00      	nop
 8006cd0:	3754      	adds	r7, #84	@ 0x54
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b09c      	sub	sp, #112	@ 0x70
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ce6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f003 0320 	and.w	r3, r3, #32
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d171      	bne.n	8006dda <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006cfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d06:	e853 3f00 	ldrex	r3, [r3]
 8006d0a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	461a      	mov	r2, r3
 8006d1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d1e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d20:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d22:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d24:	e841 2300 	strex	r3, r2, [r1]
 8006d28:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d1e6      	bne.n	8006cfe <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	3308      	adds	r3, #8
 8006d36:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d3a:	e853 3f00 	ldrex	r3, [r3]
 8006d3e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006d42:	f023 0301 	bic.w	r3, r3, #1
 8006d46:	667b      	str	r3, [r7, #100]	@ 0x64
 8006d48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	3308      	adds	r3, #8
 8006d4e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006d50:	647a      	str	r2, [r7, #68]	@ 0x44
 8006d52:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d54:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006d56:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d58:	e841 2300 	strex	r3, r2, [r1]
 8006d5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006d5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d1e5      	bne.n	8006d30 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	3308      	adds	r3, #8
 8006d6a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d6e:	e853 3f00 	ldrex	r3, [r3]
 8006d72:	623b      	str	r3, [r7, #32]
   return(result);
 8006d74:	6a3b      	ldr	r3, [r7, #32]
 8006d76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3308      	adds	r3, #8
 8006d82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006d84:	633a      	str	r2, [r7, #48]	@ 0x30
 8006d86:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d88:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d8c:	e841 2300 	strex	r3, r2, [r1]
 8006d90:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006d92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d1e5      	bne.n	8006d64 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006d98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006da0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006da2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d118      	bne.n	8006dda <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	e853 3f00 	ldrex	r3, [r3]
 8006db4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f023 0310 	bic.w	r3, r3, #16
 8006dbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006dc6:	61fb      	str	r3, [r7, #28]
 8006dc8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dca:	69b9      	ldr	r1, [r7, #24]
 8006dcc:	69fa      	ldr	r2, [r7, #28]
 8006dce:	e841 2300 	strex	r3, r2, [r1]
 8006dd2:	617b      	str	r3, [r7, #20]
   return(result);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1e6      	bne.n	8006da8 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006dda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ddc:	2200      	movs	r2, #0
 8006dde:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006de0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006de2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d107      	bne.n	8006df8 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006dee:	4619      	mov	r1, r3
 8006df0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006df2:	f7ff f963 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006df6:	e002      	b.n	8006dfe <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006df8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006dfa:	f7ff f941 	bl	8006080 <HAL_UART_RxCpltCallback>
}
 8006dfe:	bf00      	nop
 8006e00:	3770      	adds	r7, #112	@ 0x70
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}

08006e06 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e06:	b580      	push	{r7, lr}
 8006e08:	b084      	sub	sp, #16
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d109      	bne.n	8006e36 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e28:	085b      	lsrs	r3, r3, #1
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff f944 	bl	80060bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e34:	e002      	b.n	8006e3c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006e36:	68f8      	ldr	r0, [r7, #12]
 8006e38:	f7ff f92c 	bl	8006094 <HAL_UART_RxHalfCpltCallback>
}
 8006e3c:	bf00      	nop
 8006e3e:	3710      	adds	r7, #16
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b086      	sub	sp, #24
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e50:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e58:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006e60:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e62:	697b      	ldr	r3, [r7, #20]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e6c:	2b80      	cmp	r3, #128	@ 0x80
 8006e6e:	d109      	bne.n	8006e84 <UART_DMAError+0x40>
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b21      	cmp	r3, #33	@ 0x21
 8006e74:	d106      	bne.n	8006e84 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006e7e:	6978      	ldr	r0, [r7, #20]
 8006e80:	f7ff fe84 	bl	8006b8c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006e84:	697b      	ldr	r3, [r7, #20]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e8e:	2b40      	cmp	r3, #64	@ 0x40
 8006e90:	d109      	bne.n	8006ea6 <UART_DMAError+0x62>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b22      	cmp	r3, #34	@ 0x22
 8006e96:	d106      	bne.n	8006ea6 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006ea0:	6978      	ldr	r0, [r7, #20]
 8006ea2:	f7ff feb4 	bl	8006c0e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eac:	f043 0210 	orr.w	r2, r3, #16
 8006eb0:	697b      	ldr	r3, [r7, #20]
 8006eb2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eb6:	6978      	ldr	r0, [r7, #20]
 8006eb8:	f7ff f8f6 	bl	80060a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ebc:	bf00      	nop
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006ec4:	b480      	push	{r7}
 8006ec6:	b085      	sub	sp, #20
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006ed2:	2b01      	cmp	r3, #1
 8006ed4:	d101      	bne.n	8006eda <HAL_UARTEx_DisableFifoMode+0x16>
 8006ed6:	2302      	movs	r3, #2
 8006ed8:	e027      	b.n	8006f2a <HAL_UARTEx_DisableFifoMode+0x66>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2201      	movs	r2, #1
 8006ede:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2224      	movs	r2, #36	@ 0x24
 8006ee6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f022 0201 	bic.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f08:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006f36:	b580      	push	{r7, lr}
 8006f38:	b084      	sub	sp, #16
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d101      	bne.n	8006f4e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006f4a:	2302      	movs	r3, #2
 8006f4c:	e02d      	b.n	8006faa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2224      	movs	r2, #36	@ 0x24
 8006f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	681a      	ldr	r2, [r3, #0]
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f022 0201 	bic.w	r2, r2, #1
 8006f74:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	689b      	ldr	r3, [r3, #8]
 8006f7c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	683a      	ldr	r2, [r7, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f850 	bl	8007030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2220      	movs	r2, #32
 8006f9c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}

08006fb2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fb2:	b580      	push	{r7, lr}
 8006fb4:	b084      	sub	sp, #16
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e02d      	b.n	8007026 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2224      	movs	r2, #36	@ 0x24
 8006fd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	681a      	ldr	r2, [r3, #0]
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	f022 0201 	bic.w	r2, r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f812 	bl	8007030 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
	...

08007030 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800703c:	2b00      	cmp	r3, #0
 800703e:	d108      	bne.n	8007052 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007050:	e031      	b.n	80070b6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007052:	2308      	movs	r3, #8
 8007054:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007056:	2308      	movs	r3, #8
 8007058:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	0e5b      	lsrs	r3, r3, #25
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0307 	and.w	r3, r3, #7
 8007068:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	0f5b      	lsrs	r3, r3, #29
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800707a:	7bbb      	ldrb	r3, [r7, #14]
 800707c:	7b3a      	ldrb	r2, [r7, #12]
 800707e:	4911      	ldr	r1, [pc, #68]	@ (80070c4 <UARTEx_SetNbDataToProcess+0x94>)
 8007080:	5c8a      	ldrb	r2, [r1, r2]
 8007082:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007086:	7b3a      	ldrb	r2, [r7, #12]
 8007088:	490f      	ldr	r1, [pc, #60]	@ (80070c8 <UARTEx_SetNbDataToProcess+0x98>)
 800708a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800708c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007090:	b29a      	uxth	r2, r3
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007098:	7bfb      	ldrb	r3, [r7, #15]
 800709a:	7b7a      	ldrb	r2, [r7, #13]
 800709c:	4909      	ldr	r1, [pc, #36]	@ (80070c4 <UARTEx_SetNbDataToProcess+0x94>)
 800709e:	5c8a      	ldrb	r2, [r1, r2]
 80070a0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80070a4:	7b7a      	ldrb	r2, [r7, #13]
 80070a6:	4908      	ldr	r1, [pc, #32]	@ (80070c8 <UARTEx_SetNbDataToProcess+0x98>)
 80070a8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80070aa:	fb93 f3f2 	sdiv	r3, r3, r2
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80070b6:	bf00      	nop
 80070b8:	3714      	adds	r7, #20
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr
 80070c2:	bf00      	nop
 80070c4:	0800824c 	.word	0x0800824c
 80070c8:	08008254 	.word	0x08008254

080070cc <rand>:
 80070cc:	4b16      	ldr	r3, [pc, #88]	@ (8007128 <rand+0x5c>)
 80070ce:	b510      	push	{r4, lr}
 80070d0:	681c      	ldr	r4, [r3, #0]
 80070d2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80070d4:	b9b3      	cbnz	r3, 8007104 <rand+0x38>
 80070d6:	2018      	movs	r0, #24
 80070d8:	f000 fa28 	bl	800752c <malloc>
 80070dc:	4602      	mov	r2, r0
 80070de:	6320      	str	r0, [r4, #48]	@ 0x30
 80070e0:	b920      	cbnz	r0, 80070ec <rand+0x20>
 80070e2:	4b12      	ldr	r3, [pc, #72]	@ (800712c <rand+0x60>)
 80070e4:	4812      	ldr	r0, [pc, #72]	@ (8007130 <rand+0x64>)
 80070e6:	2152      	movs	r1, #82	@ 0x52
 80070e8:	f000 f9b8 	bl	800745c <__assert_func>
 80070ec:	4911      	ldr	r1, [pc, #68]	@ (8007134 <rand+0x68>)
 80070ee:	4b12      	ldr	r3, [pc, #72]	@ (8007138 <rand+0x6c>)
 80070f0:	e9c0 1300 	strd	r1, r3, [r0]
 80070f4:	4b11      	ldr	r3, [pc, #68]	@ (800713c <rand+0x70>)
 80070f6:	6083      	str	r3, [r0, #8]
 80070f8:	230b      	movs	r3, #11
 80070fa:	8183      	strh	r3, [r0, #12]
 80070fc:	2100      	movs	r1, #0
 80070fe:	2001      	movs	r0, #1
 8007100:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007104:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007106:	480e      	ldr	r0, [pc, #56]	@ (8007140 <rand+0x74>)
 8007108:	690b      	ldr	r3, [r1, #16]
 800710a:	694c      	ldr	r4, [r1, #20]
 800710c:	4a0d      	ldr	r2, [pc, #52]	@ (8007144 <rand+0x78>)
 800710e:	4358      	muls	r0, r3
 8007110:	fb02 0004 	mla	r0, r2, r4, r0
 8007114:	fba3 3202 	umull	r3, r2, r3, r2
 8007118:	3301      	adds	r3, #1
 800711a:	eb40 0002 	adc.w	r0, r0, r2
 800711e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8007122:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8007126:	bd10      	pop	{r4, pc}
 8007128:	20000050 	.word	0x20000050
 800712c:	0800825c 	.word	0x0800825c
 8007130:	08008273 	.word	0x08008273
 8007134:	abcd330e 	.word	0xabcd330e
 8007138:	e66d1234 	.word	0xe66d1234
 800713c:	0005deec 	.word	0x0005deec
 8007140:	5851f42d 	.word	0x5851f42d
 8007144:	4c957f2d 	.word	0x4c957f2d

08007148 <std>:
 8007148:	2300      	movs	r3, #0
 800714a:	b510      	push	{r4, lr}
 800714c:	4604      	mov	r4, r0
 800714e:	e9c0 3300 	strd	r3, r3, [r0]
 8007152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007156:	6083      	str	r3, [r0, #8]
 8007158:	8181      	strh	r1, [r0, #12]
 800715a:	6643      	str	r3, [r0, #100]	@ 0x64
 800715c:	81c2      	strh	r2, [r0, #14]
 800715e:	6183      	str	r3, [r0, #24]
 8007160:	4619      	mov	r1, r3
 8007162:	2208      	movs	r2, #8
 8007164:	305c      	adds	r0, #92	@ 0x5c
 8007166:	f000 f8f4 	bl	8007352 <memset>
 800716a:	4b0d      	ldr	r3, [pc, #52]	@ (80071a0 <std+0x58>)
 800716c:	6263      	str	r3, [r4, #36]	@ 0x24
 800716e:	4b0d      	ldr	r3, [pc, #52]	@ (80071a4 <std+0x5c>)
 8007170:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007172:	4b0d      	ldr	r3, [pc, #52]	@ (80071a8 <std+0x60>)
 8007174:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007176:	4b0d      	ldr	r3, [pc, #52]	@ (80071ac <std+0x64>)
 8007178:	6323      	str	r3, [r4, #48]	@ 0x30
 800717a:	4b0d      	ldr	r3, [pc, #52]	@ (80071b0 <std+0x68>)
 800717c:	6224      	str	r4, [r4, #32]
 800717e:	429c      	cmp	r4, r3
 8007180:	d006      	beq.n	8007190 <std+0x48>
 8007182:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007186:	4294      	cmp	r4, r2
 8007188:	d002      	beq.n	8007190 <std+0x48>
 800718a:	33d0      	adds	r3, #208	@ 0xd0
 800718c:	429c      	cmp	r4, r3
 800718e:	d105      	bne.n	800719c <std+0x54>
 8007190:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007198:	f000 b954 	b.w	8007444 <__retarget_lock_init_recursive>
 800719c:	bd10      	pop	{r4, pc}
 800719e:	bf00      	nop
 80071a0:	080072cd 	.word	0x080072cd
 80071a4:	080072ef 	.word	0x080072ef
 80071a8:	08007327 	.word	0x08007327
 80071ac:	0800734b 	.word	0x0800734b
 80071b0:	200004f8 	.word	0x200004f8

080071b4 <stdio_exit_handler>:
 80071b4:	4a02      	ldr	r2, [pc, #8]	@ (80071c0 <stdio_exit_handler+0xc>)
 80071b6:	4903      	ldr	r1, [pc, #12]	@ (80071c4 <stdio_exit_handler+0x10>)
 80071b8:	4803      	ldr	r0, [pc, #12]	@ (80071c8 <stdio_exit_handler+0x14>)
 80071ba:	f000 b869 	b.w	8007290 <_fwalk_sglue>
 80071be:	bf00      	nop
 80071c0:	20000044 	.word	0x20000044
 80071c4:	080077a1 	.word	0x080077a1
 80071c8:	20000054 	.word	0x20000054

080071cc <cleanup_stdio>:
 80071cc:	6841      	ldr	r1, [r0, #4]
 80071ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007200 <cleanup_stdio+0x34>)
 80071d0:	4299      	cmp	r1, r3
 80071d2:	b510      	push	{r4, lr}
 80071d4:	4604      	mov	r4, r0
 80071d6:	d001      	beq.n	80071dc <cleanup_stdio+0x10>
 80071d8:	f000 fae2 	bl	80077a0 <_fflush_r>
 80071dc:	68a1      	ldr	r1, [r4, #8]
 80071de:	4b09      	ldr	r3, [pc, #36]	@ (8007204 <cleanup_stdio+0x38>)
 80071e0:	4299      	cmp	r1, r3
 80071e2:	d002      	beq.n	80071ea <cleanup_stdio+0x1e>
 80071e4:	4620      	mov	r0, r4
 80071e6:	f000 fadb 	bl	80077a0 <_fflush_r>
 80071ea:	68e1      	ldr	r1, [r4, #12]
 80071ec:	4b06      	ldr	r3, [pc, #24]	@ (8007208 <cleanup_stdio+0x3c>)
 80071ee:	4299      	cmp	r1, r3
 80071f0:	d004      	beq.n	80071fc <cleanup_stdio+0x30>
 80071f2:	4620      	mov	r0, r4
 80071f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071f8:	f000 bad2 	b.w	80077a0 <_fflush_r>
 80071fc:	bd10      	pop	{r4, pc}
 80071fe:	bf00      	nop
 8007200:	200004f8 	.word	0x200004f8
 8007204:	20000560 	.word	0x20000560
 8007208:	200005c8 	.word	0x200005c8

0800720c <global_stdio_init.part.0>:
 800720c:	b510      	push	{r4, lr}
 800720e:	4b0b      	ldr	r3, [pc, #44]	@ (800723c <global_stdio_init.part.0+0x30>)
 8007210:	4c0b      	ldr	r4, [pc, #44]	@ (8007240 <global_stdio_init.part.0+0x34>)
 8007212:	4a0c      	ldr	r2, [pc, #48]	@ (8007244 <global_stdio_init.part.0+0x38>)
 8007214:	601a      	str	r2, [r3, #0]
 8007216:	4620      	mov	r0, r4
 8007218:	2200      	movs	r2, #0
 800721a:	2104      	movs	r1, #4
 800721c:	f7ff ff94 	bl	8007148 <std>
 8007220:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007224:	2201      	movs	r2, #1
 8007226:	2109      	movs	r1, #9
 8007228:	f7ff ff8e 	bl	8007148 <std>
 800722c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007230:	2202      	movs	r2, #2
 8007232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007236:	2112      	movs	r1, #18
 8007238:	f7ff bf86 	b.w	8007148 <std>
 800723c:	20000630 	.word	0x20000630
 8007240:	200004f8 	.word	0x200004f8
 8007244:	080071b5 	.word	0x080071b5

08007248 <__sfp_lock_acquire>:
 8007248:	4801      	ldr	r0, [pc, #4]	@ (8007250 <__sfp_lock_acquire+0x8>)
 800724a:	f000 b8fc 	b.w	8007446 <__retarget_lock_acquire_recursive>
 800724e:	bf00      	nop
 8007250:	20000639 	.word	0x20000639

08007254 <__sfp_lock_release>:
 8007254:	4801      	ldr	r0, [pc, #4]	@ (800725c <__sfp_lock_release+0x8>)
 8007256:	f000 b8f7 	b.w	8007448 <__retarget_lock_release_recursive>
 800725a:	bf00      	nop
 800725c:	20000639 	.word	0x20000639

08007260 <__sinit>:
 8007260:	b510      	push	{r4, lr}
 8007262:	4604      	mov	r4, r0
 8007264:	f7ff fff0 	bl	8007248 <__sfp_lock_acquire>
 8007268:	6a23      	ldr	r3, [r4, #32]
 800726a:	b11b      	cbz	r3, 8007274 <__sinit+0x14>
 800726c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007270:	f7ff bff0 	b.w	8007254 <__sfp_lock_release>
 8007274:	4b04      	ldr	r3, [pc, #16]	@ (8007288 <__sinit+0x28>)
 8007276:	6223      	str	r3, [r4, #32]
 8007278:	4b04      	ldr	r3, [pc, #16]	@ (800728c <__sinit+0x2c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1f5      	bne.n	800726c <__sinit+0xc>
 8007280:	f7ff ffc4 	bl	800720c <global_stdio_init.part.0>
 8007284:	e7f2      	b.n	800726c <__sinit+0xc>
 8007286:	bf00      	nop
 8007288:	080071cd 	.word	0x080071cd
 800728c:	20000630 	.word	0x20000630

08007290 <_fwalk_sglue>:
 8007290:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007294:	4607      	mov	r7, r0
 8007296:	4688      	mov	r8, r1
 8007298:	4614      	mov	r4, r2
 800729a:	2600      	movs	r6, #0
 800729c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072a0:	f1b9 0901 	subs.w	r9, r9, #1
 80072a4:	d505      	bpl.n	80072b2 <_fwalk_sglue+0x22>
 80072a6:	6824      	ldr	r4, [r4, #0]
 80072a8:	2c00      	cmp	r4, #0
 80072aa:	d1f7      	bne.n	800729c <_fwalk_sglue+0xc>
 80072ac:	4630      	mov	r0, r6
 80072ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	2b01      	cmp	r3, #1
 80072b6:	d907      	bls.n	80072c8 <_fwalk_sglue+0x38>
 80072b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072bc:	3301      	adds	r3, #1
 80072be:	d003      	beq.n	80072c8 <_fwalk_sglue+0x38>
 80072c0:	4629      	mov	r1, r5
 80072c2:	4638      	mov	r0, r7
 80072c4:	47c0      	blx	r8
 80072c6:	4306      	orrs	r6, r0
 80072c8:	3568      	adds	r5, #104	@ 0x68
 80072ca:	e7e9      	b.n	80072a0 <_fwalk_sglue+0x10>

080072cc <__sread>:
 80072cc:	b510      	push	{r4, lr}
 80072ce:	460c      	mov	r4, r1
 80072d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d4:	f000 f868 	bl	80073a8 <_read_r>
 80072d8:	2800      	cmp	r0, #0
 80072da:	bfab      	itete	ge
 80072dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80072de:	89a3      	ldrhlt	r3, [r4, #12]
 80072e0:	181b      	addge	r3, r3, r0
 80072e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80072e6:	bfac      	ite	ge
 80072e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80072ea:	81a3      	strhlt	r3, [r4, #12]
 80072ec:	bd10      	pop	{r4, pc}

080072ee <__swrite>:
 80072ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f2:	461f      	mov	r7, r3
 80072f4:	898b      	ldrh	r3, [r1, #12]
 80072f6:	05db      	lsls	r3, r3, #23
 80072f8:	4605      	mov	r5, r0
 80072fa:	460c      	mov	r4, r1
 80072fc:	4616      	mov	r6, r2
 80072fe:	d505      	bpl.n	800730c <__swrite+0x1e>
 8007300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007304:	2302      	movs	r3, #2
 8007306:	2200      	movs	r2, #0
 8007308:	f000 f83c 	bl	8007384 <_lseek_r>
 800730c:	89a3      	ldrh	r3, [r4, #12]
 800730e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007312:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007316:	81a3      	strh	r3, [r4, #12]
 8007318:	4632      	mov	r2, r6
 800731a:	463b      	mov	r3, r7
 800731c:	4628      	mov	r0, r5
 800731e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007322:	f000 b853 	b.w	80073cc <_write_r>

08007326 <__sseek>:
 8007326:	b510      	push	{r4, lr}
 8007328:	460c      	mov	r4, r1
 800732a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800732e:	f000 f829 	bl	8007384 <_lseek_r>
 8007332:	1c43      	adds	r3, r0, #1
 8007334:	89a3      	ldrh	r3, [r4, #12]
 8007336:	bf15      	itete	ne
 8007338:	6560      	strne	r0, [r4, #84]	@ 0x54
 800733a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800733e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007342:	81a3      	strheq	r3, [r4, #12]
 8007344:	bf18      	it	ne
 8007346:	81a3      	strhne	r3, [r4, #12]
 8007348:	bd10      	pop	{r4, pc}

0800734a <__sclose>:
 800734a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800734e:	f000 b809 	b.w	8007364 <_close_r>

08007352 <memset>:
 8007352:	4402      	add	r2, r0
 8007354:	4603      	mov	r3, r0
 8007356:	4293      	cmp	r3, r2
 8007358:	d100      	bne.n	800735c <memset+0xa>
 800735a:	4770      	bx	lr
 800735c:	f803 1b01 	strb.w	r1, [r3], #1
 8007360:	e7f9      	b.n	8007356 <memset+0x4>
	...

08007364 <_close_r>:
 8007364:	b538      	push	{r3, r4, r5, lr}
 8007366:	4d06      	ldr	r5, [pc, #24]	@ (8007380 <_close_r+0x1c>)
 8007368:	2300      	movs	r3, #0
 800736a:	4604      	mov	r4, r0
 800736c:	4608      	mov	r0, r1
 800736e:	602b      	str	r3, [r5, #0]
 8007370:	f7fa fa78 	bl	8001864 <_close>
 8007374:	1c43      	adds	r3, r0, #1
 8007376:	d102      	bne.n	800737e <_close_r+0x1a>
 8007378:	682b      	ldr	r3, [r5, #0]
 800737a:	b103      	cbz	r3, 800737e <_close_r+0x1a>
 800737c:	6023      	str	r3, [r4, #0]
 800737e:	bd38      	pop	{r3, r4, r5, pc}
 8007380:	20000634 	.word	0x20000634

08007384 <_lseek_r>:
 8007384:	b538      	push	{r3, r4, r5, lr}
 8007386:	4d07      	ldr	r5, [pc, #28]	@ (80073a4 <_lseek_r+0x20>)
 8007388:	4604      	mov	r4, r0
 800738a:	4608      	mov	r0, r1
 800738c:	4611      	mov	r1, r2
 800738e:	2200      	movs	r2, #0
 8007390:	602a      	str	r2, [r5, #0]
 8007392:	461a      	mov	r2, r3
 8007394:	f7fa fa8d 	bl	80018b2 <_lseek>
 8007398:	1c43      	adds	r3, r0, #1
 800739a:	d102      	bne.n	80073a2 <_lseek_r+0x1e>
 800739c:	682b      	ldr	r3, [r5, #0]
 800739e:	b103      	cbz	r3, 80073a2 <_lseek_r+0x1e>
 80073a0:	6023      	str	r3, [r4, #0]
 80073a2:	bd38      	pop	{r3, r4, r5, pc}
 80073a4:	20000634 	.word	0x20000634

080073a8 <_read_r>:
 80073a8:	b538      	push	{r3, r4, r5, lr}
 80073aa:	4d07      	ldr	r5, [pc, #28]	@ (80073c8 <_read_r+0x20>)
 80073ac:	4604      	mov	r4, r0
 80073ae:	4608      	mov	r0, r1
 80073b0:	4611      	mov	r1, r2
 80073b2:	2200      	movs	r2, #0
 80073b4:	602a      	str	r2, [r5, #0]
 80073b6:	461a      	mov	r2, r3
 80073b8:	f7fa fa1b 	bl	80017f2 <_read>
 80073bc:	1c43      	adds	r3, r0, #1
 80073be:	d102      	bne.n	80073c6 <_read_r+0x1e>
 80073c0:	682b      	ldr	r3, [r5, #0]
 80073c2:	b103      	cbz	r3, 80073c6 <_read_r+0x1e>
 80073c4:	6023      	str	r3, [r4, #0]
 80073c6:	bd38      	pop	{r3, r4, r5, pc}
 80073c8:	20000634 	.word	0x20000634

080073cc <_write_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4d07      	ldr	r5, [pc, #28]	@ (80073ec <_write_r+0x20>)
 80073d0:	4604      	mov	r4, r0
 80073d2:	4608      	mov	r0, r1
 80073d4:	4611      	mov	r1, r2
 80073d6:	2200      	movs	r2, #0
 80073d8:	602a      	str	r2, [r5, #0]
 80073da:	461a      	mov	r2, r3
 80073dc:	f7fa fa26 	bl	800182c <_write>
 80073e0:	1c43      	adds	r3, r0, #1
 80073e2:	d102      	bne.n	80073ea <_write_r+0x1e>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	b103      	cbz	r3, 80073ea <_write_r+0x1e>
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	bd38      	pop	{r3, r4, r5, pc}
 80073ec:	20000634 	.word	0x20000634

080073f0 <__errno>:
 80073f0:	4b01      	ldr	r3, [pc, #4]	@ (80073f8 <__errno+0x8>)
 80073f2:	6818      	ldr	r0, [r3, #0]
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20000050 	.word	0x20000050

080073fc <__libc_init_array>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	4d0d      	ldr	r5, [pc, #52]	@ (8007434 <__libc_init_array+0x38>)
 8007400:	4c0d      	ldr	r4, [pc, #52]	@ (8007438 <__libc_init_array+0x3c>)
 8007402:	1b64      	subs	r4, r4, r5
 8007404:	10a4      	asrs	r4, r4, #2
 8007406:	2600      	movs	r6, #0
 8007408:	42a6      	cmp	r6, r4
 800740a:	d109      	bne.n	8007420 <__libc_init_array+0x24>
 800740c:	4d0b      	ldr	r5, [pc, #44]	@ (800743c <__libc_init_array+0x40>)
 800740e:	4c0c      	ldr	r4, [pc, #48]	@ (8007440 <__libc_init_array+0x44>)
 8007410:	f000 fe42 	bl	8008098 <_init>
 8007414:	1b64      	subs	r4, r4, r5
 8007416:	10a4      	asrs	r4, r4, #2
 8007418:	2600      	movs	r6, #0
 800741a:	42a6      	cmp	r6, r4
 800741c:	d105      	bne.n	800742a <__libc_init_array+0x2e>
 800741e:	bd70      	pop	{r4, r5, r6, pc}
 8007420:	f855 3b04 	ldr.w	r3, [r5], #4
 8007424:	4798      	blx	r3
 8007426:	3601      	adds	r6, #1
 8007428:	e7ee      	b.n	8007408 <__libc_init_array+0xc>
 800742a:	f855 3b04 	ldr.w	r3, [r5], #4
 800742e:	4798      	blx	r3
 8007430:	3601      	adds	r6, #1
 8007432:	e7f2      	b.n	800741a <__libc_init_array+0x1e>
 8007434:	08008344 	.word	0x08008344
 8007438:	08008344 	.word	0x08008344
 800743c:	08008344 	.word	0x08008344
 8007440:	08008348 	.word	0x08008348

08007444 <__retarget_lock_init_recursive>:
 8007444:	4770      	bx	lr

08007446 <__retarget_lock_acquire_recursive>:
 8007446:	4770      	bx	lr

08007448 <__retarget_lock_release_recursive>:
 8007448:	4770      	bx	lr

0800744a <strcpy>:
 800744a:	4603      	mov	r3, r0
 800744c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007450:	f803 2b01 	strb.w	r2, [r3], #1
 8007454:	2a00      	cmp	r2, #0
 8007456:	d1f9      	bne.n	800744c <strcpy+0x2>
 8007458:	4770      	bx	lr
	...

0800745c <__assert_func>:
 800745c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800745e:	4614      	mov	r4, r2
 8007460:	461a      	mov	r2, r3
 8007462:	4b09      	ldr	r3, [pc, #36]	@ (8007488 <__assert_func+0x2c>)
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4605      	mov	r5, r0
 8007468:	68d8      	ldr	r0, [r3, #12]
 800746a:	b954      	cbnz	r4, 8007482 <__assert_func+0x26>
 800746c:	4b07      	ldr	r3, [pc, #28]	@ (800748c <__assert_func+0x30>)
 800746e:	461c      	mov	r4, r3
 8007470:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007474:	9100      	str	r1, [sp, #0]
 8007476:	462b      	mov	r3, r5
 8007478:	4905      	ldr	r1, [pc, #20]	@ (8007490 <__assert_func+0x34>)
 800747a:	f000 f9b9 	bl	80077f0 <fiprintf>
 800747e:	f000 f9d9 	bl	8007834 <abort>
 8007482:	4b04      	ldr	r3, [pc, #16]	@ (8007494 <__assert_func+0x38>)
 8007484:	e7f4      	b.n	8007470 <__assert_func+0x14>
 8007486:	bf00      	nop
 8007488:	20000050 	.word	0x20000050
 800748c:	08008306 	.word	0x08008306
 8007490:	080082d8 	.word	0x080082d8
 8007494:	080082cb 	.word	0x080082cb

08007498 <_free_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4605      	mov	r5, r0
 800749c:	2900      	cmp	r1, #0
 800749e:	d041      	beq.n	8007524 <_free_r+0x8c>
 80074a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074a4:	1f0c      	subs	r4, r1, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	bfb8      	it	lt
 80074aa:	18e4      	addlt	r4, r4, r3
 80074ac:	f000 f8e8 	bl	8007680 <__malloc_lock>
 80074b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007528 <_free_r+0x90>)
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	b933      	cbnz	r3, 80074c4 <_free_r+0x2c>
 80074b6:	6063      	str	r3, [r4, #4]
 80074b8:	6014      	str	r4, [r2, #0]
 80074ba:	4628      	mov	r0, r5
 80074bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074c0:	f000 b8e4 	b.w	800768c <__malloc_unlock>
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	d908      	bls.n	80074da <_free_r+0x42>
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	1821      	adds	r1, r4, r0
 80074cc:	428b      	cmp	r3, r1
 80074ce:	bf01      	itttt	eq
 80074d0:	6819      	ldreq	r1, [r3, #0]
 80074d2:	685b      	ldreq	r3, [r3, #4]
 80074d4:	1809      	addeq	r1, r1, r0
 80074d6:	6021      	streq	r1, [r4, #0]
 80074d8:	e7ed      	b.n	80074b6 <_free_r+0x1e>
 80074da:	461a      	mov	r2, r3
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	b10b      	cbz	r3, 80074e4 <_free_r+0x4c>
 80074e0:	42a3      	cmp	r3, r4
 80074e2:	d9fa      	bls.n	80074da <_free_r+0x42>
 80074e4:	6811      	ldr	r1, [r2, #0]
 80074e6:	1850      	adds	r0, r2, r1
 80074e8:	42a0      	cmp	r0, r4
 80074ea:	d10b      	bne.n	8007504 <_free_r+0x6c>
 80074ec:	6820      	ldr	r0, [r4, #0]
 80074ee:	4401      	add	r1, r0
 80074f0:	1850      	adds	r0, r2, r1
 80074f2:	4283      	cmp	r3, r0
 80074f4:	6011      	str	r1, [r2, #0]
 80074f6:	d1e0      	bne.n	80074ba <_free_r+0x22>
 80074f8:	6818      	ldr	r0, [r3, #0]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	6053      	str	r3, [r2, #4]
 80074fe:	4408      	add	r0, r1
 8007500:	6010      	str	r0, [r2, #0]
 8007502:	e7da      	b.n	80074ba <_free_r+0x22>
 8007504:	d902      	bls.n	800750c <_free_r+0x74>
 8007506:	230c      	movs	r3, #12
 8007508:	602b      	str	r3, [r5, #0]
 800750a:	e7d6      	b.n	80074ba <_free_r+0x22>
 800750c:	6820      	ldr	r0, [r4, #0]
 800750e:	1821      	adds	r1, r4, r0
 8007510:	428b      	cmp	r3, r1
 8007512:	bf04      	itt	eq
 8007514:	6819      	ldreq	r1, [r3, #0]
 8007516:	685b      	ldreq	r3, [r3, #4]
 8007518:	6063      	str	r3, [r4, #4]
 800751a:	bf04      	itt	eq
 800751c:	1809      	addeq	r1, r1, r0
 800751e:	6021      	streq	r1, [r4, #0]
 8007520:	6054      	str	r4, [r2, #4]
 8007522:	e7ca      	b.n	80074ba <_free_r+0x22>
 8007524:	bd38      	pop	{r3, r4, r5, pc}
 8007526:	bf00      	nop
 8007528:	20000640 	.word	0x20000640

0800752c <malloc>:
 800752c:	4b02      	ldr	r3, [pc, #8]	@ (8007538 <malloc+0xc>)
 800752e:	4601      	mov	r1, r0
 8007530:	6818      	ldr	r0, [r3, #0]
 8007532:	f000 b825 	b.w	8007580 <_malloc_r>
 8007536:	bf00      	nop
 8007538:	20000050 	.word	0x20000050

0800753c <sbrk_aligned>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	4e0f      	ldr	r6, [pc, #60]	@ (800757c <sbrk_aligned+0x40>)
 8007540:	460c      	mov	r4, r1
 8007542:	6831      	ldr	r1, [r6, #0]
 8007544:	4605      	mov	r5, r0
 8007546:	b911      	cbnz	r1, 800754e <sbrk_aligned+0x12>
 8007548:	f000 f964 	bl	8007814 <_sbrk_r>
 800754c:	6030      	str	r0, [r6, #0]
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f000 f95f 	bl	8007814 <_sbrk_r>
 8007556:	1c43      	adds	r3, r0, #1
 8007558:	d103      	bne.n	8007562 <sbrk_aligned+0x26>
 800755a:	f04f 34ff 	mov.w	r4, #4294967295
 800755e:	4620      	mov	r0, r4
 8007560:	bd70      	pop	{r4, r5, r6, pc}
 8007562:	1cc4      	adds	r4, r0, #3
 8007564:	f024 0403 	bic.w	r4, r4, #3
 8007568:	42a0      	cmp	r0, r4
 800756a:	d0f8      	beq.n	800755e <sbrk_aligned+0x22>
 800756c:	1a21      	subs	r1, r4, r0
 800756e:	4628      	mov	r0, r5
 8007570:	f000 f950 	bl	8007814 <_sbrk_r>
 8007574:	3001      	adds	r0, #1
 8007576:	d1f2      	bne.n	800755e <sbrk_aligned+0x22>
 8007578:	e7ef      	b.n	800755a <sbrk_aligned+0x1e>
 800757a:	bf00      	nop
 800757c:	2000063c 	.word	0x2000063c

08007580 <_malloc_r>:
 8007580:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007584:	1ccd      	adds	r5, r1, #3
 8007586:	f025 0503 	bic.w	r5, r5, #3
 800758a:	3508      	adds	r5, #8
 800758c:	2d0c      	cmp	r5, #12
 800758e:	bf38      	it	cc
 8007590:	250c      	movcc	r5, #12
 8007592:	2d00      	cmp	r5, #0
 8007594:	4606      	mov	r6, r0
 8007596:	db01      	blt.n	800759c <_malloc_r+0x1c>
 8007598:	42a9      	cmp	r1, r5
 800759a:	d904      	bls.n	80075a6 <_malloc_r+0x26>
 800759c:	230c      	movs	r3, #12
 800759e:	6033      	str	r3, [r6, #0]
 80075a0:	2000      	movs	r0, #0
 80075a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800767c <_malloc_r+0xfc>
 80075aa:	f000 f869 	bl	8007680 <__malloc_lock>
 80075ae:	f8d8 3000 	ldr.w	r3, [r8]
 80075b2:	461c      	mov	r4, r3
 80075b4:	bb44      	cbnz	r4, 8007608 <_malloc_r+0x88>
 80075b6:	4629      	mov	r1, r5
 80075b8:	4630      	mov	r0, r6
 80075ba:	f7ff ffbf 	bl	800753c <sbrk_aligned>
 80075be:	1c43      	adds	r3, r0, #1
 80075c0:	4604      	mov	r4, r0
 80075c2:	d158      	bne.n	8007676 <_malloc_r+0xf6>
 80075c4:	f8d8 4000 	ldr.w	r4, [r8]
 80075c8:	4627      	mov	r7, r4
 80075ca:	2f00      	cmp	r7, #0
 80075cc:	d143      	bne.n	8007656 <_malloc_r+0xd6>
 80075ce:	2c00      	cmp	r4, #0
 80075d0:	d04b      	beq.n	800766a <_malloc_r+0xea>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	4639      	mov	r1, r7
 80075d6:	4630      	mov	r0, r6
 80075d8:	eb04 0903 	add.w	r9, r4, r3
 80075dc:	f000 f91a 	bl	8007814 <_sbrk_r>
 80075e0:	4581      	cmp	r9, r0
 80075e2:	d142      	bne.n	800766a <_malloc_r+0xea>
 80075e4:	6821      	ldr	r1, [r4, #0]
 80075e6:	1a6d      	subs	r5, r5, r1
 80075e8:	4629      	mov	r1, r5
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ffa6 	bl	800753c <sbrk_aligned>
 80075f0:	3001      	adds	r0, #1
 80075f2:	d03a      	beq.n	800766a <_malloc_r+0xea>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	442b      	add	r3, r5
 80075f8:	6023      	str	r3, [r4, #0]
 80075fa:	f8d8 3000 	ldr.w	r3, [r8]
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	bb62      	cbnz	r2, 800765c <_malloc_r+0xdc>
 8007602:	f8c8 7000 	str.w	r7, [r8]
 8007606:	e00f      	b.n	8007628 <_malloc_r+0xa8>
 8007608:	6822      	ldr	r2, [r4, #0]
 800760a:	1b52      	subs	r2, r2, r5
 800760c:	d420      	bmi.n	8007650 <_malloc_r+0xd0>
 800760e:	2a0b      	cmp	r2, #11
 8007610:	d917      	bls.n	8007642 <_malloc_r+0xc2>
 8007612:	1961      	adds	r1, r4, r5
 8007614:	42a3      	cmp	r3, r4
 8007616:	6025      	str	r5, [r4, #0]
 8007618:	bf18      	it	ne
 800761a:	6059      	strne	r1, [r3, #4]
 800761c:	6863      	ldr	r3, [r4, #4]
 800761e:	bf08      	it	eq
 8007620:	f8c8 1000 	streq.w	r1, [r8]
 8007624:	5162      	str	r2, [r4, r5]
 8007626:	604b      	str	r3, [r1, #4]
 8007628:	4630      	mov	r0, r6
 800762a:	f000 f82f 	bl	800768c <__malloc_unlock>
 800762e:	f104 000b 	add.w	r0, r4, #11
 8007632:	1d23      	adds	r3, r4, #4
 8007634:	f020 0007 	bic.w	r0, r0, #7
 8007638:	1ac2      	subs	r2, r0, r3
 800763a:	bf1c      	itt	ne
 800763c:	1a1b      	subne	r3, r3, r0
 800763e:	50a3      	strne	r3, [r4, r2]
 8007640:	e7af      	b.n	80075a2 <_malloc_r+0x22>
 8007642:	6862      	ldr	r2, [r4, #4]
 8007644:	42a3      	cmp	r3, r4
 8007646:	bf0c      	ite	eq
 8007648:	f8c8 2000 	streq.w	r2, [r8]
 800764c:	605a      	strne	r2, [r3, #4]
 800764e:	e7eb      	b.n	8007628 <_malloc_r+0xa8>
 8007650:	4623      	mov	r3, r4
 8007652:	6864      	ldr	r4, [r4, #4]
 8007654:	e7ae      	b.n	80075b4 <_malloc_r+0x34>
 8007656:	463c      	mov	r4, r7
 8007658:	687f      	ldr	r7, [r7, #4]
 800765a:	e7b6      	b.n	80075ca <_malloc_r+0x4a>
 800765c:	461a      	mov	r2, r3
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	42a3      	cmp	r3, r4
 8007662:	d1fb      	bne.n	800765c <_malloc_r+0xdc>
 8007664:	2300      	movs	r3, #0
 8007666:	6053      	str	r3, [r2, #4]
 8007668:	e7de      	b.n	8007628 <_malloc_r+0xa8>
 800766a:	230c      	movs	r3, #12
 800766c:	6033      	str	r3, [r6, #0]
 800766e:	4630      	mov	r0, r6
 8007670:	f000 f80c 	bl	800768c <__malloc_unlock>
 8007674:	e794      	b.n	80075a0 <_malloc_r+0x20>
 8007676:	6005      	str	r5, [r0, #0]
 8007678:	e7d6      	b.n	8007628 <_malloc_r+0xa8>
 800767a:	bf00      	nop
 800767c:	20000640 	.word	0x20000640

08007680 <__malloc_lock>:
 8007680:	4801      	ldr	r0, [pc, #4]	@ (8007688 <__malloc_lock+0x8>)
 8007682:	f7ff bee0 	b.w	8007446 <__retarget_lock_acquire_recursive>
 8007686:	bf00      	nop
 8007688:	20000638 	.word	0x20000638

0800768c <__malloc_unlock>:
 800768c:	4801      	ldr	r0, [pc, #4]	@ (8007694 <__malloc_unlock+0x8>)
 800768e:	f7ff bedb 	b.w	8007448 <__retarget_lock_release_recursive>
 8007692:	bf00      	nop
 8007694:	20000638 	.word	0x20000638

08007698 <__sflush_r>:
 8007698:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800769c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076a0:	0716      	lsls	r6, r2, #28
 80076a2:	4605      	mov	r5, r0
 80076a4:	460c      	mov	r4, r1
 80076a6:	d454      	bmi.n	8007752 <__sflush_r+0xba>
 80076a8:	684b      	ldr	r3, [r1, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	dc02      	bgt.n	80076b4 <__sflush_r+0x1c>
 80076ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	dd48      	ble.n	8007746 <__sflush_r+0xae>
 80076b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076b6:	2e00      	cmp	r6, #0
 80076b8:	d045      	beq.n	8007746 <__sflush_r+0xae>
 80076ba:	2300      	movs	r3, #0
 80076bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80076c0:	682f      	ldr	r7, [r5, #0]
 80076c2:	6a21      	ldr	r1, [r4, #32]
 80076c4:	602b      	str	r3, [r5, #0]
 80076c6:	d030      	beq.n	800772a <__sflush_r+0x92>
 80076c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80076ca:	89a3      	ldrh	r3, [r4, #12]
 80076cc:	0759      	lsls	r1, r3, #29
 80076ce:	d505      	bpl.n	80076dc <__sflush_r+0x44>
 80076d0:	6863      	ldr	r3, [r4, #4]
 80076d2:	1ad2      	subs	r2, r2, r3
 80076d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80076d6:	b10b      	cbz	r3, 80076dc <__sflush_r+0x44>
 80076d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076da:	1ad2      	subs	r2, r2, r3
 80076dc:	2300      	movs	r3, #0
 80076de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076e0:	6a21      	ldr	r1, [r4, #32]
 80076e2:	4628      	mov	r0, r5
 80076e4:	47b0      	blx	r6
 80076e6:	1c43      	adds	r3, r0, #1
 80076e8:	89a3      	ldrh	r3, [r4, #12]
 80076ea:	d106      	bne.n	80076fa <__sflush_r+0x62>
 80076ec:	6829      	ldr	r1, [r5, #0]
 80076ee:	291d      	cmp	r1, #29
 80076f0:	d82b      	bhi.n	800774a <__sflush_r+0xb2>
 80076f2:	4a2a      	ldr	r2, [pc, #168]	@ (800779c <__sflush_r+0x104>)
 80076f4:	410a      	asrs	r2, r1
 80076f6:	07d6      	lsls	r6, r2, #31
 80076f8:	d427      	bmi.n	800774a <__sflush_r+0xb2>
 80076fa:	2200      	movs	r2, #0
 80076fc:	6062      	str	r2, [r4, #4]
 80076fe:	04d9      	lsls	r1, r3, #19
 8007700:	6922      	ldr	r2, [r4, #16]
 8007702:	6022      	str	r2, [r4, #0]
 8007704:	d504      	bpl.n	8007710 <__sflush_r+0x78>
 8007706:	1c42      	adds	r2, r0, #1
 8007708:	d101      	bne.n	800770e <__sflush_r+0x76>
 800770a:	682b      	ldr	r3, [r5, #0]
 800770c:	b903      	cbnz	r3, 8007710 <__sflush_r+0x78>
 800770e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007710:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007712:	602f      	str	r7, [r5, #0]
 8007714:	b1b9      	cbz	r1, 8007746 <__sflush_r+0xae>
 8007716:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800771a:	4299      	cmp	r1, r3
 800771c:	d002      	beq.n	8007724 <__sflush_r+0x8c>
 800771e:	4628      	mov	r0, r5
 8007720:	f7ff feba 	bl	8007498 <_free_r>
 8007724:	2300      	movs	r3, #0
 8007726:	6363      	str	r3, [r4, #52]	@ 0x34
 8007728:	e00d      	b.n	8007746 <__sflush_r+0xae>
 800772a:	2301      	movs	r3, #1
 800772c:	4628      	mov	r0, r5
 800772e:	47b0      	blx	r6
 8007730:	4602      	mov	r2, r0
 8007732:	1c50      	adds	r0, r2, #1
 8007734:	d1c9      	bne.n	80076ca <__sflush_r+0x32>
 8007736:	682b      	ldr	r3, [r5, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0c6      	beq.n	80076ca <__sflush_r+0x32>
 800773c:	2b1d      	cmp	r3, #29
 800773e:	d001      	beq.n	8007744 <__sflush_r+0xac>
 8007740:	2b16      	cmp	r3, #22
 8007742:	d11e      	bne.n	8007782 <__sflush_r+0xea>
 8007744:	602f      	str	r7, [r5, #0]
 8007746:	2000      	movs	r0, #0
 8007748:	e022      	b.n	8007790 <__sflush_r+0xf8>
 800774a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800774e:	b21b      	sxth	r3, r3
 8007750:	e01b      	b.n	800778a <__sflush_r+0xf2>
 8007752:	690f      	ldr	r7, [r1, #16]
 8007754:	2f00      	cmp	r7, #0
 8007756:	d0f6      	beq.n	8007746 <__sflush_r+0xae>
 8007758:	0793      	lsls	r3, r2, #30
 800775a:	680e      	ldr	r6, [r1, #0]
 800775c:	bf08      	it	eq
 800775e:	694b      	ldreq	r3, [r1, #20]
 8007760:	600f      	str	r7, [r1, #0]
 8007762:	bf18      	it	ne
 8007764:	2300      	movne	r3, #0
 8007766:	eba6 0807 	sub.w	r8, r6, r7
 800776a:	608b      	str	r3, [r1, #8]
 800776c:	f1b8 0f00 	cmp.w	r8, #0
 8007770:	dde9      	ble.n	8007746 <__sflush_r+0xae>
 8007772:	6a21      	ldr	r1, [r4, #32]
 8007774:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007776:	4643      	mov	r3, r8
 8007778:	463a      	mov	r2, r7
 800777a:	4628      	mov	r0, r5
 800777c:	47b0      	blx	r6
 800777e:	2800      	cmp	r0, #0
 8007780:	dc08      	bgt.n	8007794 <__sflush_r+0xfc>
 8007782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800778a:	81a3      	strh	r3, [r4, #12]
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007794:	4407      	add	r7, r0
 8007796:	eba8 0800 	sub.w	r8, r8, r0
 800779a:	e7e7      	b.n	800776c <__sflush_r+0xd4>
 800779c:	dfbffffe 	.word	0xdfbffffe

080077a0 <_fflush_r>:
 80077a0:	b538      	push	{r3, r4, r5, lr}
 80077a2:	690b      	ldr	r3, [r1, #16]
 80077a4:	4605      	mov	r5, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	b913      	cbnz	r3, 80077b0 <_fflush_r+0x10>
 80077aa:	2500      	movs	r5, #0
 80077ac:	4628      	mov	r0, r5
 80077ae:	bd38      	pop	{r3, r4, r5, pc}
 80077b0:	b118      	cbz	r0, 80077ba <_fflush_r+0x1a>
 80077b2:	6a03      	ldr	r3, [r0, #32]
 80077b4:	b90b      	cbnz	r3, 80077ba <_fflush_r+0x1a>
 80077b6:	f7ff fd53 	bl	8007260 <__sinit>
 80077ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0f3      	beq.n	80077aa <_fflush_r+0xa>
 80077c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80077c4:	07d0      	lsls	r0, r2, #31
 80077c6:	d404      	bmi.n	80077d2 <_fflush_r+0x32>
 80077c8:	0599      	lsls	r1, r3, #22
 80077ca:	d402      	bmi.n	80077d2 <_fflush_r+0x32>
 80077cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ce:	f7ff fe3a 	bl	8007446 <__retarget_lock_acquire_recursive>
 80077d2:	4628      	mov	r0, r5
 80077d4:	4621      	mov	r1, r4
 80077d6:	f7ff ff5f 	bl	8007698 <__sflush_r>
 80077da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077dc:	07da      	lsls	r2, r3, #31
 80077de:	4605      	mov	r5, r0
 80077e0:	d4e4      	bmi.n	80077ac <_fflush_r+0xc>
 80077e2:	89a3      	ldrh	r3, [r4, #12]
 80077e4:	059b      	lsls	r3, r3, #22
 80077e6:	d4e1      	bmi.n	80077ac <_fflush_r+0xc>
 80077e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077ea:	f7ff fe2d 	bl	8007448 <__retarget_lock_release_recursive>
 80077ee:	e7dd      	b.n	80077ac <_fflush_r+0xc>

080077f0 <fiprintf>:
 80077f0:	b40e      	push	{r1, r2, r3}
 80077f2:	b503      	push	{r0, r1, lr}
 80077f4:	4601      	mov	r1, r0
 80077f6:	ab03      	add	r3, sp, #12
 80077f8:	4805      	ldr	r0, [pc, #20]	@ (8007810 <fiprintf+0x20>)
 80077fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fe:	6800      	ldr	r0, [r0, #0]
 8007800:	9301      	str	r3, [sp, #4]
 8007802:	f000 f847 	bl	8007894 <_vfiprintf_r>
 8007806:	b002      	add	sp, #8
 8007808:	f85d eb04 	ldr.w	lr, [sp], #4
 800780c:	b003      	add	sp, #12
 800780e:	4770      	bx	lr
 8007810:	20000050 	.word	0x20000050

08007814 <_sbrk_r>:
 8007814:	b538      	push	{r3, r4, r5, lr}
 8007816:	4d06      	ldr	r5, [pc, #24]	@ (8007830 <_sbrk_r+0x1c>)
 8007818:	2300      	movs	r3, #0
 800781a:	4604      	mov	r4, r0
 800781c:	4608      	mov	r0, r1
 800781e:	602b      	str	r3, [r5, #0]
 8007820:	f7fa f854 	bl	80018cc <_sbrk>
 8007824:	1c43      	adds	r3, r0, #1
 8007826:	d102      	bne.n	800782e <_sbrk_r+0x1a>
 8007828:	682b      	ldr	r3, [r5, #0]
 800782a:	b103      	cbz	r3, 800782e <_sbrk_r+0x1a>
 800782c:	6023      	str	r3, [r4, #0]
 800782e:	bd38      	pop	{r3, r4, r5, pc}
 8007830:	20000634 	.word	0x20000634

08007834 <abort>:
 8007834:	b508      	push	{r3, lr}
 8007836:	2006      	movs	r0, #6
 8007838:	f000 fb8e 	bl	8007f58 <raise>
 800783c:	2001      	movs	r0, #1
 800783e:	f7f9 ffcd 	bl	80017dc <_exit>

08007842 <__sfputc_r>:
 8007842:	6893      	ldr	r3, [r2, #8]
 8007844:	3b01      	subs	r3, #1
 8007846:	2b00      	cmp	r3, #0
 8007848:	b410      	push	{r4}
 800784a:	6093      	str	r3, [r2, #8]
 800784c:	da08      	bge.n	8007860 <__sfputc_r+0x1e>
 800784e:	6994      	ldr	r4, [r2, #24]
 8007850:	42a3      	cmp	r3, r4
 8007852:	db01      	blt.n	8007858 <__sfputc_r+0x16>
 8007854:	290a      	cmp	r1, #10
 8007856:	d103      	bne.n	8007860 <__sfputc_r+0x1e>
 8007858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800785c:	f000 bac0 	b.w	8007de0 <__swbuf_r>
 8007860:	6813      	ldr	r3, [r2, #0]
 8007862:	1c58      	adds	r0, r3, #1
 8007864:	6010      	str	r0, [r2, #0]
 8007866:	7019      	strb	r1, [r3, #0]
 8007868:	4608      	mov	r0, r1
 800786a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800786e:	4770      	bx	lr

08007870 <__sfputs_r>:
 8007870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007872:	4606      	mov	r6, r0
 8007874:	460f      	mov	r7, r1
 8007876:	4614      	mov	r4, r2
 8007878:	18d5      	adds	r5, r2, r3
 800787a:	42ac      	cmp	r4, r5
 800787c:	d101      	bne.n	8007882 <__sfputs_r+0x12>
 800787e:	2000      	movs	r0, #0
 8007880:	e007      	b.n	8007892 <__sfputs_r+0x22>
 8007882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007886:	463a      	mov	r2, r7
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff ffda 	bl	8007842 <__sfputc_r>
 800788e:	1c43      	adds	r3, r0, #1
 8007890:	d1f3      	bne.n	800787a <__sfputs_r+0xa>
 8007892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007894 <_vfiprintf_r>:
 8007894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007898:	460d      	mov	r5, r1
 800789a:	b09d      	sub	sp, #116	@ 0x74
 800789c:	4614      	mov	r4, r2
 800789e:	4698      	mov	r8, r3
 80078a0:	4606      	mov	r6, r0
 80078a2:	b118      	cbz	r0, 80078ac <_vfiprintf_r+0x18>
 80078a4:	6a03      	ldr	r3, [r0, #32]
 80078a6:	b90b      	cbnz	r3, 80078ac <_vfiprintf_r+0x18>
 80078a8:	f7ff fcda 	bl	8007260 <__sinit>
 80078ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078ae:	07d9      	lsls	r1, r3, #31
 80078b0:	d405      	bmi.n	80078be <_vfiprintf_r+0x2a>
 80078b2:	89ab      	ldrh	r3, [r5, #12]
 80078b4:	059a      	lsls	r2, r3, #22
 80078b6:	d402      	bmi.n	80078be <_vfiprintf_r+0x2a>
 80078b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ba:	f7ff fdc4 	bl	8007446 <__retarget_lock_acquire_recursive>
 80078be:	89ab      	ldrh	r3, [r5, #12]
 80078c0:	071b      	lsls	r3, r3, #28
 80078c2:	d501      	bpl.n	80078c8 <_vfiprintf_r+0x34>
 80078c4:	692b      	ldr	r3, [r5, #16]
 80078c6:	b99b      	cbnz	r3, 80078f0 <_vfiprintf_r+0x5c>
 80078c8:	4629      	mov	r1, r5
 80078ca:	4630      	mov	r0, r6
 80078cc:	f000 fac6 	bl	8007e5c <__swsetup_r>
 80078d0:	b170      	cbz	r0, 80078f0 <_vfiprintf_r+0x5c>
 80078d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80078d4:	07dc      	lsls	r4, r3, #31
 80078d6:	d504      	bpl.n	80078e2 <_vfiprintf_r+0x4e>
 80078d8:	f04f 30ff 	mov.w	r0, #4294967295
 80078dc:	b01d      	add	sp, #116	@ 0x74
 80078de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078e2:	89ab      	ldrh	r3, [r5, #12]
 80078e4:	0598      	lsls	r0, r3, #22
 80078e6:	d4f7      	bmi.n	80078d8 <_vfiprintf_r+0x44>
 80078e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80078ea:	f7ff fdad 	bl	8007448 <__retarget_lock_release_recursive>
 80078ee:	e7f3      	b.n	80078d8 <_vfiprintf_r+0x44>
 80078f0:	2300      	movs	r3, #0
 80078f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80078f4:	2320      	movs	r3, #32
 80078f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80078fe:	2330      	movs	r3, #48	@ 0x30
 8007900:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007ab0 <_vfiprintf_r+0x21c>
 8007904:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007908:	f04f 0901 	mov.w	r9, #1
 800790c:	4623      	mov	r3, r4
 800790e:	469a      	mov	sl, r3
 8007910:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007914:	b10a      	cbz	r2, 800791a <_vfiprintf_r+0x86>
 8007916:	2a25      	cmp	r2, #37	@ 0x25
 8007918:	d1f9      	bne.n	800790e <_vfiprintf_r+0x7a>
 800791a:	ebba 0b04 	subs.w	fp, sl, r4
 800791e:	d00b      	beq.n	8007938 <_vfiprintf_r+0xa4>
 8007920:	465b      	mov	r3, fp
 8007922:	4622      	mov	r2, r4
 8007924:	4629      	mov	r1, r5
 8007926:	4630      	mov	r0, r6
 8007928:	f7ff ffa2 	bl	8007870 <__sfputs_r>
 800792c:	3001      	adds	r0, #1
 800792e:	f000 80a7 	beq.w	8007a80 <_vfiprintf_r+0x1ec>
 8007932:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007934:	445a      	add	r2, fp
 8007936:	9209      	str	r2, [sp, #36]	@ 0x24
 8007938:	f89a 3000 	ldrb.w	r3, [sl]
 800793c:	2b00      	cmp	r3, #0
 800793e:	f000 809f 	beq.w	8007a80 <_vfiprintf_r+0x1ec>
 8007942:	2300      	movs	r3, #0
 8007944:	f04f 32ff 	mov.w	r2, #4294967295
 8007948:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800794c:	f10a 0a01 	add.w	sl, sl, #1
 8007950:	9304      	str	r3, [sp, #16]
 8007952:	9307      	str	r3, [sp, #28]
 8007954:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007958:	931a      	str	r3, [sp, #104]	@ 0x68
 800795a:	4654      	mov	r4, sl
 800795c:	2205      	movs	r2, #5
 800795e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007962:	4853      	ldr	r0, [pc, #332]	@ (8007ab0 <_vfiprintf_r+0x21c>)
 8007964:	f7f8 fc64 	bl	8000230 <memchr>
 8007968:	9a04      	ldr	r2, [sp, #16]
 800796a:	b9d8      	cbnz	r0, 80079a4 <_vfiprintf_r+0x110>
 800796c:	06d1      	lsls	r1, r2, #27
 800796e:	bf44      	itt	mi
 8007970:	2320      	movmi	r3, #32
 8007972:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007976:	0713      	lsls	r3, r2, #28
 8007978:	bf44      	itt	mi
 800797a:	232b      	movmi	r3, #43	@ 0x2b
 800797c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007980:	f89a 3000 	ldrb.w	r3, [sl]
 8007984:	2b2a      	cmp	r3, #42	@ 0x2a
 8007986:	d015      	beq.n	80079b4 <_vfiprintf_r+0x120>
 8007988:	9a07      	ldr	r2, [sp, #28]
 800798a:	4654      	mov	r4, sl
 800798c:	2000      	movs	r0, #0
 800798e:	f04f 0c0a 	mov.w	ip, #10
 8007992:	4621      	mov	r1, r4
 8007994:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007998:	3b30      	subs	r3, #48	@ 0x30
 800799a:	2b09      	cmp	r3, #9
 800799c:	d94b      	bls.n	8007a36 <_vfiprintf_r+0x1a2>
 800799e:	b1b0      	cbz	r0, 80079ce <_vfiprintf_r+0x13a>
 80079a0:	9207      	str	r2, [sp, #28]
 80079a2:	e014      	b.n	80079ce <_vfiprintf_r+0x13a>
 80079a4:	eba0 0308 	sub.w	r3, r0, r8
 80079a8:	fa09 f303 	lsl.w	r3, r9, r3
 80079ac:	4313      	orrs	r3, r2
 80079ae:	9304      	str	r3, [sp, #16]
 80079b0:	46a2      	mov	sl, r4
 80079b2:	e7d2      	b.n	800795a <_vfiprintf_r+0xc6>
 80079b4:	9b03      	ldr	r3, [sp, #12]
 80079b6:	1d19      	adds	r1, r3, #4
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	9103      	str	r1, [sp, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bfbb      	ittet	lt
 80079c0:	425b      	neglt	r3, r3
 80079c2:	f042 0202 	orrlt.w	r2, r2, #2
 80079c6:	9307      	strge	r3, [sp, #28]
 80079c8:	9307      	strlt	r3, [sp, #28]
 80079ca:	bfb8      	it	lt
 80079cc:	9204      	strlt	r2, [sp, #16]
 80079ce:	7823      	ldrb	r3, [r4, #0]
 80079d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80079d2:	d10a      	bne.n	80079ea <_vfiprintf_r+0x156>
 80079d4:	7863      	ldrb	r3, [r4, #1]
 80079d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80079d8:	d132      	bne.n	8007a40 <_vfiprintf_r+0x1ac>
 80079da:	9b03      	ldr	r3, [sp, #12]
 80079dc:	1d1a      	adds	r2, r3, #4
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	9203      	str	r2, [sp, #12]
 80079e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80079e6:	3402      	adds	r4, #2
 80079e8:	9305      	str	r3, [sp, #20]
 80079ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ac0 <_vfiprintf_r+0x22c>
 80079ee:	7821      	ldrb	r1, [r4, #0]
 80079f0:	2203      	movs	r2, #3
 80079f2:	4650      	mov	r0, sl
 80079f4:	f7f8 fc1c 	bl	8000230 <memchr>
 80079f8:	b138      	cbz	r0, 8007a0a <_vfiprintf_r+0x176>
 80079fa:	9b04      	ldr	r3, [sp, #16]
 80079fc:	eba0 000a 	sub.w	r0, r0, sl
 8007a00:	2240      	movs	r2, #64	@ 0x40
 8007a02:	4082      	lsls	r2, r0
 8007a04:	4313      	orrs	r3, r2
 8007a06:	3401      	adds	r4, #1
 8007a08:	9304      	str	r3, [sp, #16]
 8007a0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a0e:	4829      	ldr	r0, [pc, #164]	@ (8007ab4 <_vfiprintf_r+0x220>)
 8007a10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007a14:	2206      	movs	r2, #6
 8007a16:	f7f8 fc0b 	bl	8000230 <memchr>
 8007a1a:	2800      	cmp	r0, #0
 8007a1c:	d03f      	beq.n	8007a9e <_vfiprintf_r+0x20a>
 8007a1e:	4b26      	ldr	r3, [pc, #152]	@ (8007ab8 <_vfiprintf_r+0x224>)
 8007a20:	bb1b      	cbnz	r3, 8007a6a <_vfiprintf_r+0x1d6>
 8007a22:	9b03      	ldr	r3, [sp, #12]
 8007a24:	3307      	adds	r3, #7
 8007a26:	f023 0307 	bic.w	r3, r3, #7
 8007a2a:	3308      	adds	r3, #8
 8007a2c:	9303      	str	r3, [sp, #12]
 8007a2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a30:	443b      	add	r3, r7
 8007a32:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a34:	e76a      	b.n	800790c <_vfiprintf_r+0x78>
 8007a36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	2001      	movs	r0, #1
 8007a3e:	e7a8      	b.n	8007992 <_vfiprintf_r+0xfe>
 8007a40:	2300      	movs	r3, #0
 8007a42:	3401      	adds	r4, #1
 8007a44:	9305      	str	r3, [sp, #20]
 8007a46:	4619      	mov	r1, r3
 8007a48:	f04f 0c0a 	mov.w	ip, #10
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a52:	3a30      	subs	r2, #48	@ 0x30
 8007a54:	2a09      	cmp	r2, #9
 8007a56:	d903      	bls.n	8007a60 <_vfiprintf_r+0x1cc>
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d0c6      	beq.n	80079ea <_vfiprintf_r+0x156>
 8007a5c:	9105      	str	r1, [sp, #20]
 8007a5e:	e7c4      	b.n	80079ea <_vfiprintf_r+0x156>
 8007a60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a64:	4604      	mov	r4, r0
 8007a66:	2301      	movs	r3, #1
 8007a68:	e7f0      	b.n	8007a4c <_vfiprintf_r+0x1b8>
 8007a6a:	ab03      	add	r3, sp, #12
 8007a6c:	9300      	str	r3, [sp, #0]
 8007a6e:	462a      	mov	r2, r5
 8007a70:	4b12      	ldr	r3, [pc, #72]	@ (8007abc <_vfiprintf_r+0x228>)
 8007a72:	a904      	add	r1, sp, #16
 8007a74:	4630      	mov	r0, r6
 8007a76:	f3af 8000 	nop.w
 8007a7a:	4607      	mov	r7, r0
 8007a7c:	1c78      	adds	r0, r7, #1
 8007a7e:	d1d6      	bne.n	8007a2e <_vfiprintf_r+0x19a>
 8007a80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a82:	07d9      	lsls	r1, r3, #31
 8007a84:	d405      	bmi.n	8007a92 <_vfiprintf_r+0x1fe>
 8007a86:	89ab      	ldrh	r3, [r5, #12]
 8007a88:	059a      	lsls	r2, r3, #22
 8007a8a:	d402      	bmi.n	8007a92 <_vfiprintf_r+0x1fe>
 8007a8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a8e:	f7ff fcdb 	bl	8007448 <__retarget_lock_release_recursive>
 8007a92:	89ab      	ldrh	r3, [r5, #12]
 8007a94:	065b      	lsls	r3, r3, #25
 8007a96:	f53f af1f 	bmi.w	80078d8 <_vfiprintf_r+0x44>
 8007a9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a9c:	e71e      	b.n	80078dc <_vfiprintf_r+0x48>
 8007a9e:	ab03      	add	r3, sp, #12
 8007aa0:	9300      	str	r3, [sp, #0]
 8007aa2:	462a      	mov	r2, r5
 8007aa4:	4b05      	ldr	r3, [pc, #20]	@ (8007abc <_vfiprintf_r+0x228>)
 8007aa6:	a904      	add	r1, sp, #16
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	f000 f879 	bl	8007ba0 <_printf_i>
 8007aae:	e7e4      	b.n	8007a7a <_vfiprintf_r+0x1e6>
 8007ab0:	08008307 	.word	0x08008307
 8007ab4:	08008311 	.word	0x08008311
 8007ab8:	00000000 	.word	0x00000000
 8007abc:	08007871 	.word	0x08007871
 8007ac0:	0800830d 	.word	0x0800830d

08007ac4 <_printf_common>:
 8007ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ac8:	4616      	mov	r6, r2
 8007aca:	4698      	mov	r8, r3
 8007acc:	688a      	ldr	r2, [r1, #8]
 8007ace:	690b      	ldr	r3, [r1, #16]
 8007ad0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ad4:	4293      	cmp	r3, r2
 8007ad6:	bfb8      	it	lt
 8007ad8:	4613      	movlt	r3, r2
 8007ada:	6033      	str	r3, [r6, #0]
 8007adc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ae0:	4607      	mov	r7, r0
 8007ae2:	460c      	mov	r4, r1
 8007ae4:	b10a      	cbz	r2, 8007aea <_printf_common+0x26>
 8007ae6:	3301      	adds	r3, #1
 8007ae8:	6033      	str	r3, [r6, #0]
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	0699      	lsls	r1, r3, #26
 8007aee:	bf42      	ittt	mi
 8007af0:	6833      	ldrmi	r3, [r6, #0]
 8007af2:	3302      	addmi	r3, #2
 8007af4:	6033      	strmi	r3, [r6, #0]
 8007af6:	6825      	ldr	r5, [r4, #0]
 8007af8:	f015 0506 	ands.w	r5, r5, #6
 8007afc:	d106      	bne.n	8007b0c <_printf_common+0x48>
 8007afe:	f104 0a19 	add.w	sl, r4, #25
 8007b02:	68e3      	ldr	r3, [r4, #12]
 8007b04:	6832      	ldr	r2, [r6, #0]
 8007b06:	1a9b      	subs	r3, r3, r2
 8007b08:	42ab      	cmp	r3, r5
 8007b0a:	dc26      	bgt.n	8007b5a <_printf_common+0x96>
 8007b0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007b10:	6822      	ldr	r2, [r4, #0]
 8007b12:	3b00      	subs	r3, #0
 8007b14:	bf18      	it	ne
 8007b16:	2301      	movne	r3, #1
 8007b18:	0692      	lsls	r2, r2, #26
 8007b1a:	d42b      	bmi.n	8007b74 <_printf_common+0xb0>
 8007b1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007b20:	4641      	mov	r1, r8
 8007b22:	4638      	mov	r0, r7
 8007b24:	47c8      	blx	r9
 8007b26:	3001      	adds	r0, #1
 8007b28:	d01e      	beq.n	8007b68 <_printf_common+0xa4>
 8007b2a:	6823      	ldr	r3, [r4, #0]
 8007b2c:	6922      	ldr	r2, [r4, #16]
 8007b2e:	f003 0306 	and.w	r3, r3, #6
 8007b32:	2b04      	cmp	r3, #4
 8007b34:	bf02      	ittt	eq
 8007b36:	68e5      	ldreq	r5, [r4, #12]
 8007b38:	6833      	ldreq	r3, [r6, #0]
 8007b3a:	1aed      	subeq	r5, r5, r3
 8007b3c:	68a3      	ldr	r3, [r4, #8]
 8007b3e:	bf0c      	ite	eq
 8007b40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b44:	2500      	movne	r5, #0
 8007b46:	4293      	cmp	r3, r2
 8007b48:	bfc4      	itt	gt
 8007b4a:	1a9b      	subgt	r3, r3, r2
 8007b4c:	18ed      	addgt	r5, r5, r3
 8007b4e:	2600      	movs	r6, #0
 8007b50:	341a      	adds	r4, #26
 8007b52:	42b5      	cmp	r5, r6
 8007b54:	d11a      	bne.n	8007b8c <_printf_common+0xc8>
 8007b56:	2000      	movs	r0, #0
 8007b58:	e008      	b.n	8007b6c <_printf_common+0xa8>
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	4652      	mov	r2, sl
 8007b5e:	4641      	mov	r1, r8
 8007b60:	4638      	mov	r0, r7
 8007b62:	47c8      	blx	r9
 8007b64:	3001      	adds	r0, #1
 8007b66:	d103      	bne.n	8007b70 <_printf_common+0xac>
 8007b68:	f04f 30ff 	mov.w	r0, #4294967295
 8007b6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b70:	3501      	adds	r5, #1
 8007b72:	e7c6      	b.n	8007b02 <_printf_common+0x3e>
 8007b74:	18e1      	adds	r1, r4, r3
 8007b76:	1c5a      	adds	r2, r3, #1
 8007b78:	2030      	movs	r0, #48	@ 0x30
 8007b7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007b7e:	4422      	add	r2, r4
 8007b80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007b84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007b88:	3302      	adds	r3, #2
 8007b8a:	e7c7      	b.n	8007b1c <_printf_common+0x58>
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	4622      	mov	r2, r4
 8007b90:	4641      	mov	r1, r8
 8007b92:	4638      	mov	r0, r7
 8007b94:	47c8      	blx	r9
 8007b96:	3001      	adds	r0, #1
 8007b98:	d0e6      	beq.n	8007b68 <_printf_common+0xa4>
 8007b9a:	3601      	adds	r6, #1
 8007b9c:	e7d9      	b.n	8007b52 <_printf_common+0x8e>
	...

08007ba0 <_printf_i>:
 8007ba0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba4:	7e0f      	ldrb	r7, [r1, #24]
 8007ba6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007ba8:	2f78      	cmp	r7, #120	@ 0x78
 8007baa:	4691      	mov	r9, r2
 8007bac:	4680      	mov	r8, r0
 8007bae:	460c      	mov	r4, r1
 8007bb0:	469a      	mov	sl, r3
 8007bb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007bb6:	d807      	bhi.n	8007bc8 <_printf_i+0x28>
 8007bb8:	2f62      	cmp	r7, #98	@ 0x62
 8007bba:	d80a      	bhi.n	8007bd2 <_printf_i+0x32>
 8007bbc:	2f00      	cmp	r7, #0
 8007bbe:	f000 80d2 	beq.w	8007d66 <_printf_i+0x1c6>
 8007bc2:	2f58      	cmp	r7, #88	@ 0x58
 8007bc4:	f000 80b9 	beq.w	8007d3a <_printf_i+0x19a>
 8007bc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007bcc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007bd0:	e03a      	b.n	8007c48 <_printf_i+0xa8>
 8007bd2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007bd6:	2b15      	cmp	r3, #21
 8007bd8:	d8f6      	bhi.n	8007bc8 <_printf_i+0x28>
 8007bda:	a101      	add	r1, pc, #4	@ (adr r1, 8007be0 <_printf_i+0x40>)
 8007bdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007be0:	08007c39 	.word	0x08007c39
 8007be4:	08007c4d 	.word	0x08007c4d
 8007be8:	08007bc9 	.word	0x08007bc9
 8007bec:	08007bc9 	.word	0x08007bc9
 8007bf0:	08007bc9 	.word	0x08007bc9
 8007bf4:	08007bc9 	.word	0x08007bc9
 8007bf8:	08007c4d 	.word	0x08007c4d
 8007bfc:	08007bc9 	.word	0x08007bc9
 8007c00:	08007bc9 	.word	0x08007bc9
 8007c04:	08007bc9 	.word	0x08007bc9
 8007c08:	08007bc9 	.word	0x08007bc9
 8007c0c:	08007d4d 	.word	0x08007d4d
 8007c10:	08007c77 	.word	0x08007c77
 8007c14:	08007d07 	.word	0x08007d07
 8007c18:	08007bc9 	.word	0x08007bc9
 8007c1c:	08007bc9 	.word	0x08007bc9
 8007c20:	08007d6f 	.word	0x08007d6f
 8007c24:	08007bc9 	.word	0x08007bc9
 8007c28:	08007c77 	.word	0x08007c77
 8007c2c:	08007bc9 	.word	0x08007bc9
 8007c30:	08007bc9 	.word	0x08007bc9
 8007c34:	08007d0f 	.word	0x08007d0f
 8007c38:	6833      	ldr	r3, [r6, #0]
 8007c3a:	1d1a      	adds	r2, r3, #4
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	6032      	str	r2, [r6, #0]
 8007c40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007c44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e09d      	b.n	8007d88 <_printf_i+0x1e8>
 8007c4c:	6833      	ldr	r3, [r6, #0]
 8007c4e:	6820      	ldr	r0, [r4, #0]
 8007c50:	1d19      	adds	r1, r3, #4
 8007c52:	6031      	str	r1, [r6, #0]
 8007c54:	0606      	lsls	r6, r0, #24
 8007c56:	d501      	bpl.n	8007c5c <_printf_i+0xbc>
 8007c58:	681d      	ldr	r5, [r3, #0]
 8007c5a:	e003      	b.n	8007c64 <_printf_i+0xc4>
 8007c5c:	0645      	lsls	r5, r0, #25
 8007c5e:	d5fb      	bpl.n	8007c58 <_printf_i+0xb8>
 8007c60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007c64:	2d00      	cmp	r5, #0
 8007c66:	da03      	bge.n	8007c70 <_printf_i+0xd0>
 8007c68:	232d      	movs	r3, #45	@ 0x2d
 8007c6a:	426d      	negs	r5, r5
 8007c6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c70:	4859      	ldr	r0, [pc, #356]	@ (8007dd8 <_printf_i+0x238>)
 8007c72:	230a      	movs	r3, #10
 8007c74:	e011      	b.n	8007c9a <_printf_i+0xfa>
 8007c76:	6821      	ldr	r1, [r4, #0]
 8007c78:	6833      	ldr	r3, [r6, #0]
 8007c7a:	0608      	lsls	r0, r1, #24
 8007c7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007c80:	d402      	bmi.n	8007c88 <_printf_i+0xe8>
 8007c82:	0649      	lsls	r1, r1, #25
 8007c84:	bf48      	it	mi
 8007c86:	b2ad      	uxthmi	r5, r5
 8007c88:	2f6f      	cmp	r7, #111	@ 0x6f
 8007c8a:	4853      	ldr	r0, [pc, #332]	@ (8007dd8 <_printf_i+0x238>)
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	bf14      	ite	ne
 8007c90:	230a      	movne	r3, #10
 8007c92:	2308      	moveq	r3, #8
 8007c94:	2100      	movs	r1, #0
 8007c96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007c9a:	6866      	ldr	r6, [r4, #4]
 8007c9c:	60a6      	str	r6, [r4, #8]
 8007c9e:	2e00      	cmp	r6, #0
 8007ca0:	bfa2      	ittt	ge
 8007ca2:	6821      	ldrge	r1, [r4, #0]
 8007ca4:	f021 0104 	bicge.w	r1, r1, #4
 8007ca8:	6021      	strge	r1, [r4, #0]
 8007caa:	b90d      	cbnz	r5, 8007cb0 <_printf_i+0x110>
 8007cac:	2e00      	cmp	r6, #0
 8007cae:	d04b      	beq.n	8007d48 <_printf_i+0x1a8>
 8007cb0:	4616      	mov	r6, r2
 8007cb2:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cb6:	fb03 5711 	mls	r7, r3, r1, r5
 8007cba:	5dc7      	ldrb	r7, [r0, r7]
 8007cbc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007cc0:	462f      	mov	r7, r5
 8007cc2:	42bb      	cmp	r3, r7
 8007cc4:	460d      	mov	r5, r1
 8007cc6:	d9f4      	bls.n	8007cb2 <_printf_i+0x112>
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d10b      	bne.n	8007ce4 <_printf_i+0x144>
 8007ccc:	6823      	ldr	r3, [r4, #0]
 8007cce:	07df      	lsls	r7, r3, #31
 8007cd0:	d508      	bpl.n	8007ce4 <_printf_i+0x144>
 8007cd2:	6923      	ldr	r3, [r4, #16]
 8007cd4:	6861      	ldr	r1, [r4, #4]
 8007cd6:	4299      	cmp	r1, r3
 8007cd8:	bfde      	ittt	le
 8007cda:	2330      	movle	r3, #48	@ 0x30
 8007cdc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007ce0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007ce4:	1b92      	subs	r2, r2, r6
 8007ce6:	6122      	str	r2, [r4, #16]
 8007ce8:	f8cd a000 	str.w	sl, [sp]
 8007cec:	464b      	mov	r3, r9
 8007cee:	aa03      	add	r2, sp, #12
 8007cf0:	4621      	mov	r1, r4
 8007cf2:	4640      	mov	r0, r8
 8007cf4:	f7ff fee6 	bl	8007ac4 <_printf_common>
 8007cf8:	3001      	adds	r0, #1
 8007cfa:	d14a      	bne.n	8007d92 <_printf_i+0x1f2>
 8007cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007d00:	b004      	add	sp, #16
 8007d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	f043 0320 	orr.w	r3, r3, #32
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	4833      	ldr	r0, [pc, #204]	@ (8007ddc <_printf_i+0x23c>)
 8007d10:	2778      	movs	r7, #120	@ 0x78
 8007d12:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007d16:	6823      	ldr	r3, [r4, #0]
 8007d18:	6831      	ldr	r1, [r6, #0]
 8007d1a:	061f      	lsls	r7, r3, #24
 8007d1c:	f851 5b04 	ldr.w	r5, [r1], #4
 8007d20:	d402      	bmi.n	8007d28 <_printf_i+0x188>
 8007d22:	065f      	lsls	r7, r3, #25
 8007d24:	bf48      	it	mi
 8007d26:	b2ad      	uxthmi	r5, r5
 8007d28:	6031      	str	r1, [r6, #0]
 8007d2a:	07d9      	lsls	r1, r3, #31
 8007d2c:	bf44      	itt	mi
 8007d2e:	f043 0320 	orrmi.w	r3, r3, #32
 8007d32:	6023      	strmi	r3, [r4, #0]
 8007d34:	b11d      	cbz	r5, 8007d3e <_printf_i+0x19e>
 8007d36:	2310      	movs	r3, #16
 8007d38:	e7ac      	b.n	8007c94 <_printf_i+0xf4>
 8007d3a:	4827      	ldr	r0, [pc, #156]	@ (8007dd8 <_printf_i+0x238>)
 8007d3c:	e7e9      	b.n	8007d12 <_printf_i+0x172>
 8007d3e:	6823      	ldr	r3, [r4, #0]
 8007d40:	f023 0320 	bic.w	r3, r3, #32
 8007d44:	6023      	str	r3, [r4, #0]
 8007d46:	e7f6      	b.n	8007d36 <_printf_i+0x196>
 8007d48:	4616      	mov	r6, r2
 8007d4a:	e7bd      	b.n	8007cc8 <_printf_i+0x128>
 8007d4c:	6833      	ldr	r3, [r6, #0]
 8007d4e:	6825      	ldr	r5, [r4, #0]
 8007d50:	6961      	ldr	r1, [r4, #20]
 8007d52:	1d18      	adds	r0, r3, #4
 8007d54:	6030      	str	r0, [r6, #0]
 8007d56:	062e      	lsls	r6, r5, #24
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	d501      	bpl.n	8007d60 <_printf_i+0x1c0>
 8007d5c:	6019      	str	r1, [r3, #0]
 8007d5e:	e002      	b.n	8007d66 <_printf_i+0x1c6>
 8007d60:	0668      	lsls	r0, r5, #25
 8007d62:	d5fb      	bpl.n	8007d5c <_printf_i+0x1bc>
 8007d64:	8019      	strh	r1, [r3, #0]
 8007d66:	2300      	movs	r3, #0
 8007d68:	6123      	str	r3, [r4, #16]
 8007d6a:	4616      	mov	r6, r2
 8007d6c:	e7bc      	b.n	8007ce8 <_printf_i+0x148>
 8007d6e:	6833      	ldr	r3, [r6, #0]
 8007d70:	1d1a      	adds	r2, r3, #4
 8007d72:	6032      	str	r2, [r6, #0]
 8007d74:	681e      	ldr	r6, [r3, #0]
 8007d76:	6862      	ldr	r2, [r4, #4]
 8007d78:	2100      	movs	r1, #0
 8007d7a:	4630      	mov	r0, r6
 8007d7c:	f7f8 fa58 	bl	8000230 <memchr>
 8007d80:	b108      	cbz	r0, 8007d86 <_printf_i+0x1e6>
 8007d82:	1b80      	subs	r0, r0, r6
 8007d84:	6060      	str	r0, [r4, #4]
 8007d86:	6863      	ldr	r3, [r4, #4]
 8007d88:	6123      	str	r3, [r4, #16]
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007d90:	e7aa      	b.n	8007ce8 <_printf_i+0x148>
 8007d92:	6923      	ldr	r3, [r4, #16]
 8007d94:	4632      	mov	r2, r6
 8007d96:	4649      	mov	r1, r9
 8007d98:	4640      	mov	r0, r8
 8007d9a:	47d0      	blx	sl
 8007d9c:	3001      	adds	r0, #1
 8007d9e:	d0ad      	beq.n	8007cfc <_printf_i+0x15c>
 8007da0:	6823      	ldr	r3, [r4, #0]
 8007da2:	079b      	lsls	r3, r3, #30
 8007da4:	d413      	bmi.n	8007dce <_printf_i+0x22e>
 8007da6:	68e0      	ldr	r0, [r4, #12]
 8007da8:	9b03      	ldr	r3, [sp, #12]
 8007daa:	4298      	cmp	r0, r3
 8007dac:	bfb8      	it	lt
 8007dae:	4618      	movlt	r0, r3
 8007db0:	e7a6      	b.n	8007d00 <_printf_i+0x160>
 8007db2:	2301      	movs	r3, #1
 8007db4:	4632      	mov	r2, r6
 8007db6:	4649      	mov	r1, r9
 8007db8:	4640      	mov	r0, r8
 8007dba:	47d0      	blx	sl
 8007dbc:	3001      	adds	r0, #1
 8007dbe:	d09d      	beq.n	8007cfc <_printf_i+0x15c>
 8007dc0:	3501      	adds	r5, #1
 8007dc2:	68e3      	ldr	r3, [r4, #12]
 8007dc4:	9903      	ldr	r1, [sp, #12]
 8007dc6:	1a5b      	subs	r3, r3, r1
 8007dc8:	42ab      	cmp	r3, r5
 8007dca:	dcf2      	bgt.n	8007db2 <_printf_i+0x212>
 8007dcc:	e7eb      	b.n	8007da6 <_printf_i+0x206>
 8007dce:	2500      	movs	r5, #0
 8007dd0:	f104 0619 	add.w	r6, r4, #25
 8007dd4:	e7f5      	b.n	8007dc2 <_printf_i+0x222>
 8007dd6:	bf00      	nop
 8007dd8:	08008318 	.word	0x08008318
 8007ddc:	08008329 	.word	0x08008329

08007de0 <__swbuf_r>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	460e      	mov	r6, r1
 8007de4:	4614      	mov	r4, r2
 8007de6:	4605      	mov	r5, r0
 8007de8:	b118      	cbz	r0, 8007df2 <__swbuf_r+0x12>
 8007dea:	6a03      	ldr	r3, [r0, #32]
 8007dec:	b90b      	cbnz	r3, 8007df2 <__swbuf_r+0x12>
 8007dee:	f7ff fa37 	bl	8007260 <__sinit>
 8007df2:	69a3      	ldr	r3, [r4, #24]
 8007df4:	60a3      	str	r3, [r4, #8]
 8007df6:	89a3      	ldrh	r3, [r4, #12]
 8007df8:	071a      	lsls	r2, r3, #28
 8007dfa:	d501      	bpl.n	8007e00 <__swbuf_r+0x20>
 8007dfc:	6923      	ldr	r3, [r4, #16]
 8007dfe:	b943      	cbnz	r3, 8007e12 <__swbuf_r+0x32>
 8007e00:	4621      	mov	r1, r4
 8007e02:	4628      	mov	r0, r5
 8007e04:	f000 f82a 	bl	8007e5c <__swsetup_r>
 8007e08:	b118      	cbz	r0, 8007e12 <__swbuf_r+0x32>
 8007e0a:	f04f 37ff 	mov.w	r7, #4294967295
 8007e0e:	4638      	mov	r0, r7
 8007e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e12:	6823      	ldr	r3, [r4, #0]
 8007e14:	6922      	ldr	r2, [r4, #16]
 8007e16:	1a98      	subs	r0, r3, r2
 8007e18:	6963      	ldr	r3, [r4, #20]
 8007e1a:	b2f6      	uxtb	r6, r6
 8007e1c:	4283      	cmp	r3, r0
 8007e1e:	4637      	mov	r7, r6
 8007e20:	dc05      	bgt.n	8007e2e <__swbuf_r+0x4e>
 8007e22:	4621      	mov	r1, r4
 8007e24:	4628      	mov	r0, r5
 8007e26:	f7ff fcbb 	bl	80077a0 <_fflush_r>
 8007e2a:	2800      	cmp	r0, #0
 8007e2c:	d1ed      	bne.n	8007e0a <__swbuf_r+0x2a>
 8007e2e:	68a3      	ldr	r3, [r4, #8]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	60a3      	str	r3, [r4, #8]
 8007e34:	6823      	ldr	r3, [r4, #0]
 8007e36:	1c5a      	adds	r2, r3, #1
 8007e38:	6022      	str	r2, [r4, #0]
 8007e3a:	701e      	strb	r6, [r3, #0]
 8007e3c:	6962      	ldr	r2, [r4, #20]
 8007e3e:	1c43      	adds	r3, r0, #1
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d004      	beq.n	8007e4e <__swbuf_r+0x6e>
 8007e44:	89a3      	ldrh	r3, [r4, #12]
 8007e46:	07db      	lsls	r3, r3, #31
 8007e48:	d5e1      	bpl.n	8007e0e <__swbuf_r+0x2e>
 8007e4a:	2e0a      	cmp	r6, #10
 8007e4c:	d1df      	bne.n	8007e0e <__swbuf_r+0x2e>
 8007e4e:	4621      	mov	r1, r4
 8007e50:	4628      	mov	r0, r5
 8007e52:	f7ff fca5 	bl	80077a0 <_fflush_r>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	d0d9      	beq.n	8007e0e <__swbuf_r+0x2e>
 8007e5a:	e7d6      	b.n	8007e0a <__swbuf_r+0x2a>

08007e5c <__swsetup_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4b29      	ldr	r3, [pc, #164]	@ (8007f04 <__swsetup_r+0xa8>)
 8007e60:	4605      	mov	r5, r0
 8007e62:	6818      	ldr	r0, [r3, #0]
 8007e64:	460c      	mov	r4, r1
 8007e66:	b118      	cbz	r0, 8007e70 <__swsetup_r+0x14>
 8007e68:	6a03      	ldr	r3, [r0, #32]
 8007e6a:	b90b      	cbnz	r3, 8007e70 <__swsetup_r+0x14>
 8007e6c:	f7ff f9f8 	bl	8007260 <__sinit>
 8007e70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e74:	0719      	lsls	r1, r3, #28
 8007e76:	d422      	bmi.n	8007ebe <__swsetup_r+0x62>
 8007e78:	06da      	lsls	r2, r3, #27
 8007e7a:	d407      	bmi.n	8007e8c <__swsetup_r+0x30>
 8007e7c:	2209      	movs	r2, #9
 8007e7e:	602a      	str	r2, [r5, #0]
 8007e80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e84:	81a3      	strh	r3, [r4, #12]
 8007e86:	f04f 30ff 	mov.w	r0, #4294967295
 8007e8a:	e033      	b.n	8007ef4 <__swsetup_r+0x98>
 8007e8c:	0758      	lsls	r0, r3, #29
 8007e8e:	d512      	bpl.n	8007eb6 <__swsetup_r+0x5a>
 8007e90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e92:	b141      	cbz	r1, 8007ea6 <__swsetup_r+0x4a>
 8007e94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e98:	4299      	cmp	r1, r3
 8007e9a:	d002      	beq.n	8007ea2 <__swsetup_r+0x46>
 8007e9c:	4628      	mov	r0, r5
 8007e9e:	f7ff fafb 	bl	8007498 <_free_r>
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ea6:	89a3      	ldrh	r3, [r4, #12]
 8007ea8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007eac:	81a3      	strh	r3, [r4, #12]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6063      	str	r3, [r4, #4]
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	6023      	str	r3, [r4, #0]
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	f043 0308 	orr.w	r3, r3, #8
 8007ebc:	81a3      	strh	r3, [r4, #12]
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	b94b      	cbnz	r3, 8007ed6 <__swsetup_r+0x7a>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ec8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ecc:	d003      	beq.n	8007ed6 <__swsetup_r+0x7a>
 8007ece:	4621      	mov	r1, r4
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f000 f883 	bl	8007fdc <__smakebuf_r>
 8007ed6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eda:	f013 0201 	ands.w	r2, r3, #1
 8007ede:	d00a      	beq.n	8007ef6 <__swsetup_r+0x9a>
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	60a2      	str	r2, [r4, #8]
 8007ee4:	6962      	ldr	r2, [r4, #20]
 8007ee6:	4252      	negs	r2, r2
 8007ee8:	61a2      	str	r2, [r4, #24]
 8007eea:	6922      	ldr	r2, [r4, #16]
 8007eec:	b942      	cbnz	r2, 8007f00 <__swsetup_r+0xa4>
 8007eee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ef2:	d1c5      	bne.n	8007e80 <__swsetup_r+0x24>
 8007ef4:	bd38      	pop	{r3, r4, r5, pc}
 8007ef6:	0799      	lsls	r1, r3, #30
 8007ef8:	bf58      	it	pl
 8007efa:	6962      	ldrpl	r2, [r4, #20]
 8007efc:	60a2      	str	r2, [r4, #8]
 8007efe:	e7f4      	b.n	8007eea <__swsetup_r+0x8e>
 8007f00:	2000      	movs	r0, #0
 8007f02:	e7f7      	b.n	8007ef4 <__swsetup_r+0x98>
 8007f04:	20000050 	.word	0x20000050

08007f08 <_raise_r>:
 8007f08:	291f      	cmp	r1, #31
 8007f0a:	b538      	push	{r3, r4, r5, lr}
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	d904      	bls.n	8007f1c <_raise_r+0x14>
 8007f12:	2316      	movs	r3, #22
 8007f14:	6003      	str	r3, [r0, #0]
 8007f16:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007f1e:	b112      	cbz	r2, 8007f26 <_raise_r+0x1e>
 8007f20:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f24:	b94b      	cbnz	r3, 8007f3a <_raise_r+0x32>
 8007f26:	4628      	mov	r0, r5
 8007f28:	f000 f830 	bl	8007f8c <_getpid_r>
 8007f2c:	4622      	mov	r2, r4
 8007f2e:	4601      	mov	r1, r0
 8007f30:	4628      	mov	r0, r5
 8007f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f36:	f000 b817 	b.w	8007f68 <_kill_r>
 8007f3a:	2b01      	cmp	r3, #1
 8007f3c:	d00a      	beq.n	8007f54 <_raise_r+0x4c>
 8007f3e:	1c59      	adds	r1, r3, #1
 8007f40:	d103      	bne.n	8007f4a <_raise_r+0x42>
 8007f42:	2316      	movs	r3, #22
 8007f44:	6003      	str	r3, [r0, #0]
 8007f46:	2001      	movs	r0, #1
 8007f48:	e7e7      	b.n	8007f1a <_raise_r+0x12>
 8007f4a:	2100      	movs	r1, #0
 8007f4c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f50:	4620      	mov	r0, r4
 8007f52:	4798      	blx	r3
 8007f54:	2000      	movs	r0, #0
 8007f56:	e7e0      	b.n	8007f1a <_raise_r+0x12>

08007f58 <raise>:
 8007f58:	4b02      	ldr	r3, [pc, #8]	@ (8007f64 <raise+0xc>)
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	f7ff bfd3 	b.w	8007f08 <_raise_r>
 8007f62:	bf00      	nop
 8007f64:	20000050 	.word	0x20000050

08007f68 <_kill_r>:
 8007f68:	b538      	push	{r3, r4, r5, lr}
 8007f6a:	4d07      	ldr	r5, [pc, #28]	@ (8007f88 <_kill_r+0x20>)
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	4604      	mov	r4, r0
 8007f70:	4608      	mov	r0, r1
 8007f72:	4611      	mov	r1, r2
 8007f74:	602b      	str	r3, [r5, #0]
 8007f76:	f7f9 fc21 	bl	80017bc <_kill>
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	d102      	bne.n	8007f84 <_kill_r+0x1c>
 8007f7e:	682b      	ldr	r3, [r5, #0]
 8007f80:	b103      	cbz	r3, 8007f84 <_kill_r+0x1c>
 8007f82:	6023      	str	r3, [r4, #0]
 8007f84:	bd38      	pop	{r3, r4, r5, pc}
 8007f86:	bf00      	nop
 8007f88:	20000634 	.word	0x20000634

08007f8c <_getpid_r>:
 8007f8c:	f7f9 bc0e 	b.w	80017ac <_getpid>

08007f90 <__swhatbuf_r>:
 8007f90:	b570      	push	{r4, r5, r6, lr}
 8007f92:	460c      	mov	r4, r1
 8007f94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f98:	2900      	cmp	r1, #0
 8007f9a:	b096      	sub	sp, #88	@ 0x58
 8007f9c:	4615      	mov	r5, r2
 8007f9e:	461e      	mov	r6, r3
 8007fa0:	da0d      	bge.n	8007fbe <__swhatbuf_r+0x2e>
 8007fa2:	89a3      	ldrh	r3, [r4, #12]
 8007fa4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007fa8:	f04f 0100 	mov.w	r1, #0
 8007fac:	bf14      	ite	ne
 8007fae:	2340      	movne	r3, #64	@ 0x40
 8007fb0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007fb4:	2000      	movs	r0, #0
 8007fb6:	6031      	str	r1, [r6, #0]
 8007fb8:	602b      	str	r3, [r5, #0]
 8007fba:	b016      	add	sp, #88	@ 0x58
 8007fbc:	bd70      	pop	{r4, r5, r6, pc}
 8007fbe:	466a      	mov	r2, sp
 8007fc0:	f000 f848 	bl	8008054 <_fstat_r>
 8007fc4:	2800      	cmp	r0, #0
 8007fc6:	dbec      	blt.n	8007fa2 <__swhatbuf_r+0x12>
 8007fc8:	9901      	ldr	r1, [sp, #4]
 8007fca:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fce:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fd2:	4259      	negs	r1, r3
 8007fd4:	4159      	adcs	r1, r3
 8007fd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fda:	e7eb      	b.n	8007fb4 <__swhatbuf_r+0x24>

08007fdc <__smakebuf_r>:
 8007fdc:	898b      	ldrh	r3, [r1, #12]
 8007fde:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fe0:	079d      	lsls	r5, r3, #30
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460c      	mov	r4, r1
 8007fe6:	d507      	bpl.n	8007ff8 <__smakebuf_r+0x1c>
 8007fe8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fec:	6023      	str	r3, [r4, #0]
 8007fee:	6123      	str	r3, [r4, #16]
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	6163      	str	r3, [r4, #20]
 8007ff4:	b003      	add	sp, #12
 8007ff6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ff8:	ab01      	add	r3, sp, #4
 8007ffa:	466a      	mov	r2, sp
 8007ffc:	f7ff ffc8 	bl	8007f90 <__swhatbuf_r>
 8008000:	9f00      	ldr	r7, [sp, #0]
 8008002:	4605      	mov	r5, r0
 8008004:	4639      	mov	r1, r7
 8008006:	4630      	mov	r0, r6
 8008008:	f7ff faba 	bl	8007580 <_malloc_r>
 800800c:	b948      	cbnz	r0, 8008022 <__smakebuf_r+0x46>
 800800e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008012:	059a      	lsls	r2, r3, #22
 8008014:	d4ee      	bmi.n	8007ff4 <__smakebuf_r+0x18>
 8008016:	f023 0303 	bic.w	r3, r3, #3
 800801a:	f043 0302 	orr.w	r3, r3, #2
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	e7e2      	b.n	8007fe8 <__smakebuf_r+0xc>
 8008022:	89a3      	ldrh	r3, [r4, #12]
 8008024:	6020      	str	r0, [r4, #0]
 8008026:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800802a:	81a3      	strh	r3, [r4, #12]
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008032:	b15b      	cbz	r3, 800804c <__smakebuf_r+0x70>
 8008034:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008038:	4630      	mov	r0, r6
 800803a:	f000 f81d 	bl	8008078 <_isatty_r>
 800803e:	b128      	cbz	r0, 800804c <__smakebuf_r+0x70>
 8008040:	89a3      	ldrh	r3, [r4, #12]
 8008042:	f023 0303 	bic.w	r3, r3, #3
 8008046:	f043 0301 	orr.w	r3, r3, #1
 800804a:	81a3      	strh	r3, [r4, #12]
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	431d      	orrs	r5, r3
 8008050:	81a5      	strh	r5, [r4, #12]
 8008052:	e7cf      	b.n	8007ff4 <__smakebuf_r+0x18>

08008054 <_fstat_r>:
 8008054:	b538      	push	{r3, r4, r5, lr}
 8008056:	4d07      	ldr	r5, [pc, #28]	@ (8008074 <_fstat_r+0x20>)
 8008058:	2300      	movs	r3, #0
 800805a:	4604      	mov	r4, r0
 800805c:	4608      	mov	r0, r1
 800805e:	4611      	mov	r1, r2
 8008060:	602b      	str	r3, [r5, #0]
 8008062:	f7f9 fc0b 	bl	800187c <_fstat>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	d102      	bne.n	8008070 <_fstat_r+0x1c>
 800806a:	682b      	ldr	r3, [r5, #0]
 800806c:	b103      	cbz	r3, 8008070 <_fstat_r+0x1c>
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	bd38      	pop	{r3, r4, r5, pc}
 8008072:	bf00      	nop
 8008074:	20000634 	.word	0x20000634

08008078 <_isatty_r>:
 8008078:	b538      	push	{r3, r4, r5, lr}
 800807a:	4d06      	ldr	r5, [pc, #24]	@ (8008094 <_isatty_r+0x1c>)
 800807c:	2300      	movs	r3, #0
 800807e:	4604      	mov	r4, r0
 8008080:	4608      	mov	r0, r1
 8008082:	602b      	str	r3, [r5, #0]
 8008084:	f7f9 fc0a 	bl	800189c <_isatty>
 8008088:	1c43      	adds	r3, r0, #1
 800808a:	d102      	bne.n	8008092 <_isatty_r+0x1a>
 800808c:	682b      	ldr	r3, [r5, #0]
 800808e:	b103      	cbz	r3, 8008092 <_isatty_r+0x1a>
 8008090:	6023      	str	r3, [r4, #0]
 8008092:	bd38      	pop	{r3, r4, r5, pc}
 8008094:	20000634 	.word	0x20000634

08008098 <_init>:
 8008098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800809a:	bf00      	nop
 800809c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800809e:	bc08      	pop	{r3}
 80080a0:	469e      	mov	lr, r3
 80080a2:	4770      	bx	lr

080080a4 <_fini>:
 80080a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080a6:	bf00      	nop
 80080a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080aa:	bc08      	pop	{r3}
 80080ac:	469e      	mov	lr, r3
 80080ae:	4770      	bx	lr
